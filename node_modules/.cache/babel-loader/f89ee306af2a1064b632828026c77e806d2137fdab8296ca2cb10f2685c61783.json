{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { getIntrospectionQuery } from \"graphql/utilities/index.js\";\nimport fetchQuery from \"./fetchQuery.js\";\nimport { Api } from \"../Api.js\";\nimport { Field } from \"../Field.js\";\nimport { Resource } from \"../Resource.js\";\nconst getRangeFromGraphQlType = type => {\n  if (type.kind === \"NON_NULL\") {\n    if (type.ofType.kind === \"LIST\") {\n      return `Array<${getRangeFromGraphQlType(type.ofType.ofType)}>`;\n    }\n    return type.ofType.name;\n  }\n  if (type.kind === \"LIST\") {\n    return `Array<${getRangeFromGraphQlType(type.ofType)}>`;\n  }\n  return type.name;\n};\nconst getReferenceFromGraphQlType = type => {\n  if (type.kind === \"OBJECT\" && type.name.endsWith(\"Connection\")) {\n    return type.name.slice(0, type.name.lastIndexOf(\"Connection\"));\n  }\n  return null;\n};\nexport default (function (entrypointUrl) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return __awaiter(void 0, void 0, void 0, function* () {\n    const introspectionQuery = getIntrospectionQuery();\n    const {\n      response,\n      body: {\n        data\n      }\n    } = yield fetchQuery(entrypointUrl, introspectionQuery, options);\n    if (!(data === null || data === void 0 ? void 0 : data.__schema)) {\n      throw new Error(\"Schema has not been retrieved from the introspection query.\");\n    }\n    const schema = data === null || data === void 0 ? void 0 : data.__schema;\n    const typeResources = schema.types.filter(type => {\n      var _a, _b;\n      return type.kind === \"OBJECT\" && type.name !== schema.queryType.name && type.name !== ((_a = schema.mutationType) === null || _a === void 0 ? void 0 : _a.name) && type.name !== ((_b = schema.subscriptionType) === null || _b === void 0 ? void 0 : _b.name) && !type.name.startsWith(\"__\") &&\n      // mutation\n      !type.name.startsWith(type.name[0].toLowerCase()) && !type.name.endsWith(\"Connection\") && !type.name.endsWith(\"Edge\") && !type.name.endsWith(\"PageInfo\");\n    });\n    const resources = [];\n    typeResources.forEach(typeResource => {\n      const fields = [];\n      const readableFields = [];\n      const writableFields = [];\n      typeResource.fields.forEach(resourceFieldType => {\n        const field = new Field(resourceFieldType.name, {\n          range: getRangeFromGraphQlType(resourceFieldType.type),\n          reference: getReferenceFromGraphQlType(resourceFieldType.type),\n          required: resourceFieldType.type.kind === \"NON_NULL\",\n          description: resourceFieldType.description,\n          deprecated: resourceFieldType.isDeprecated\n        });\n        fields.push(field);\n        readableFields.push(field);\n        writableFields.push(field);\n      });\n      resources.push(new Resource(typeResource.name, \"\", {\n        fields,\n        readableFields,\n        writableFields\n      }));\n    });\n    resources.forEach(resource => {\n      var _a;\n      (_a = resource.fields) === null || _a === void 0 ? void 0 : _a.forEach(field => {\n        if (null !== field.reference) {\n          field.reference = resources.find(resource => resource.name === field.reference) || null;\n        } else if (null !== field.range) {\n          field.reference = resources.find(resource => resource.name === field.range) || null;\n        }\n      });\n    });\n    return {\n      api: new Api(entrypointUrl, {\n        resources\n      }),\n      response\n    };\n  });\n});","map":{"version":3,"mappings":"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","names":["getIntrospectionQuery","fetchQuery","Api","Field","Resource","getRangeFromGraphQlType","type","kind","ofType","name","getReferenceFromGraphQlType","endsWith","slice","lastIndexOf","entrypointUrl","options","__awaiter","introspectionQuery","response","body","data","__schema","Error","schema","typeResources","types","filter","queryType","mutationType","subscriptionType","startsWith","toLowerCase","resources","forEach","typeResource","fields","readableFields","writableFields","resourceFieldType","field","range","reference","required","description","deprecated","isDeprecated","push","resource","find","api"],"sources":["C:\\Users\\kevin\\Desktop\\EGS data\\Egs-Ladder-Front\\EGS-ladder-front\\node_modules\\@api-platform\\api-doc-parser\\src\\graphql\\parseGraphQl.ts"],"sourcesContent":["import { getIntrospectionQuery } from \"graphql/utilities/index.js\";\nimport fetchQuery from \"./fetchQuery.js\";\nimport { Api } from \"../Api.js\";\nimport { Field } from \"../Field.js\";\nimport { Resource } from \"../Resource.js\";\nimport type {\n  IntrospectionObjectType,\n  IntrospectionOutputTypeRef,\n  IntrospectionQuery,\n} from \"graphql/utilities\";\n\nconst getRangeFromGraphQlType = (type: IntrospectionOutputTypeRef): string => {\n  if (type.kind === \"NON_NULL\") {\n    if (type.ofType.kind === \"LIST\") {\n      return `Array<${getRangeFromGraphQlType(type.ofType.ofType)}>`;\n    }\n\n    return type.ofType.name;\n  }\n\n  if (type.kind === \"LIST\") {\n    return `Array<${getRangeFromGraphQlType(type.ofType)}>`;\n  }\n\n  return type.name;\n};\n\nconst getReferenceFromGraphQlType = (\n  type: IntrospectionOutputTypeRef\n): null | string => {\n  if (type.kind === \"OBJECT\" && type.name.endsWith(\"Connection\")) {\n    return type.name.slice(0, type.name.lastIndexOf(\"Connection\"));\n  }\n\n  return null;\n};\n\nexport default async (\n  entrypointUrl: string,\n  options: RequestInit = {}\n): Promise<{\n  api: Api;\n  response: Response;\n}> => {\n  const introspectionQuery = getIntrospectionQuery();\n\n  const {\n    response,\n    body: { data },\n  } = await fetchQuery<IntrospectionQuery>(\n    entrypointUrl,\n    introspectionQuery,\n    options\n  );\n  if (!data?.__schema) {\n    throw new Error(\n      \"Schema has not been retrieved from the introspection query.\"\n    );\n  }\n  const schema = data?.__schema;\n\n  const typeResources = schema.types.filter(\n    (type) =>\n      type.kind === \"OBJECT\" &&\n      type.name !== schema.queryType.name &&\n      type.name !== schema.mutationType?.name &&\n      type.name !== schema.subscriptionType?.name &&\n      !type.name.startsWith(\"__\") &&\n      // mutation\n      !type.name.startsWith(type.name[0].toLowerCase()) &&\n      !type.name.endsWith(\"Connection\") &&\n      !type.name.endsWith(\"Edge\") &&\n      !type.name.endsWith(\"PageInfo\")\n  ) as IntrospectionObjectType[];\n\n  const resources: Resource[] = [];\n  typeResources.forEach((typeResource) => {\n    const fields: Field[] = [];\n    const readableFields: Field[] = [];\n    const writableFields: Field[] = [];\n\n    typeResource.fields.forEach((resourceFieldType) => {\n      const field = new Field(resourceFieldType.name, {\n        range: getRangeFromGraphQlType(resourceFieldType.type),\n        reference: getReferenceFromGraphQlType(resourceFieldType.type),\n        required: resourceFieldType.type.kind === \"NON_NULL\",\n        description: resourceFieldType.description,\n        deprecated: resourceFieldType.isDeprecated,\n      });\n\n      fields.push(field);\n      readableFields.push(field);\n      writableFields.push(field);\n    });\n\n    resources.push(\n      new Resource(typeResource.name, \"\", {\n        fields,\n        readableFields,\n        writableFields,\n      })\n    );\n  });\n\n  resources.forEach((resource) => {\n    resource.fields?.forEach((field) => {\n      if (null !== field.reference) {\n        field.reference =\n          resources.find((resource) => resource.name === field.reference) ||\n          null;\n      } else if (null !== field.range) {\n        field.reference =\n          resources.find((resource) => resource.name === field.range) || null;\n      }\n    });\n  });\n\n  return {\n    api: new Api(entrypointUrl, { resources }),\n    response,\n  };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}