{"ast":null,"code":"/*\n * Copyright (c) 2017-2019 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst util = require('./util');\nconst JsonLdError = require('./JsonLdError');\nconst {\n  isArray: _isArray,\n  isObject: _isObject,\n  isString: _isString,\n  isUndefined: _isUndefined\n} = require('./types');\nconst {\n  isAbsolute: _isAbsoluteIri,\n  isRelative: _isRelativeIri,\n  prependBase\n} = require('./url');\nconst {\n  handleEvent: _handleEvent\n} = require('./events');\nconst {\n  REGEX_BCP47,\n  REGEX_KEYWORD,\n  asArray: _asArray,\n  compareShortestLeast: _compareShortestLeast\n} = require('./util');\nconst INITIAL_CONTEXT_CACHE = new Map();\nconst INITIAL_CONTEXT_CACHE_MAX_SIZE = 10000;\nconst api = {};\nmodule.exports = api;\n\n/**\n * Processes a local context and returns a new active context.\n *\n * @param activeCtx the current active context.\n * @param localCtx the local context to process.\n * @param options the context processing options.\n * @param propagate `true` if `false`, retains any previously defined term,\n *   which can be rolled back when the descending into a new node object.\n * @param overrideProtected `false` allows protected terms to be modified.\n *\n * @return a Promise that resolves to the new active context.\n */\napi.process = async _ref => {\n  let {\n    activeCtx,\n    localCtx,\n    options,\n    propagate = true,\n    overrideProtected = false,\n    cycles = new Set()\n  } = _ref;\n  // normalize local context to an array of @context objects\n  if (_isObject(localCtx) && '@context' in localCtx && _isArray(localCtx['@context'])) {\n    localCtx = localCtx['@context'];\n  }\n  const ctxs = _asArray(localCtx);\n\n  // no contexts in array, return current active context w/o changes\n  if (ctxs.length === 0) {\n    return activeCtx;\n  }\n\n  // event handler for capturing events to replay when using a cached context\n  const events = [];\n  const eventCaptureHandler = [_ref2 => {\n    let {\n      event,\n      next\n    } = _ref2;\n    events.push(event);\n    next();\n  }];\n  // chain to original handler\n  if (options.eventHandler) {\n    eventCaptureHandler.push(options.eventHandler);\n  }\n  // store original options to use when replaying events\n  const originalOptions = options;\n  // shallow clone options with event capture handler\n  options = {\n    ...options,\n    eventHandler: eventCaptureHandler\n  };\n\n  // resolve contexts\n  const resolved = await options.contextResolver.resolve({\n    activeCtx,\n    context: localCtx,\n    documentLoader: options.documentLoader,\n    base: options.base\n  });\n\n  // override propagate if first resolved context has `@propagate`\n  if (_isObject(resolved[0].document) && typeof resolved[0].document['@propagate'] === 'boolean') {\n    // retrieve early, error checking done later\n    propagate = resolved[0].document['@propagate'];\n  }\n\n  // process each context in order, update active context\n  // on each iteration to ensure proper caching\n  let rval = activeCtx;\n\n  // track the previous context\n  // if not propagating, make sure rval has a previous context\n  if (!propagate && !rval.previousContext) {\n    // clone `rval` context before updating\n    rval = rval.clone();\n    rval.previousContext = activeCtx;\n  }\n  for (const resolvedContext of resolved) {\n    let {\n      document: ctx\n    } = resolvedContext;\n\n    // update active context to one computed from last iteration\n    activeCtx = rval;\n\n    // reset to initial context\n    if (ctx === null) {\n      // We can't nullify if there are protected terms and we're\n      // not allowing overrides (e.g. processing a property term scoped context)\n      if (!overrideProtected && Object.keys(activeCtx.protected).length !== 0) {\n        throw new JsonLdError('Tried to nullify a context with protected terms outside of ' + 'a term definition.', 'jsonld.SyntaxError', {\n          code: 'invalid context nullification'\n        });\n      }\n      rval = activeCtx = api.getInitialContext(options).clone();\n      continue;\n    }\n\n    // get processed context from cache if available\n    const processed = resolvedContext.getProcessed(activeCtx);\n    if (processed) {\n      if (originalOptions.eventHandler) {\n        // replay events with original non-capturing options\n        for (const event of processed.events) {\n          _handleEvent({\n            event,\n            options: originalOptions\n          });\n        }\n      }\n      rval = activeCtx = processed.context;\n      continue;\n    }\n\n    // dereference @context key if present\n    if (_isObject(ctx) && '@context' in ctx) {\n      ctx = ctx['@context'];\n    }\n\n    // context must be an object by now, all URLs retrieved before this call\n    if (!_isObject(ctx)) {\n      throw new JsonLdError('Invalid JSON-LD syntax; @context must be an object.', 'jsonld.SyntaxError', {\n        code: 'invalid local context',\n        context: ctx\n      });\n    }\n\n    // TODO: there is likely a `previousContext` cloning optimization that\n    // could be applied here (no need to copy it under certain conditions)\n\n    // clone context before updating it\n    rval = rval.clone();\n\n    // define context mappings for keys in local context\n    const defined = new Map();\n\n    // handle @version\n    if ('@version' in ctx) {\n      if (ctx['@version'] !== 1.1) {\n        throw new JsonLdError('Unsupported JSON-LD version: ' + ctx['@version'], 'jsonld.UnsupportedVersion', {\n          code: 'invalid @version value',\n          context: ctx\n        });\n      }\n      if (activeCtx.processingMode && activeCtx.processingMode === 'json-ld-1.0') {\n        throw new JsonLdError('@version: ' + ctx['@version'] + ' not compatible with ' + activeCtx.processingMode, 'jsonld.ProcessingModeConflict', {\n          code: 'processing mode conflict',\n          context: ctx\n        });\n      }\n      rval.processingMode = 'json-ld-1.1';\n      rval['@version'] = ctx['@version'];\n      defined.set('@version', true);\n    }\n\n    // if not set explicitly, set processingMode to \"json-ld-1.1\"\n    rval.processingMode = rval.processingMode || activeCtx.processingMode;\n\n    // handle @base\n    if ('@base' in ctx) {\n      let base = ctx['@base'];\n      if (base === null || _isAbsoluteIri(base)) {\n        // no action\n      } else if (_isRelativeIri(base)) {\n        base = prependBase(rval['@base'], base);\n      } else {\n        throw new JsonLdError('Invalid JSON-LD syntax; the value of \"@base\" in a ' + '@context must be an absolute IRI, a relative IRI, or null.', 'jsonld.SyntaxError', {\n          code: 'invalid base IRI',\n          context: ctx\n        });\n      }\n      rval['@base'] = base;\n      defined.set('@base', true);\n    }\n\n    // handle @vocab\n    if ('@vocab' in ctx) {\n      const value = ctx['@vocab'];\n      if (value === null) {\n        delete rval['@vocab'];\n      } else if (!_isString(value)) {\n        throw new JsonLdError('Invalid JSON-LD syntax; the value of \"@vocab\" in a ' + '@context must be a string or null.', 'jsonld.SyntaxError', {\n          code: 'invalid vocab mapping',\n          context: ctx\n        });\n      } else if (!_isAbsoluteIri(value) && api.processingMode(rval, 1.0)) {\n        throw new JsonLdError('Invalid JSON-LD syntax; the value of \"@vocab\" in a ' + '@context must be an absolute IRI.', 'jsonld.SyntaxError', {\n          code: 'invalid vocab mapping',\n          context: ctx\n        });\n      } else {\n        const vocab = _expandIri(rval, value, {\n          vocab: true,\n          base: true\n        }, undefined, undefined, options);\n        if (!_isAbsoluteIri(vocab)) {\n          if (options.eventHandler) {\n            _handleEvent({\n              event: {\n                type: ['JsonLdEvent'],\n                code: 'relative @vocab reference',\n                level: 'warning',\n                message: 'Relative @vocab reference found.',\n                details: {\n                  vocab\n                }\n              },\n              options\n            });\n          }\n        }\n        rval['@vocab'] = vocab;\n      }\n      defined.set('@vocab', true);\n    }\n\n    // handle @language\n    if ('@language' in ctx) {\n      const value = ctx['@language'];\n      if (value === null) {\n        delete rval['@language'];\n      } else if (!_isString(value)) {\n        throw new JsonLdError('Invalid JSON-LD syntax; the value of \"@language\" in a ' + '@context must be a string or null.', 'jsonld.SyntaxError', {\n          code: 'invalid default language',\n          context: ctx\n        });\n      } else {\n        if (!value.match(REGEX_BCP47)) {\n          if (options.eventHandler) {\n            _handleEvent({\n              event: {\n                type: ['JsonLdEvent'],\n                code: 'invalid @language value',\n                level: 'warning',\n                message: '@language value must be valid BCP47.',\n                details: {\n                  language: value\n                }\n              },\n              options\n            });\n          }\n        }\n        rval['@language'] = value.toLowerCase();\n      }\n      defined.set('@language', true);\n    }\n\n    // handle @direction\n    if ('@direction' in ctx) {\n      const value = ctx['@direction'];\n      if (activeCtx.processingMode === 'json-ld-1.0') {\n        throw new JsonLdError('Invalid JSON-LD syntax; @direction not compatible with ' + activeCtx.processingMode, 'jsonld.SyntaxError', {\n          code: 'invalid context member',\n          context: ctx\n        });\n      }\n      if (value === null) {\n        delete rval['@direction'];\n      } else if (value !== 'ltr' && value !== 'rtl') {\n        throw new JsonLdError('Invalid JSON-LD syntax; the value of \"@direction\" in a ' + '@context must be null, \"ltr\", or \"rtl\".', 'jsonld.SyntaxError', {\n          code: 'invalid base direction',\n          context: ctx\n        });\n      } else {\n        rval['@direction'] = value;\n      }\n      defined.set('@direction', true);\n    }\n\n    // handle @propagate\n    // note: we've already extracted it, here we just do error checking\n    if ('@propagate' in ctx) {\n      const value = ctx['@propagate'];\n      if (activeCtx.processingMode === 'json-ld-1.0') {\n        throw new JsonLdError('Invalid JSON-LD syntax; @propagate not compatible with ' + activeCtx.processingMode, 'jsonld.SyntaxError', {\n          code: 'invalid context entry',\n          context: ctx\n        });\n      }\n      if (typeof value !== 'boolean') {\n        throw new JsonLdError('Invalid JSON-LD syntax; @propagate value must be a boolean.', 'jsonld.SyntaxError', {\n          code: 'invalid @propagate value',\n          context: localCtx\n        });\n      }\n      defined.set('@propagate', true);\n    }\n\n    // handle @import\n    if ('@import' in ctx) {\n      const value = ctx['@import'];\n      if (activeCtx.processingMode === 'json-ld-1.0') {\n        throw new JsonLdError('Invalid JSON-LD syntax; @import not compatible with ' + activeCtx.processingMode, 'jsonld.SyntaxError', {\n          code: 'invalid context entry',\n          context: ctx\n        });\n      }\n      if (!_isString(value)) {\n        throw new JsonLdError('Invalid JSON-LD syntax; @import must be a string.', 'jsonld.SyntaxError', {\n          code: 'invalid @import value',\n          context: localCtx\n        });\n      }\n\n      // resolve contexts\n      const resolvedImport = await options.contextResolver.resolve({\n        activeCtx,\n        context: value,\n        documentLoader: options.documentLoader,\n        base: options.base\n      });\n      if (resolvedImport.length !== 1) {\n        throw new JsonLdError('Invalid JSON-LD syntax; @import must reference a single context.', 'jsonld.SyntaxError', {\n          code: 'invalid remote context',\n          context: localCtx\n        });\n      }\n      const processedImport = resolvedImport[0].getProcessed(activeCtx);\n      if (processedImport) {\n        // Note: if the same context were used in this active context\n        // as a reference context, then processed_input might not\n        // be a dict.\n        ctx = processedImport;\n      } else {\n        const importCtx = resolvedImport[0].document;\n        if ('@import' in importCtx) {\n          throw new JsonLdError('Invalid JSON-LD syntax: ' + 'imported context must not include @import.', 'jsonld.SyntaxError', {\n            code: 'invalid context entry',\n            context: localCtx\n          });\n        }\n\n        // merge ctx into importCtx and replace rval with the result\n        for (const key in importCtx) {\n          if (!ctx.hasOwnProperty(key)) {\n            ctx[key] = importCtx[key];\n          }\n        }\n\n        // Note: this could potenially conflict if the import\n        // were used in the same active context as a referenced\n        // context and an import. In this case, we\n        // could override the cached result, but seems unlikely.\n        resolvedImport[0].setProcessed(activeCtx, ctx);\n      }\n      defined.set('@import', true);\n    }\n\n    // handle @protected; determine whether this sub-context is declaring\n    // all its terms to be \"protected\" (exceptions can be made on a\n    // per-definition basis)\n    defined.set('@protected', ctx['@protected'] || false);\n\n    // process all other keys\n    for (const key in ctx) {\n      api.createTermDefinition({\n        activeCtx: rval,\n        localCtx: ctx,\n        term: key,\n        defined,\n        options,\n        overrideProtected\n      });\n      if (_isObject(ctx[key]) && '@context' in ctx[key]) {\n        const keyCtx = ctx[key]['@context'];\n        let process = true;\n        if (_isString(keyCtx)) {\n          const url = prependBase(options.base, keyCtx);\n          // track processed contexts to avoid scoped context recursion\n          if (cycles.has(url)) {\n            process = false;\n          } else {\n            cycles.add(url);\n          }\n        }\n        // parse context to validate\n        if (process) {\n          try {\n            await api.process({\n              activeCtx: rval.clone(),\n              localCtx: ctx[key]['@context'],\n              overrideProtected: true,\n              options,\n              cycles\n            });\n          } catch (e) {\n            throw new JsonLdError('Invalid JSON-LD syntax; invalid scoped context.', 'jsonld.SyntaxError', {\n              code: 'invalid scoped context',\n              context: ctx[key]['@context'],\n              term: key\n            });\n          }\n        }\n      }\n    }\n\n    // cache processed result\n    resolvedContext.setProcessed(activeCtx, {\n      context: rval,\n      events\n    });\n  }\n  return rval;\n};\n\n/**\n * Creates a term definition during context processing.\n *\n * @param activeCtx the current active context.\n * @param localCtx the local context being processed.\n * @param term the term in the local context to define the mapping for.\n * @param defined a map of defining/defined keys to detect cycles and prevent\n *          double definitions.\n * @param {Object} [options] - creation options.\n * @param overrideProtected `false` allows protected terms to be modified.\n */\napi.createTermDefinition = _ref3 => {\n  let {\n    activeCtx,\n    localCtx,\n    term,\n    defined,\n    options,\n    overrideProtected = false\n  } = _ref3;\n  if (defined.has(term)) {\n    // term already defined\n    if (defined.get(term)) {\n      return;\n    }\n    // cycle detected\n    throw new JsonLdError('Cyclical context definition detected.', 'jsonld.CyclicalContext', {\n      code: 'cyclic IRI mapping',\n      context: localCtx,\n      term\n    });\n  }\n\n  // now defining term\n  defined.set(term, false);\n\n  // get context term value\n  let value;\n  if (localCtx.hasOwnProperty(term)) {\n    value = localCtx[term];\n  }\n  if (term === '@type' && _isObject(value) && (value['@container'] || '@set') === '@set' && api.processingMode(activeCtx, 1.1)) {\n    const validKeys = ['@container', '@id', '@protected'];\n    const keys = Object.keys(value);\n    if (keys.length === 0 || keys.some(k => !validKeys.includes(k))) {\n      throw new JsonLdError('Invalid JSON-LD syntax; keywords cannot be overridden.', 'jsonld.SyntaxError', {\n        code: 'keyword redefinition',\n        context: localCtx,\n        term\n      });\n    }\n  } else if (api.isKeyword(term)) {\n    throw new JsonLdError('Invalid JSON-LD syntax; keywords cannot be overridden.', 'jsonld.SyntaxError', {\n      code: 'keyword redefinition',\n      context: localCtx,\n      term\n    });\n  } else if (term.match(REGEX_KEYWORD)) {\n    if (options.eventHandler) {\n      _handleEvent({\n        event: {\n          type: ['JsonLdEvent'],\n          code: 'reserved term',\n          level: 'warning',\n          message: 'Terms beginning with \"@\" are ' + 'reserved for future use and dropped.',\n          details: {\n            term\n          }\n        },\n        options\n      });\n    }\n    return;\n  } else if (term === '') {\n    throw new JsonLdError('Invalid JSON-LD syntax; a term cannot be an empty string.', 'jsonld.SyntaxError', {\n      code: 'invalid term definition',\n      context: localCtx\n    });\n  }\n\n  // keep reference to previous mapping for potential `@protected` check\n  const previousMapping = activeCtx.mappings.get(term);\n\n  // remove old mapping\n  if (activeCtx.mappings.has(term)) {\n    activeCtx.mappings.delete(term);\n  }\n\n  // convert short-hand value to object w/@id\n  let simpleTerm = false;\n  if (_isString(value) || value === null) {\n    simpleTerm = true;\n    value = {\n      '@id': value\n    };\n  }\n  if (!_isObject(value)) {\n    throw new JsonLdError('Invalid JSON-LD syntax; @context term values must be ' + 'strings or objects.', 'jsonld.SyntaxError', {\n      code: 'invalid term definition',\n      context: localCtx\n    });\n  }\n\n  // create new mapping\n  const mapping = {};\n  activeCtx.mappings.set(term, mapping);\n  mapping.reverse = false;\n\n  // make sure term definition only has expected keywords\n  const validKeys = ['@container', '@id', '@language', '@reverse', '@type'];\n\n  // JSON-LD 1.1 support\n  if (api.processingMode(activeCtx, 1.1)) {\n    validKeys.push('@context', '@direction', '@index', '@nest', '@prefix', '@protected');\n  }\n  for (const kw in value) {\n    if (!validKeys.includes(kw)) {\n      throw new JsonLdError('Invalid JSON-LD syntax; a term definition must not contain ' + kw, 'jsonld.SyntaxError', {\n        code: 'invalid term definition',\n        context: localCtx\n      });\n    }\n  }\n\n  // always compute whether term has a colon as an optimization for\n  // _compactIri\n  const colon = term.indexOf(':');\n  mapping._termHasColon = colon > 0;\n  if ('@reverse' in value) {\n    if ('@id' in value) {\n      throw new JsonLdError('Invalid JSON-LD syntax; a @reverse term definition must not ' + 'contain @id.', 'jsonld.SyntaxError', {\n        code: 'invalid reverse property',\n        context: localCtx\n      });\n    }\n    if ('@nest' in value) {\n      throw new JsonLdError('Invalid JSON-LD syntax; a @reverse term definition must not ' + 'contain @nest.', 'jsonld.SyntaxError', {\n        code: 'invalid reverse property',\n        context: localCtx\n      });\n    }\n    const reverse = value['@reverse'];\n    if (!_isString(reverse)) {\n      throw new JsonLdError('Invalid JSON-LD syntax; a @context @reverse value must be a string.', 'jsonld.SyntaxError', {\n        code: 'invalid IRI mapping',\n        context: localCtx\n      });\n    }\n    if (reverse.match(REGEX_KEYWORD)) {\n      if (options.eventHandler) {\n        _handleEvent({\n          event: {\n            type: ['JsonLdEvent'],\n            code: 'reserved @reverse value',\n            level: 'warning',\n            message: '@reverse values beginning with \"@\" are ' + 'reserved for future use and dropped.',\n            details: {\n              reverse\n            }\n          },\n          options\n        });\n      }\n      if (previousMapping) {\n        activeCtx.mappings.set(term, previousMapping);\n      } else {\n        activeCtx.mappings.delete(term);\n      }\n      return;\n    }\n\n    // expand and add @id mapping\n    const id = _expandIri(activeCtx, reverse, {\n      vocab: true,\n      base: false\n    }, localCtx, defined, options);\n    if (!_isAbsoluteIri(id)) {\n      throw new JsonLdError('Invalid JSON-LD syntax; a @context @reverse value must be an ' + 'absolute IRI or a blank node identifier.', 'jsonld.SyntaxError', {\n        code: 'invalid IRI mapping',\n        context: localCtx\n      });\n    }\n    mapping['@id'] = id;\n    mapping.reverse = true;\n  } else if ('@id' in value) {\n    let id = value['@id'];\n    if (id && !_isString(id)) {\n      throw new JsonLdError('Invalid JSON-LD syntax; a @context @id value must be an array ' + 'of strings or a string.', 'jsonld.SyntaxError', {\n        code: 'invalid IRI mapping',\n        context: localCtx\n      });\n    }\n    if (id === null) {\n      // reserve a null term, which may be protected\n      mapping['@id'] = null;\n    } else if (!api.isKeyword(id) && id.match(REGEX_KEYWORD)) {\n      if (options.eventHandler) {\n        _handleEvent({\n          event: {\n            type: ['JsonLdEvent'],\n            code: 'reserved @id value',\n            level: 'warning',\n            message: '@id values beginning with \"@\" are ' + 'reserved for future use and dropped.',\n            details: {\n              id\n            }\n          },\n          options\n        });\n      }\n      if (previousMapping) {\n        activeCtx.mappings.set(term, previousMapping);\n      } else {\n        activeCtx.mappings.delete(term);\n      }\n      return;\n    } else if (id !== term) {\n      // expand and add @id mapping\n      id = _expandIri(activeCtx, id, {\n        vocab: true,\n        base: false\n      }, localCtx, defined, options);\n      if (!_isAbsoluteIri(id) && !api.isKeyword(id)) {\n        throw new JsonLdError('Invalid JSON-LD syntax; a @context @id value must be an ' + 'absolute IRI, a blank node identifier, or a keyword.', 'jsonld.SyntaxError', {\n          code: 'invalid IRI mapping',\n          context: localCtx\n        });\n      }\n\n      // if term has the form of an IRI it must map the same\n      if (term.match(/(?::[^:])|\\//)) {\n        const termDefined = new Map(defined).set(term, true);\n        const termIri = _expandIri(activeCtx, term, {\n          vocab: true,\n          base: false\n        }, localCtx, termDefined, options);\n        if (termIri !== id) {\n          throw new JsonLdError('Invalid JSON-LD syntax; term in form of IRI must ' + 'expand to definition.', 'jsonld.SyntaxError', {\n            code: 'invalid IRI mapping',\n            context: localCtx\n          });\n        }\n      }\n      mapping['@id'] = id;\n      // indicate if this term may be used as a compact IRI prefix\n      mapping._prefix = simpleTerm && !mapping._termHasColon && id.match(/[:\\/\\?#\\[\\]@]$/);\n    }\n  }\n  if (!('@id' in mapping)) {\n    // see if the term has a prefix\n    if (mapping._termHasColon) {\n      const prefix = term.substr(0, colon);\n      if (localCtx.hasOwnProperty(prefix)) {\n        // define parent prefix\n        api.createTermDefinition({\n          activeCtx,\n          localCtx,\n          term: prefix,\n          defined,\n          options\n        });\n      }\n      if (activeCtx.mappings.has(prefix)) {\n        // set @id based on prefix parent\n        const suffix = term.substr(colon + 1);\n        mapping['@id'] = activeCtx.mappings.get(prefix)['@id'] + suffix;\n      } else {\n        // term is an absolute IRI\n        mapping['@id'] = term;\n      }\n    } else if (term === '@type') {\n      // Special case, were we've previously determined that container is @set\n      mapping['@id'] = term;\n    } else {\n      // non-IRIs *must* define @ids if @vocab is not available\n      if (!('@vocab' in activeCtx)) {\n        throw new JsonLdError('Invalid JSON-LD syntax; @context terms must define an @id.', 'jsonld.SyntaxError', {\n          code: 'invalid IRI mapping',\n          context: localCtx,\n          term\n        });\n      }\n      // prepend vocab to term\n      mapping['@id'] = activeCtx['@vocab'] + term;\n    }\n  }\n\n  // Handle term protection\n  if (value['@protected'] === true || defined.get('@protected') === true && value['@protected'] !== false) {\n    activeCtx.protected[term] = true;\n    mapping.protected = true;\n  }\n\n  // IRI mapping now defined\n  defined.set(term, true);\n  if ('@type' in value) {\n    let type = value['@type'];\n    if (!_isString(type)) {\n      throw new JsonLdError('Invalid JSON-LD syntax; an @context @type value must be a string.', 'jsonld.SyntaxError', {\n        code: 'invalid type mapping',\n        context: localCtx\n      });\n    }\n    if (type === '@json' || type === '@none') {\n      if (api.processingMode(activeCtx, 1.0)) {\n        throw new JsonLdError('Invalid JSON-LD syntax; an @context @type value must not be ' + `\"${type}\" in JSON-LD 1.0 mode.`, 'jsonld.SyntaxError', {\n          code: 'invalid type mapping',\n          context: localCtx\n        });\n      }\n    } else if (type !== '@id' && type !== '@vocab') {\n      // expand @type to full IRI\n      type = _expandIri(activeCtx, type, {\n        vocab: true,\n        base: false\n      }, localCtx, defined, options);\n      if (!_isAbsoluteIri(type)) {\n        throw new JsonLdError('Invalid JSON-LD syntax; an @context @type value must be an ' + 'absolute IRI.', 'jsonld.SyntaxError', {\n          code: 'invalid type mapping',\n          context: localCtx\n        });\n      }\n      if (type.indexOf('_:') === 0) {\n        throw new JsonLdError('Invalid JSON-LD syntax; an @context @type value must be an IRI, ' + 'not a blank node identifier.', 'jsonld.SyntaxError', {\n          code: 'invalid type mapping',\n          context: localCtx\n        });\n      }\n    }\n\n    // add @type to mapping\n    mapping['@type'] = type;\n  }\n  if ('@container' in value) {\n    // normalize container to an array form\n    const container = _isString(value['@container']) ? [value['@container']] : value['@container'] || [];\n    const validContainers = ['@list', '@set', '@index', '@language'];\n    let isValid = true;\n    const hasSet = container.includes('@set');\n\n    // JSON-LD 1.1 support\n    if (api.processingMode(activeCtx, 1.1)) {\n      validContainers.push('@graph', '@id', '@type');\n\n      // check container length\n      if (container.includes('@list')) {\n        if (container.length !== 1) {\n          throw new JsonLdError('Invalid JSON-LD syntax; @context @container with @list must ' + 'have no other values', 'jsonld.SyntaxError', {\n            code: 'invalid container mapping',\n            context: localCtx\n          });\n        }\n      } else if (container.includes('@graph')) {\n        if (container.some(key => key !== '@graph' && key !== '@id' && key !== '@index' && key !== '@set')) {\n          throw new JsonLdError('Invalid JSON-LD syntax; @context @container with @graph must ' + 'have no other values other than @id, @index, and @set', 'jsonld.SyntaxError', {\n            code: 'invalid container mapping',\n            context: localCtx\n          });\n        }\n      } else {\n        // otherwise, container may also include @set\n        isValid &= container.length <= (hasSet ? 2 : 1);\n      }\n      if (container.includes('@type')) {\n        // If mapping does not have an @type,\n        // set it to @id\n        mapping['@type'] = mapping['@type'] || '@id';\n\n        // type mapping must be either @id or @vocab\n        if (!['@id', '@vocab'].includes(mapping['@type'])) {\n          throw new JsonLdError('Invalid JSON-LD syntax; container: @type requires @type to be ' + '@id or @vocab.', 'jsonld.SyntaxError', {\n            code: 'invalid type mapping',\n            context: localCtx\n          });\n        }\n      }\n    } else {\n      // in JSON-LD 1.0, container must not be an array (it must be a string,\n      // which is one of the validContainers)\n      isValid &= !_isArray(value['@container']);\n\n      // check container length\n      isValid &= container.length <= 1;\n    }\n\n    // check against valid containers\n    isValid &= container.every(c => validContainers.includes(c));\n\n    // @set not allowed with @list\n    isValid &= !(hasSet && container.includes('@list'));\n    if (!isValid) {\n      throw new JsonLdError('Invalid JSON-LD syntax; @context @container value must be ' + 'one of the following: ' + validContainers.join(', '), 'jsonld.SyntaxError', {\n        code: 'invalid container mapping',\n        context: localCtx\n      });\n    }\n    if (mapping.reverse && !container.every(c => ['@index', '@set'].includes(c))) {\n      throw new JsonLdError('Invalid JSON-LD syntax; @context @container value for a @reverse ' + 'type definition must be @index or @set.', 'jsonld.SyntaxError', {\n        code: 'invalid reverse property',\n        context: localCtx\n      });\n    }\n\n    // add @container to mapping\n    mapping['@container'] = container;\n  }\n\n  // property indexing\n  if ('@index' in value) {\n    if (!('@container' in value) || !mapping['@container'].includes('@index')) {\n      throw new JsonLdError('Invalid JSON-LD syntax; @index without @index in @container: ' + `\"${value['@index']}\" on term \"${term}\".`, 'jsonld.SyntaxError', {\n        code: 'invalid term definition',\n        context: localCtx\n      });\n    }\n    if (!_isString(value['@index']) || value['@index'].indexOf('@') === 0) {\n      throw new JsonLdError('Invalid JSON-LD syntax; @index must expand to an IRI: ' + `\"${value['@index']}\" on term \"${term}\".`, 'jsonld.SyntaxError', {\n        code: 'invalid term definition',\n        context: localCtx\n      });\n    }\n    mapping['@index'] = value['@index'];\n  }\n\n  // scoped contexts\n  if ('@context' in value) {\n    mapping['@context'] = value['@context'];\n  }\n  if ('@language' in value && !('@type' in value)) {\n    let language = value['@language'];\n    if (language !== null && !_isString(language)) {\n      throw new JsonLdError('Invalid JSON-LD syntax; @context @language value must be ' + 'a string or null.', 'jsonld.SyntaxError', {\n        code: 'invalid language mapping',\n        context: localCtx\n      });\n    }\n\n    // add @language to mapping\n    if (language !== null) {\n      language = language.toLowerCase();\n    }\n    mapping['@language'] = language;\n  }\n\n  // term may be used as a prefix\n  if ('@prefix' in value) {\n    if (term.match(/:|\\//)) {\n      throw new JsonLdError('Invalid JSON-LD syntax; @context @prefix used on a compact IRI term', 'jsonld.SyntaxError', {\n        code: 'invalid term definition',\n        context: localCtx\n      });\n    }\n    if (api.isKeyword(mapping['@id'])) {\n      throw new JsonLdError('Invalid JSON-LD syntax; keywords may not be used as prefixes', 'jsonld.SyntaxError', {\n        code: 'invalid term definition',\n        context: localCtx\n      });\n    }\n    if (typeof value['@prefix'] === 'boolean') {\n      mapping._prefix = value['@prefix'] === true;\n    } else {\n      throw new JsonLdError('Invalid JSON-LD syntax; @context value for @prefix must be boolean', 'jsonld.SyntaxError', {\n        code: 'invalid @prefix value',\n        context: localCtx\n      });\n    }\n  }\n  if ('@direction' in value) {\n    const direction = value['@direction'];\n    if (direction !== null && direction !== 'ltr' && direction !== 'rtl') {\n      throw new JsonLdError('Invalid JSON-LD syntax; @direction value must be ' + 'null, \"ltr\", or \"rtl\".', 'jsonld.SyntaxError', {\n        code: 'invalid base direction',\n        context: localCtx\n      });\n    }\n    mapping['@direction'] = direction;\n  }\n  if ('@nest' in value) {\n    const nest = value['@nest'];\n    if (!_isString(nest) || nest !== '@nest' && nest.indexOf('@') === 0) {\n      throw new JsonLdError('Invalid JSON-LD syntax; @context @nest value must be ' + 'a string which is not a keyword other than @nest.', 'jsonld.SyntaxError', {\n        code: 'invalid @nest value',\n        context: localCtx\n      });\n    }\n    mapping['@nest'] = nest;\n  }\n\n  // disallow aliasing @context and @preserve\n  const id = mapping['@id'];\n  if (id === '@context' || id === '@preserve') {\n    throw new JsonLdError('Invalid JSON-LD syntax; @context and @preserve cannot be aliased.', 'jsonld.SyntaxError', {\n      code: 'invalid keyword alias',\n      context: localCtx\n    });\n  }\n\n  // Check for overriding protected terms\n  if (previousMapping && previousMapping.protected && !overrideProtected) {\n    // force new term to continue to be protected and see if the mappings would\n    // be equal\n    activeCtx.protected[term] = true;\n    mapping.protected = true;\n    if (!_deepCompare(previousMapping, mapping)) {\n      throw new JsonLdError('Invalid JSON-LD syntax; tried to redefine a protected term.', 'jsonld.SyntaxError', {\n        code: 'protected term redefinition',\n        context: localCtx,\n        term\n      });\n    }\n  }\n};\n\n/**\n * Expands a string to a full IRI. The string may be a term, a prefix, a\n * relative IRI, or an absolute IRI. The associated absolute IRI will be\n * returned.\n *\n * @param activeCtx the current active context.\n * @param value the string to expand.\n * @param relativeTo options for how to resolve relative IRIs:\n *          base: true to resolve against the base IRI, false not to.\n *          vocab: true to concatenate after @vocab, false not to.\n * @param {Object} [options] - processing options.\n *\n * @return the expanded value.\n */\napi.expandIri = (activeCtx, value, relativeTo, options) => {\n  return _expandIri(activeCtx, value, relativeTo, undefined, undefined, options);\n};\n\n/**\n * Expands a string to a full IRI. The string may be a term, a prefix, a\n * relative IRI, or an absolute IRI. The associated absolute IRI will be\n * returned.\n *\n * @param activeCtx the current active context.\n * @param value the string to expand.\n * @param relativeTo options for how to resolve relative IRIs:\n *          base: true to resolve against the base IRI, false not to.\n *          vocab: true to concatenate after @vocab, false not to.\n * @param localCtx the local context being processed (only given if called\n *          during context processing).\n * @param defined a map for tracking cycles in context definitions (only given\n *          if called during context processing).\n * @param {Object} [options] - processing options.\n *\n * @return the expanded value.\n */\nfunction _expandIri(activeCtx, value, relativeTo, localCtx, defined, options) {\n  // already expanded\n  if (value === null || !_isString(value) || api.isKeyword(value)) {\n    return value;\n  }\n\n  // ignore non-keyword things that look like a keyword\n  if (value.match(REGEX_KEYWORD)) {\n    return null;\n  }\n\n  // define term dependency if not defined\n  if (localCtx && localCtx.hasOwnProperty(value) && defined.get(value) !== true) {\n    api.createTermDefinition({\n      activeCtx,\n      localCtx,\n      term: value,\n      defined,\n      options\n    });\n  }\n  relativeTo = relativeTo || {};\n  if (relativeTo.vocab) {\n    const mapping = activeCtx.mappings.get(value);\n\n    // value is explicitly ignored with a null mapping\n    if (mapping === null) {\n      return null;\n    }\n    if (_isObject(mapping) && '@id' in mapping) {\n      // value is a term\n      return mapping['@id'];\n    }\n  }\n\n  // split value into prefix:suffix\n  const colon = value.indexOf(':');\n  if (colon > 0) {\n    const prefix = value.substr(0, colon);\n    const suffix = value.substr(colon + 1);\n\n    // do not expand blank nodes (prefix of '_') or already-absolute\n    // IRIs (suffix of '//')\n    if (prefix === '_' || suffix.indexOf('//') === 0) {\n      return value;\n    }\n\n    // prefix dependency not defined, define it\n    if (localCtx && localCtx.hasOwnProperty(prefix)) {\n      api.createTermDefinition({\n        activeCtx,\n        localCtx,\n        term: prefix,\n        defined,\n        options\n      });\n    }\n\n    // use mapping if prefix is defined\n    const mapping = activeCtx.mappings.get(prefix);\n    if (mapping && mapping._prefix) {\n      return mapping['@id'] + suffix;\n    }\n\n    // already absolute IRI\n    if (_isAbsoluteIri(value)) {\n      return value;\n    }\n  }\n\n  // A flag that captures whether the iri being expanded is\n  // the value for an @type\n  //let typeExpansion = false;\n\n  //if(options !== undefined && options.typeExpansion !== undefined) {\n  //  typeExpansion = options.typeExpansion;\n  //}\n\n  if (relativeTo.vocab && '@vocab' in activeCtx) {\n    // prepend vocab\n    const prependedResult = activeCtx['@vocab'] + value;\n    // FIXME: needed? may be better as debug event.\n    /*\n    if(options && options.eventHandler) {\n      _handleEvent({\n        event: {\n          type: ['JsonLdEvent'],\n          code: 'prepending @vocab during expansion',\n          level: 'info',\n          message: 'Prepending @vocab during expansion.',\n          details: {\n            type: '@vocab',\n            vocab: activeCtx['@vocab'],\n            value,\n            result: prependedResult,\n            typeExpansion\n          }\n        },\n        options\n      });\n    }\n    */\n    // the null case preserves value as potentially relative\n    value = prependedResult;\n  } else if (relativeTo.base) {\n    // prepend base\n    let prependedResult;\n    let base;\n    if ('@base' in activeCtx) {\n      if (activeCtx['@base']) {\n        base = prependBase(options.base, activeCtx['@base']);\n        prependedResult = prependBase(base, value);\n      } else {\n        base = activeCtx['@base'];\n        prependedResult = value;\n      }\n    } else {\n      base = options.base;\n      prependedResult = prependBase(options.base, value);\n    }\n    // FIXME: needed? may be better as debug event.\n    /*\n    if(options && options.eventHandler) {\n      _handleEvent({\n        event: {\n          type: ['JsonLdEvent'],\n          code: 'prepending @base during expansion',\n          level: 'info',\n          message: 'Prepending @base during expansion.',\n          details: {\n            type: '@base',\n            base,\n            value,\n            result: prependedResult,\n            typeExpansion\n          }\n        },\n        options\n      });\n    }\n    */\n    // the null case preserves value as potentially relative\n    value = prependedResult;\n  }\n\n  // FIXME: duplicate? needed? maybe just enable in a verbose debug mode\n  /*\n  if(!_isAbsoluteIri(value) && options && options.eventHandler) {\n    // emit event indicating a relative IRI was found, which can result in it\n    // being dropped when converting to other RDF representations\n    _handleEvent({\n      event: {\n        type: ['JsonLdEvent'],\n        code: 'relative IRI after expansion',\n        // FIXME: what level?\n        level: 'warning',\n        message: 'Relative IRI after expansion.',\n        details: {\n          relativeIri: value,\n          typeExpansion\n        }\n      },\n      options\n    });\n    // NOTE: relative reference events emitted at calling sites as needed\n  }\n  */\n\n  return value;\n}\n\n/**\n * Gets the initial context.\n *\n * @param options the options to use:\n *          [base] the document base IRI.\n *\n * @return the initial context.\n */\napi.getInitialContext = options => {\n  const key = JSON.stringify({\n    processingMode: options.processingMode\n  });\n  const cached = INITIAL_CONTEXT_CACHE.get(key);\n  if (cached) {\n    return cached;\n  }\n  const initialContext = {\n    processingMode: options.processingMode,\n    mappings: new Map(),\n    inverse: null,\n    getInverse: _createInverseContext,\n    clone: _cloneActiveContext,\n    revertToPreviousContext: _revertToPreviousContext,\n    protected: {}\n  };\n  // TODO: consider using LRU cache instead\n  if (INITIAL_CONTEXT_CACHE.size === INITIAL_CONTEXT_CACHE_MAX_SIZE) {\n    // clear whole cache -- assumes scenario where the cache fills means\n    // the cache isn't being used very efficiently anyway\n    INITIAL_CONTEXT_CACHE.clear();\n  }\n  INITIAL_CONTEXT_CACHE.set(key, initialContext);\n  return initialContext;\n\n  /**\n   * Generates an inverse context for use in the compaction algorithm, if\n   * not already generated for the given active context.\n   *\n   * @return the inverse context.\n   */\n  function _createInverseContext() {\n    const activeCtx = this;\n\n    // lazily create inverse\n    if (activeCtx.inverse) {\n      return activeCtx.inverse;\n    }\n    const inverse = activeCtx.inverse = {};\n\n    // variables for building fast CURIE map\n    const fastCurieMap = activeCtx.fastCurieMap = {};\n    const irisToTerms = {};\n\n    // handle default language\n    const defaultLanguage = (activeCtx['@language'] || '@none').toLowerCase();\n\n    // handle default direction\n    const defaultDirection = activeCtx['@direction'];\n\n    // create term selections for each mapping in the context, ordered by\n    // shortest and then lexicographically least\n    const mappings = activeCtx.mappings;\n    const terms = [...mappings.keys()].sort(_compareShortestLeast);\n    for (const term of terms) {\n      const mapping = mappings.get(term);\n      if (mapping === null) {\n        continue;\n      }\n      let container = mapping['@container'] || '@none';\n      container = [].concat(container).sort().join('');\n      if (mapping['@id'] === null) {\n        continue;\n      }\n      // iterate over every IRI in the mapping\n      const ids = _asArray(mapping['@id']);\n      for (const iri of ids) {\n        let entry = inverse[iri];\n        const isKeyword = api.isKeyword(iri);\n        if (!entry) {\n          // initialize entry\n          inverse[iri] = entry = {};\n          if (!isKeyword && !mapping._termHasColon) {\n            // init IRI to term map and fast CURIE prefixes\n            irisToTerms[iri] = [term];\n            const fastCurieEntry = {\n              iri,\n              terms: irisToTerms[iri]\n            };\n            if (iri[0] in fastCurieMap) {\n              fastCurieMap[iri[0]].push(fastCurieEntry);\n            } else {\n              fastCurieMap[iri[0]] = [fastCurieEntry];\n            }\n          }\n        } else if (!isKeyword && !mapping._termHasColon) {\n          // add IRI to term match\n          irisToTerms[iri].push(term);\n        }\n\n        // add new entry\n        if (!entry[container]) {\n          entry[container] = {\n            '@language': {},\n            '@type': {},\n            '@any': {}\n          };\n        }\n        entry = entry[container];\n        _addPreferredTerm(term, entry['@any'], '@none');\n        if (mapping.reverse) {\n          // term is preferred for values using @reverse\n          _addPreferredTerm(term, entry['@type'], '@reverse');\n        } else if (mapping['@type'] === '@none') {\n          _addPreferredTerm(term, entry['@any'], '@none');\n          _addPreferredTerm(term, entry['@language'], '@none');\n          _addPreferredTerm(term, entry['@type'], '@none');\n        } else if ('@type' in mapping) {\n          // term is preferred for values using specific type\n          _addPreferredTerm(term, entry['@type'], mapping['@type']);\n        } else if ('@language' in mapping && '@direction' in mapping) {\n          // term is preferred for values using specific language and direction\n          const language = mapping['@language'];\n          const direction = mapping['@direction'];\n          if (language && direction) {\n            _addPreferredTerm(term, entry['@language'], `${language}_${direction}`.toLowerCase());\n          } else if (language) {\n            _addPreferredTerm(term, entry['@language'], language.toLowerCase());\n          } else if (direction) {\n            _addPreferredTerm(term, entry['@language'], `_${direction}`);\n          } else {\n            _addPreferredTerm(term, entry['@language'], '@null');\n          }\n        } else if ('@language' in mapping) {\n          _addPreferredTerm(term, entry['@language'], (mapping['@language'] || '@null').toLowerCase());\n        } else if ('@direction' in mapping) {\n          if (mapping['@direction']) {\n            _addPreferredTerm(term, entry['@language'], `_${mapping['@direction']}`);\n          } else {\n            _addPreferredTerm(term, entry['@language'], '@none');\n          }\n        } else if (defaultDirection) {\n          _addPreferredTerm(term, entry['@language'], `_${defaultDirection}`);\n          _addPreferredTerm(term, entry['@language'], '@none');\n          _addPreferredTerm(term, entry['@type'], '@none');\n        } else {\n          // add entries for no type and no language\n          _addPreferredTerm(term, entry['@language'], defaultLanguage);\n          _addPreferredTerm(term, entry['@language'], '@none');\n          _addPreferredTerm(term, entry['@type'], '@none');\n        }\n      }\n    }\n\n    // build fast CURIE map\n    for (const key in fastCurieMap) {\n      _buildIriMap(fastCurieMap, key, 1);\n    }\n    return inverse;\n  }\n\n  /**\n   * Runs a recursive algorithm to build a lookup map for quickly finding\n   * potential CURIEs.\n   *\n   * @param iriMap the map to build.\n   * @param key the current key in the map to work on.\n   * @param idx the index into the IRI to compare.\n   */\n  function _buildIriMap(iriMap, key, idx) {\n    const entries = iriMap[key];\n    const next = iriMap[key] = {};\n    let iri;\n    let letter;\n    for (const entry of entries) {\n      iri = entry.iri;\n      if (idx >= iri.length) {\n        letter = '';\n      } else {\n        letter = iri[idx];\n      }\n      if (letter in next) {\n        next[letter].push(entry);\n      } else {\n        next[letter] = [entry];\n      }\n    }\n    for (const key in next) {\n      if (key === '') {\n        continue;\n      }\n      _buildIriMap(next, key, idx + 1);\n    }\n  }\n\n  /**\n   * Adds the term for the given entry if not already added.\n   *\n   * @param term the term to add.\n   * @param entry the inverse context typeOrLanguage entry to add to.\n   * @param typeOrLanguageValue the key in the entry to add to.\n   */\n  function _addPreferredTerm(term, entry, typeOrLanguageValue) {\n    if (!entry.hasOwnProperty(typeOrLanguageValue)) {\n      entry[typeOrLanguageValue] = term;\n    }\n  }\n\n  /**\n   * Clones an active context, creating a child active context.\n   *\n   * @return a clone (child) of the active context.\n   */\n  function _cloneActiveContext() {\n    const child = {};\n    child.mappings = util.clone(this.mappings);\n    child.clone = this.clone;\n    child.inverse = null;\n    child.getInverse = this.getInverse;\n    child.protected = util.clone(this.protected);\n    if (this.previousContext) {\n      child.previousContext = this.previousContext.clone();\n    }\n    child.revertToPreviousContext = this.revertToPreviousContext;\n    if ('@base' in this) {\n      child['@base'] = this['@base'];\n    }\n    if ('@language' in this) {\n      child['@language'] = this['@language'];\n    }\n    if ('@vocab' in this) {\n      child['@vocab'] = this['@vocab'];\n    }\n    return child;\n  }\n\n  /**\n   * Reverts any type-scoped context in this active context to the previous\n   * context.\n   */\n  function _revertToPreviousContext() {\n    if (!this.previousContext) {\n      return this;\n    }\n    return this.previousContext.clone();\n  }\n};\n\n/**\n * Gets the value for the given active context key and type, null if none is\n * set or undefined if none is set and type is '@context'.\n *\n * @param ctx the active context.\n * @param key the context key.\n * @param [type] the type of value to get (eg: '@id', '@type'), if not\n *          specified gets the entire entry for a key, null if not found.\n *\n * @return the value, null, or undefined.\n */\napi.getContextValue = (ctx, key, type) => {\n  // invalid key\n  if (key === null) {\n    if (type === '@context') {\n      return undefined;\n    }\n    return null;\n  }\n\n  // get specific entry information\n  if (ctx.mappings.has(key)) {\n    const entry = ctx.mappings.get(key);\n    if (_isUndefined(type)) {\n      // return whole entry\n      return entry;\n    }\n    if (entry.hasOwnProperty(type)) {\n      // return entry value for type\n      return entry[type];\n    }\n  }\n\n  // get default language\n  if (type === '@language' && type in ctx) {\n    return ctx[type];\n  }\n\n  // get default direction\n  if (type === '@direction' && type in ctx) {\n    return ctx[type];\n  }\n  if (type === '@context') {\n    return undefined;\n  }\n  return null;\n};\n\n/**\n * Processing Mode check.\n *\n * @param activeCtx the current active context.\n * @param version the string or numeric version to check.\n *\n * @return boolean.\n */\napi.processingMode = (activeCtx, version) => {\n  if (version.toString() >= '1.1') {\n    return !activeCtx.processingMode || activeCtx.processingMode >= 'json-ld-' + version.toString();\n  } else {\n    return activeCtx.processingMode === 'json-ld-1.0';\n  }\n};\n\n/**\n * Returns whether or not the given value is a keyword.\n *\n * @param v the value to check.\n *\n * @return true if the value is a keyword, false if not.\n */\napi.isKeyword = v => {\n  if (!_isString(v) || v[0] !== '@') {\n    return false;\n  }\n  switch (v) {\n    case '@base':\n    case '@container':\n    case '@context':\n    case '@default':\n    case '@direction':\n    case '@embed':\n    case '@explicit':\n    case '@graph':\n    case '@id':\n    case '@included':\n    case '@index':\n    case '@json':\n    case '@language':\n    case '@list':\n    case '@nest':\n    case '@none':\n    case '@omitDefault':\n    case '@prefix':\n    case '@preserve':\n    case '@protected':\n    case '@requireAll':\n    case '@reverse':\n    case '@set':\n    case '@type':\n    case '@value':\n    case '@version':\n    case '@vocab':\n      return true;\n  }\n  return false;\n};\nfunction _deepCompare(x1, x2) {\n  // compare `null` or primitive types directly\n  if (!(x1 && typeof x1 === 'object') || !(x2 && typeof x2 === 'object')) {\n    return x1 === x2;\n  }\n  // x1 and x2 are objects (also potentially arrays)\n  const x1Array = Array.isArray(x1);\n  if (x1Array !== Array.isArray(x2)) {\n    return false;\n  }\n  if (x1Array) {\n    if (x1.length !== x2.length) {\n      return false;\n    }\n    for (let i = 0; i < x1.length; ++i) {\n      if (!_deepCompare(x1[i], x2[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  // x1 and x2 are non-array objects\n  const k1s = Object.keys(x1);\n  const k2s = Object.keys(x2);\n  if (k1s.length !== k2s.length) {\n    return false;\n  }\n  for (const k1 in x1) {\n    let v1 = x1[k1];\n    let v2 = x2[k1];\n    // special case: `@container` can be in any order\n    if (k1 === '@container') {\n      if (Array.isArray(v1) && Array.isArray(v2)) {\n        v1 = v1.slice().sort();\n        v2 = v2.slice().sort();\n      }\n    }\n    if (!_deepCompare(v1, v2)) {\n      return false;\n    }\n  }\n  return true;\n}","map":{"version":3,"names":["util","require","JsonLdError","isArray","_isArray","isObject","_isObject","isString","_isString","isUndefined","_isUndefined","isAbsolute","_isAbsoluteIri","isRelative","_isRelativeIri","prependBase","handleEvent","_handleEvent","REGEX_BCP47","REGEX_KEYWORD","asArray","_asArray","compareShortestLeast","_compareShortestLeast","INITIAL_CONTEXT_CACHE","Map","INITIAL_CONTEXT_CACHE_MAX_SIZE","api","module","exports","process","activeCtx","localCtx","options","propagate","overrideProtected","cycles","Set","ctxs","length","events","eventCaptureHandler","event","next","push","eventHandler","originalOptions","resolved","contextResolver","resolve","context","documentLoader","base","document","rval","previousContext","clone","resolvedContext","ctx","Object","keys","protected","code","getInitialContext","processed","getProcessed","defined","processingMode","set","value","vocab","_expandIri","undefined","type","level","message","details","match","language","toLowerCase","resolvedImport","processedImport","importCtx","key","hasOwnProperty","setProcessed","createTermDefinition","term","keyCtx","url","has","add","e","get","validKeys","some","k","includes","isKeyword","previousMapping","mappings","delete","simpleTerm","mapping","reverse","kw","colon","indexOf","_termHasColon","id","termDefined","termIri","_prefix","prefix","substr","suffix","container","validContainers","isValid","hasSet","every","c","join","direction","nest","_deepCompare","expandIri","relativeTo","prependedResult","JSON","stringify","cached","initialContext","inverse","getInverse","_createInverseContext","_cloneActiveContext","revertToPreviousContext","_revertToPreviousContext","size","clear","fastCurieMap","irisToTerms","defaultLanguage","defaultDirection","terms","sort","concat","ids","iri","entry","fastCurieEntry","_addPreferredTerm","_buildIriMap","iriMap","idx","entries","letter","typeOrLanguageValue","child","getContextValue","version","toString","v","x1","x2","x1Array","Array","i","k1s","k2s","k1","v1","v2","slice"],"sources":["C:/Users/kevin/Desktop/EGS data/Egs-Ladder-Front/EGS-ladder-front/node_modules/jsonld/lib/context.js"],"sourcesContent":["/*\n * Copyright (c) 2017-2019 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst util = require('./util');\nconst JsonLdError = require('./JsonLdError');\n\nconst {\n  isArray: _isArray,\n  isObject: _isObject,\n  isString: _isString,\n  isUndefined: _isUndefined\n} = require('./types');\n\nconst {\n  isAbsolute: _isAbsoluteIri,\n  isRelative: _isRelativeIri,\n  prependBase\n} = require('./url');\n\nconst {\n  handleEvent: _handleEvent\n} = require('./events');\n\nconst {\n  REGEX_BCP47,\n  REGEX_KEYWORD,\n  asArray: _asArray,\n  compareShortestLeast: _compareShortestLeast\n} = require('./util');\n\nconst INITIAL_CONTEXT_CACHE = new Map();\nconst INITIAL_CONTEXT_CACHE_MAX_SIZE = 10000;\n\nconst api = {};\nmodule.exports = api;\n\n/**\n * Processes a local context and returns a new active context.\n *\n * @param activeCtx the current active context.\n * @param localCtx the local context to process.\n * @param options the context processing options.\n * @param propagate `true` if `false`, retains any previously defined term,\n *   which can be rolled back when the descending into a new node object.\n * @param overrideProtected `false` allows protected terms to be modified.\n *\n * @return a Promise that resolves to the new active context.\n */\napi.process = async ({\n  activeCtx, localCtx, options,\n  propagate = true,\n  overrideProtected = false,\n  cycles = new Set()\n}) => {\n  // normalize local context to an array of @context objects\n  if(_isObject(localCtx) && '@context' in localCtx &&\n    _isArray(localCtx['@context'])) {\n    localCtx = localCtx['@context'];\n  }\n  const ctxs = _asArray(localCtx);\n\n  // no contexts in array, return current active context w/o changes\n  if(ctxs.length === 0) {\n    return activeCtx;\n  }\n\n  // event handler for capturing events to replay when using a cached context\n  const events = [];\n  const eventCaptureHandler = [\n    ({event, next}) => {\n      events.push(event);\n      next();\n    }\n  ];\n  // chain to original handler\n  if(options.eventHandler) {\n    eventCaptureHandler.push(options.eventHandler);\n  }\n  // store original options to use when replaying events\n  const originalOptions = options;\n  // shallow clone options with event capture handler\n  options = {...options, eventHandler: eventCaptureHandler};\n\n  // resolve contexts\n  const resolved = await options.contextResolver.resolve({\n    activeCtx,\n    context: localCtx,\n    documentLoader: options.documentLoader,\n    base: options.base\n  });\n\n  // override propagate if first resolved context has `@propagate`\n  if(_isObject(resolved[0].document) &&\n    typeof resolved[0].document['@propagate'] === 'boolean') {\n    // retrieve early, error checking done later\n    propagate = resolved[0].document['@propagate'];\n  }\n\n  // process each context in order, update active context\n  // on each iteration to ensure proper caching\n  let rval = activeCtx;\n\n  // track the previous context\n  // if not propagating, make sure rval has a previous context\n  if(!propagate && !rval.previousContext) {\n    // clone `rval` context before updating\n    rval = rval.clone();\n    rval.previousContext = activeCtx;\n  }\n\n  for(const resolvedContext of resolved) {\n    let {document: ctx} = resolvedContext;\n\n    // update active context to one computed from last iteration\n    activeCtx = rval;\n\n    // reset to initial context\n    if(ctx === null) {\n      // We can't nullify if there are protected terms and we're\n      // not allowing overrides (e.g. processing a property term scoped context)\n      if(!overrideProtected && Object.keys(activeCtx.protected).length !== 0) {\n        throw new JsonLdError(\n          'Tried to nullify a context with protected terms outside of ' +\n          'a term definition.',\n          'jsonld.SyntaxError',\n          {code: 'invalid context nullification'});\n      }\n      rval = activeCtx = api.getInitialContext(options).clone();\n      continue;\n    }\n\n    // get processed context from cache if available\n    const processed = resolvedContext.getProcessed(activeCtx);\n    if(processed) {\n      if(originalOptions.eventHandler) {\n        // replay events with original non-capturing options\n        for(const event of processed.events) {\n          _handleEvent({event, options: originalOptions});\n        }\n      }\n\n      rval = activeCtx = processed.context;\n      continue;\n    }\n\n    // dereference @context key if present\n    if(_isObject(ctx) && '@context' in ctx) {\n      ctx = ctx['@context'];\n    }\n\n    // context must be an object by now, all URLs retrieved before this call\n    if(!_isObject(ctx)) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; @context must be an object.',\n        'jsonld.SyntaxError', {code: 'invalid local context', context: ctx});\n    }\n\n    // TODO: there is likely a `previousContext` cloning optimization that\n    // could be applied here (no need to copy it under certain conditions)\n\n    // clone context before updating it\n    rval = rval.clone();\n\n    // define context mappings for keys in local context\n    const defined = new Map();\n\n    // handle @version\n    if('@version' in ctx) {\n      if(ctx['@version'] !== 1.1) {\n        throw new JsonLdError(\n          'Unsupported JSON-LD version: ' + ctx['@version'],\n          'jsonld.UnsupportedVersion',\n          {code: 'invalid @version value', context: ctx});\n      }\n      if(activeCtx.processingMode &&\n        activeCtx.processingMode === 'json-ld-1.0') {\n        throw new JsonLdError(\n          '@version: ' + ctx['@version'] + ' not compatible with ' +\n          activeCtx.processingMode,\n          'jsonld.ProcessingModeConflict',\n          {code: 'processing mode conflict', context: ctx});\n      }\n      rval.processingMode = 'json-ld-1.1';\n      rval['@version'] = ctx['@version'];\n      defined.set('@version', true);\n    }\n\n    // if not set explicitly, set processingMode to \"json-ld-1.1\"\n    rval.processingMode =\n      rval.processingMode || activeCtx.processingMode;\n\n    // handle @base\n    if('@base' in ctx) {\n      let base = ctx['@base'];\n\n      if(base === null || _isAbsoluteIri(base)) {\n        // no action\n      } else if(_isRelativeIri(base)) {\n        base = prependBase(rval['@base'], base);\n      } else {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; the value of \"@base\" in a ' +\n          '@context must be an absolute IRI, a relative IRI, or null.',\n          'jsonld.SyntaxError', {code: 'invalid base IRI', context: ctx});\n      }\n\n      rval['@base'] = base;\n      defined.set('@base', true);\n    }\n\n    // handle @vocab\n    if('@vocab' in ctx) {\n      const value = ctx['@vocab'];\n      if(value === null) {\n        delete rval['@vocab'];\n      } else if(!_isString(value)) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; the value of \"@vocab\" in a ' +\n          '@context must be a string or null.',\n          'jsonld.SyntaxError', {code: 'invalid vocab mapping', context: ctx});\n      } else if(!_isAbsoluteIri(value) && api.processingMode(rval, 1.0)) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; the value of \"@vocab\" in a ' +\n          '@context must be an absolute IRI.',\n          'jsonld.SyntaxError', {code: 'invalid vocab mapping', context: ctx});\n      } else {\n        const vocab = _expandIri(rval, value, {vocab: true, base: true},\n          undefined, undefined, options);\n        if(!_isAbsoluteIri(vocab)) {\n          if(options.eventHandler) {\n            _handleEvent({\n              event: {\n                type: ['JsonLdEvent'],\n                code: 'relative @vocab reference',\n                level: 'warning',\n                message: 'Relative @vocab reference found.',\n                details: {\n                  vocab\n                }\n              },\n              options\n            });\n          }\n        }\n        rval['@vocab'] = vocab;\n      }\n      defined.set('@vocab', true);\n    }\n\n    // handle @language\n    if('@language' in ctx) {\n      const value = ctx['@language'];\n      if(value === null) {\n        delete rval['@language'];\n      } else if(!_isString(value)) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; the value of \"@language\" in a ' +\n          '@context must be a string or null.',\n          'jsonld.SyntaxError',\n          {code: 'invalid default language', context: ctx});\n      } else {\n        if(!value.match(REGEX_BCP47)) {\n          if(options.eventHandler) {\n            _handleEvent({\n              event: {\n                type: ['JsonLdEvent'],\n                code: 'invalid @language value',\n                level: 'warning',\n                message: '@language value must be valid BCP47.',\n                details: {\n                  language: value\n                }\n              },\n              options\n            });\n          }\n        }\n        rval['@language'] = value.toLowerCase();\n      }\n      defined.set('@language', true);\n    }\n\n    // handle @direction\n    if('@direction' in ctx) {\n      const value = ctx['@direction'];\n      if(activeCtx.processingMode === 'json-ld-1.0') {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; @direction not compatible with ' +\n          activeCtx.processingMode,\n          'jsonld.SyntaxError',\n          {code: 'invalid context member', context: ctx});\n      }\n      if(value === null) {\n        delete rval['@direction'];\n      } else if(value !== 'ltr' && value !== 'rtl') {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; the value of \"@direction\" in a ' +\n          '@context must be null, \"ltr\", or \"rtl\".',\n          'jsonld.SyntaxError',\n          {code: 'invalid base direction', context: ctx});\n      } else {\n        rval['@direction'] = value;\n      }\n      defined.set('@direction', true);\n    }\n\n    // handle @propagate\n    // note: we've already extracted it, here we just do error checking\n    if('@propagate' in ctx) {\n      const value = ctx['@propagate'];\n      if(activeCtx.processingMode === 'json-ld-1.0') {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; @propagate not compatible with ' +\n          activeCtx.processingMode,\n          'jsonld.SyntaxError',\n          {code: 'invalid context entry', context: ctx});\n      }\n      if(typeof value !== 'boolean') {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; @propagate value must be a boolean.',\n          'jsonld.SyntaxError',\n          {code: 'invalid @propagate value', context: localCtx});\n      }\n      defined.set('@propagate', true);\n    }\n\n    // handle @import\n    if('@import' in ctx) {\n      const value = ctx['@import'];\n      if(activeCtx.processingMode === 'json-ld-1.0') {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; @import not compatible with ' +\n          activeCtx.processingMode,\n          'jsonld.SyntaxError',\n          {code: 'invalid context entry', context: ctx});\n      }\n      if(!_isString(value)) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; @import must be a string.',\n          'jsonld.SyntaxError',\n          {code: 'invalid @import value', context: localCtx});\n      }\n\n      // resolve contexts\n      const resolvedImport = await options.contextResolver.resolve({\n        activeCtx,\n        context: value,\n        documentLoader: options.documentLoader,\n        base: options.base\n      });\n      if(resolvedImport.length !== 1) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; @import must reference a single context.',\n          'jsonld.SyntaxError',\n          {code: 'invalid remote context', context: localCtx});\n      }\n      const processedImport = resolvedImport[0].getProcessed(activeCtx);\n      if(processedImport) {\n        // Note: if the same context were used in this active context\n        // as a reference context, then processed_input might not\n        // be a dict.\n        ctx = processedImport;\n      } else {\n        const importCtx = resolvedImport[0].document;\n        if('@import' in importCtx) {\n          throw new JsonLdError(\n            'Invalid JSON-LD syntax: ' +\n            'imported context must not include @import.',\n            'jsonld.SyntaxError',\n            {code: 'invalid context entry', context: localCtx});\n        }\n\n        // merge ctx into importCtx and replace rval with the result\n        for(const key in importCtx) {\n          if(!ctx.hasOwnProperty(key)) {\n            ctx[key] = importCtx[key];\n          }\n        }\n\n        // Note: this could potenially conflict if the import\n        // were used in the same active context as a referenced\n        // context and an import. In this case, we\n        // could override the cached result, but seems unlikely.\n        resolvedImport[0].setProcessed(activeCtx, ctx);\n      }\n\n      defined.set('@import', true);\n    }\n\n    // handle @protected; determine whether this sub-context is declaring\n    // all its terms to be \"protected\" (exceptions can be made on a\n    // per-definition basis)\n    defined.set('@protected', ctx['@protected'] || false);\n\n    // process all other keys\n    for(const key in ctx) {\n      api.createTermDefinition({\n        activeCtx: rval,\n        localCtx: ctx,\n        term: key,\n        defined,\n        options,\n        overrideProtected\n      });\n\n      if(_isObject(ctx[key]) && '@context' in ctx[key]) {\n        const keyCtx = ctx[key]['@context'];\n        let process = true;\n        if(_isString(keyCtx)) {\n          const url = prependBase(options.base, keyCtx);\n          // track processed contexts to avoid scoped context recursion\n          if(cycles.has(url)) {\n            process = false;\n          } else {\n            cycles.add(url);\n          }\n        }\n        // parse context to validate\n        if(process) {\n          try {\n            await api.process({\n              activeCtx: rval.clone(),\n              localCtx: ctx[key]['@context'],\n              overrideProtected: true,\n              options,\n              cycles\n            });\n          } catch(e) {\n            throw new JsonLdError(\n              'Invalid JSON-LD syntax; invalid scoped context.',\n              'jsonld.SyntaxError',\n              {\n                code: 'invalid scoped context',\n                context: ctx[key]['@context'],\n                term: key\n              });\n          }\n        }\n      }\n    }\n\n    // cache processed result\n    resolvedContext.setProcessed(activeCtx, {\n      context: rval,\n      events\n    });\n  }\n\n  return rval;\n};\n\n/**\n * Creates a term definition during context processing.\n *\n * @param activeCtx the current active context.\n * @param localCtx the local context being processed.\n * @param term the term in the local context to define the mapping for.\n * @param defined a map of defining/defined keys to detect cycles and prevent\n *          double definitions.\n * @param {Object} [options] - creation options.\n * @param overrideProtected `false` allows protected terms to be modified.\n */\napi.createTermDefinition = ({\n  activeCtx,\n  localCtx,\n  term,\n  defined,\n  options,\n  overrideProtected = false,\n}) => {\n  if(defined.has(term)) {\n    // term already defined\n    if(defined.get(term)) {\n      return;\n    }\n    // cycle detected\n    throw new JsonLdError(\n      'Cyclical context definition detected.',\n      'jsonld.CyclicalContext',\n      {code: 'cyclic IRI mapping', context: localCtx, term});\n  }\n\n  // now defining term\n  defined.set(term, false);\n\n  // get context term value\n  let value;\n  if(localCtx.hasOwnProperty(term)) {\n    value = localCtx[term];\n  }\n\n  if(term === '@type' &&\n     _isObject(value) &&\n     (value['@container'] || '@set') === '@set' &&\n     api.processingMode(activeCtx, 1.1)) {\n\n    const validKeys = ['@container', '@id', '@protected'];\n    const keys = Object.keys(value);\n    if(keys.length === 0 || keys.some(k => !validKeys.includes(k))) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; keywords cannot be overridden.',\n        'jsonld.SyntaxError',\n        {code: 'keyword redefinition', context: localCtx, term});\n    }\n  } else if(api.isKeyword(term)) {\n    throw new JsonLdError(\n      'Invalid JSON-LD syntax; keywords cannot be overridden.',\n      'jsonld.SyntaxError',\n      {code: 'keyword redefinition', context: localCtx, term});\n  } else if(term.match(REGEX_KEYWORD)) {\n    if(options.eventHandler) {\n      _handleEvent({\n        event: {\n          type: ['JsonLdEvent'],\n          code: 'reserved term',\n          level: 'warning',\n          message:\n            'Terms beginning with \"@\" are ' +\n            'reserved for future use and dropped.',\n          details: {\n            term\n          }\n        },\n        options\n      });\n    }\n    return;\n  } else if(term === '') {\n    throw new JsonLdError(\n      'Invalid JSON-LD syntax; a term cannot be an empty string.',\n      'jsonld.SyntaxError',\n      {code: 'invalid term definition', context: localCtx});\n  }\n\n  // keep reference to previous mapping for potential `@protected` check\n  const previousMapping = activeCtx.mappings.get(term);\n\n  // remove old mapping\n  if(activeCtx.mappings.has(term)) {\n    activeCtx.mappings.delete(term);\n  }\n\n  // convert short-hand value to object w/@id\n  let simpleTerm = false;\n  if(_isString(value) || value === null) {\n    simpleTerm = true;\n    value = {'@id': value};\n  }\n\n  if(!_isObject(value)) {\n    throw new JsonLdError(\n      'Invalid JSON-LD syntax; @context term values must be ' +\n      'strings or objects.',\n      'jsonld.SyntaxError',\n      {code: 'invalid term definition', context: localCtx});\n  }\n\n  // create new mapping\n  const mapping = {};\n  activeCtx.mappings.set(term, mapping);\n  mapping.reverse = false;\n\n  // make sure term definition only has expected keywords\n  const validKeys = ['@container', '@id', '@language', '@reverse', '@type'];\n\n  // JSON-LD 1.1 support\n  if(api.processingMode(activeCtx, 1.1)) {\n    validKeys.push(\n      '@context', '@direction', '@index', '@nest', '@prefix', '@protected');\n  }\n\n  for(const kw in value) {\n    if(!validKeys.includes(kw)) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; a term definition must not contain ' + kw,\n        'jsonld.SyntaxError',\n        {code: 'invalid term definition', context: localCtx});\n    }\n  }\n\n  // always compute whether term has a colon as an optimization for\n  // _compactIri\n  const colon = term.indexOf(':');\n  mapping._termHasColon = (colon > 0);\n\n  if('@reverse' in value) {\n    if('@id' in value) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; a @reverse term definition must not ' +\n        'contain @id.', 'jsonld.SyntaxError',\n        {code: 'invalid reverse property', context: localCtx});\n    }\n    if('@nest' in value) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; a @reverse term definition must not ' +\n        'contain @nest.', 'jsonld.SyntaxError',\n        {code: 'invalid reverse property', context: localCtx});\n    }\n    const reverse = value['@reverse'];\n    if(!_isString(reverse)) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; a @context @reverse value must be a string.',\n        'jsonld.SyntaxError', {code: 'invalid IRI mapping', context: localCtx});\n    }\n\n    if(reverse.match(REGEX_KEYWORD)) {\n      if(options.eventHandler) {\n        _handleEvent({\n          event: {\n            type: ['JsonLdEvent'],\n            code: 'reserved @reverse value',\n            level: 'warning',\n            message:\n              '@reverse values beginning with \"@\" are ' +\n              'reserved for future use and dropped.',\n            details: {\n              reverse\n            }\n          },\n          options\n        });\n      }\n      if(previousMapping) {\n        activeCtx.mappings.set(term, previousMapping);\n      } else {\n        activeCtx.mappings.delete(term);\n      }\n      return;\n    }\n\n    // expand and add @id mapping\n    const id = _expandIri(\n      activeCtx, reverse, {vocab: true, base: false}, localCtx, defined,\n      options);\n    if(!_isAbsoluteIri(id)) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; a @context @reverse value must be an ' +\n        'absolute IRI or a blank node identifier.',\n        'jsonld.SyntaxError', {code: 'invalid IRI mapping', context: localCtx});\n    }\n\n    mapping['@id'] = id;\n    mapping.reverse = true;\n  } else if('@id' in value) {\n    let id = value['@id'];\n    if(id && !_isString(id)) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; a @context @id value must be an array ' +\n        'of strings or a string.',\n        'jsonld.SyntaxError', {code: 'invalid IRI mapping', context: localCtx});\n    }\n    if(id === null) {\n      // reserve a null term, which may be protected\n      mapping['@id'] = null;\n    } else if(!api.isKeyword(id) && id.match(REGEX_KEYWORD)) {\n      if(options.eventHandler) {\n        _handleEvent({\n          event: {\n            type: ['JsonLdEvent'],\n            code: 'reserved @id value',\n            level: 'warning',\n            message:\n              '@id values beginning with \"@\" are ' +\n              'reserved for future use and dropped.',\n            details: {\n              id\n            }\n          },\n          options\n        });\n      }\n      if(previousMapping) {\n        activeCtx.mappings.set(term, previousMapping);\n      } else {\n        activeCtx.mappings.delete(term);\n      }\n      return;\n    } else if(id !== term) {\n      // expand and add @id mapping\n      id = _expandIri(\n        activeCtx, id, {vocab: true, base: false}, localCtx, defined, options);\n      if(!_isAbsoluteIri(id) && !api.isKeyword(id)) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; a @context @id value must be an ' +\n          'absolute IRI, a blank node identifier, or a keyword.',\n          'jsonld.SyntaxError',\n          {code: 'invalid IRI mapping', context: localCtx});\n      }\n\n      // if term has the form of an IRI it must map the same\n      if(term.match(/(?::[^:])|\\//)) {\n        const termDefined = new Map(defined).set(term, true);\n        const termIri = _expandIri(\n          activeCtx, term, {vocab: true, base: false},\n          localCtx, termDefined, options);\n        if(termIri !== id) {\n          throw new JsonLdError(\n            'Invalid JSON-LD syntax; term in form of IRI must ' +\n            'expand to definition.',\n            'jsonld.SyntaxError',\n            {code: 'invalid IRI mapping', context: localCtx});\n        }\n      }\n\n      mapping['@id'] = id;\n      // indicate if this term may be used as a compact IRI prefix\n      mapping._prefix = (simpleTerm &&\n        !mapping._termHasColon &&\n        id.match(/[:\\/\\?#\\[\\]@]$/));\n    }\n  }\n\n  if(!('@id' in mapping)) {\n    // see if the term has a prefix\n    if(mapping._termHasColon) {\n      const prefix = term.substr(0, colon);\n      if(localCtx.hasOwnProperty(prefix)) {\n        // define parent prefix\n        api.createTermDefinition({\n          activeCtx, localCtx, term: prefix, defined, options\n        });\n      }\n\n      if(activeCtx.mappings.has(prefix)) {\n        // set @id based on prefix parent\n        const suffix = term.substr(colon + 1);\n        mapping['@id'] = activeCtx.mappings.get(prefix)['@id'] + suffix;\n      } else {\n        // term is an absolute IRI\n        mapping['@id'] = term;\n      }\n    } else if(term === '@type') {\n      // Special case, were we've previously determined that container is @set\n      mapping['@id'] = term;\n    } else {\n      // non-IRIs *must* define @ids if @vocab is not available\n      if(!('@vocab' in activeCtx)) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; @context terms must define an @id.',\n          'jsonld.SyntaxError',\n          {code: 'invalid IRI mapping', context: localCtx, term});\n      }\n      // prepend vocab to term\n      mapping['@id'] = activeCtx['@vocab'] + term;\n    }\n  }\n\n  // Handle term protection\n  if(value['@protected'] === true ||\n    (defined.get('@protected') === true && value['@protected'] !== false)) {\n    activeCtx.protected[term] = true;\n    mapping.protected = true;\n  }\n\n  // IRI mapping now defined\n  defined.set(term, true);\n\n  if('@type' in value) {\n    let type = value['@type'];\n    if(!_isString(type)) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; an @context @type value must be a string.',\n        'jsonld.SyntaxError',\n        {code: 'invalid type mapping', context: localCtx});\n    }\n\n    if((type === '@json' || type === '@none')) {\n      if(api.processingMode(activeCtx, 1.0)) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; an @context @type value must not be ' +\n          `\"${type}\" in JSON-LD 1.0 mode.`,\n          'jsonld.SyntaxError',\n          {code: 'invalid type mapping', context: localCtx});\n      }\n    } else if(type !== '@id' && type !== '@vocab') {\n      // expand @type to full IRI\n      type = _expandIri(\n        activeCtx, type, {vocab: true, base: false}, localCtx, defined,\n        options);\n      if(!_isAbsoluteIri(type)) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; an @context @type value must be an ' +\n          'absolute IRI.',\n          'jsonld.SyntaxError',\n          {code: 'invalid type mapping', context: localCtx});\n      }\n      if(type.indexOf('_:') === 0) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; an @context @type value must be an IRI, ' +\n          'not a blank node identifier.',\n          'jsonld.SyntaxError',\n          {code: 'invalid type mapping', context: localCtx});\n      }\n    }\n\n    // add @type to mapping\n    mapping['@type'] = type;\n  }\n\n  if('@container' in value) {\n    // normalize container to an array form\n    const container = _isString(value['@container']) ?\n      [value['@container']] : (value['@container'] || []);\n    const validContainers = ['@list', '@set', '@index', '@language'];\n    let isValid = true;\n    const hasSet = container.includes('@set');\n\n    // JSON-LD 1.1 support\n    if(api.processingMode(activeCtx, 1.1)) {\n      validContainers.push('@graph', '@id', '@type');\n\n      // check container length\n      if(container.includes('@list')) {\n        if(container.length !== 1) {\n          throw new JsonLdError(\n            'Invalid JSON-LD syntax; @context @container with @list must ' +\n            'have no other values',\n            'jsonld.SyntaxError',\n            {code: 'invalid container mapping', context: localCtx});\n        }\n      } else if(container.includes('@graph')) {\n        if(container.some(key =>\n          key !== '@graph' && key !== '@id' && key !== '@index' &&\n          key !== '@set')) {\n          throw new JsonLdError(\n            'Invalid JSON-LD syntax; @context @container with @graph must ' +\n            'have no other values other than @id, @index, and @set',\n            'jsonld.SyntaxError',\n            {code: 'invalid container mapping', context: localCtx});\n        }\n      } else {\n        // otherwise, container may also include @set\n        isValid &= container.length <= (hasSet ? 2 : 1);\n      }\n\n      if(container.includes('@type')) {\n        // If mapping does not have an @type,\n        // set it to @id\n        mapping['@type'] = mapping['@type'] || '@id';\n\n        // type mapping must be either @id or @vocab\n        if(!['@id', '@vocab'].includes(mapping['@type'])) {\n          throw new JsonLdError(\n            'Invalid JSON-LD syntax; container: @type requires @type to be ' +\n            '@id or @vocab.',\n            'jsonld.SyntaxError',\n            {code: 'invalid type mapping', context: localCtx});\n        }\n      }\n    } else {\n      // in JSON-LD 1.0, container must not be an array (it must be a string,\n      // which is one of the validContainers)\n      isValid &= !_isArray(value['@container']);\n\n      // check container length\n      isValid &= container.length <= 1;\n    }\n\n    // check against valid containers\n    isValid &= container.every(c => validContainers.includes(c));\n\n    // @set not allowed with @list\n    isValid &= !(hasSet && container.includes('@list'));\n\n    if(!isValid) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; @context @container value must be ' +\n        'one of the following: ' + validContainers.join(', '),\n        'jsonld.SyntaxError',\n        {code: 'invalid container mapping', context: localCtx});\n    }\n\n    if(mapping.reverse &&\n      !container.every(c => ['@index', '@set'].includes(c))) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; @context @container value for a @reverse ' +\n        'type definition must be @index or @set.', 'jsonld.SyntaxError',\n        {code: 'invalid reverse property', context: localCtx});\n    }\n\n    // add @container to mapping\n    mapping['@container'] = container;\n  }\n\n  // property indexing\n  if('@index' in value) {\n    if(!('@container' in value) || !mapping['@container'].includes('@index')) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; @index without @index in @container: ' +\n        `\"${value['@index']}\" on term \"${term}\".`, 'jsonld.SyntaxError',\n        {code: 'invalid term definition', context: localCtx});\n    }\n    if(!_isString(value['@index']) || value['@index'].indexOf('@') === 0) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; @index must expand to an IRI: ' +\n        `\"${value['@index']}\" on term \"${term}\".`, 'jsonld.SyntaxError',\n        {code: 'invalid term definition', context: localCtx});\n    }\n    mapping['@index'] = value['@index'];\n  }\n\n  // scoped contexts\n  if('@context' in value) {\n    mapping['@context'] = value['@context'];\n  }\n\n  if('@language' in value && !('@type' in value)) {\n    let language = value['@language'];\n    if(language !== null && !_isString(language)) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; @context @language value must be ' +\n        'a string or null.', 'jsonld.SyntaxError',\n        {code: 'invalid language mapping', context: localCtx});\n    }\n\n    // add @language to mapping\n    if(language !== null) {\n      language = language.toLowerCase();\n    }\n    mapping['@language'] = language;\n  }\n\n  // term may be used as a prefix\n  if('@prefix' in value) {\n    if(term.match(/:|\\//)) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; @context @prefix used on a compact IRI term',\n        'jsonld.SyntaxError',\n        {code: 'invalid term definition', context: localCtx});\n    }\n    if(api.isKeyword(mapping['@id'])) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; keywords may not be used as prefixes',\n        'jsonld.SyntaxError',\n        {code: 'invalid term definition', context: localCtx});\n    }\n    if(typeof value['@prefix'] === 'boolean') {\n      mapping._prefix = value['@prefix'] === true;\n    } else {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; @context value for @prefix must be boolean',\n        'jsonld.SyntaxError',\n        {code: 'invalid @prefix value', context: localCtx});\n    }\n  }\n\n  if('@direction' in value) {\n    const direction = value['@direction'];\n    if(direction !== null && direction !== 'ltr' && direction !== 'rtl') {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; @direction value must be ' +\n        'null, \"ltr\", or \"rtl\".',\n        'jsonld.SyntaxError',\n        {code: 'invalid base direction', context: localCtx});\n    }\n    mapping['@direction'] = direction;\n  }\n\n  if('@nest' in value) {\n    const nest = value['@nest'];\n    if(!_isString(nest) || (nest !== '@nest' && nest.indexOf('@') === 0)) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; @context @nest value must be ' +\n        'a string which is not a keyword other than @nest.',\n        'jsonld.SyntaxError',\n        {code: 'invalid @nest value', context: localCtx});\n    }\n    mapping['@nest'] = nest;\n  }\n\n  // disallow aliasing @context and @preserve\n  const id = mapping['@id'];\n  if(id === '@context' || id === '@preserve') {\n    throw new JsonLdError(\n      'Invalid JSON-LD syntax; @context and @preserve cannot be aliased.',\n      'jsonld.SyntaxError', {code: 'invalid keyword alias', context: localCtx});\n  }\n\n  // Check for overriding protected terms\n  if(previousMapping && previousMapping.protected && !overrideProtected) {\n    // force new term to continue to be protected and see if the mappings would\n    // be equal\n    activeCtx.protected[term] = true;\n    mapping.protected = true;\n    if(!_deepCompare(previousMapping, mapping)) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; tried to redefine a protected term.',\n        'jsonld.SyntaxError',\n        {code: 'protected term redefinition', context: localCtx, term});\n    }\n  }\n};\n\n/**\n * Expands a string to a full IRI. The string may be a term, a prefix, a\n * relative IRI, or an absolute IRI. The associated absolute IRI will be\n * returned.\n *\n * @param activeCtx the current active context.\n * @param value the string to expand.\n * @param relativeTo options for how to resolve relative IRIs:\n *          base: true to resolve against the base IRI, false not to.\n *          vocab: true to concatenate after @vocab, false not to.\n * @param {Object} [options] - processing options.\n *\n * @return the expanded value.\n */\napi.expandIri = (activeCtx, value, relativeTo, options) => {\n  return _expandIri(activeCtx, value, relativeTo, undefined, undefined,\n    options);\n};\n\n/**\n * Expands a string to a full IRI. The string may be a term, a prefix, a\n * relative IRI, or an absolute IRI. The associated absolute IRI will be\n * returned.\n *\n * @param activeCtx the current active context.\n * @param value the string to expand.\n * @param relativeTo options for how to resolve relative IRIs:\n *          base: true to resolve against the base IRI, false not to.\n *          vocab: true to concatenate after @vocab, false not to.\n * @param localCtx the local context being processed (only given if called\n *          during context processing).\n * @param defined a map for tracking cycles in context definitions (only given\n *          if called during context processing).\n * @param {Object} [options] - processing options.\n *\n * @return the expanded value.\n */\nfunction _expandIri(activeCtx, value, relativeTo, localCtx, defined, options) {\n  // already expanded\n  if(value === null || !_isString(value) || api.isKeyword(value)) {\n    return value;\n  }\n\n  // ignore non-keyword things that look like a keyword\n  if(value.match(REGEX_KEYWORD)) {\n    return null;\n  }\n\n  // define term dependency if not defined\n  if(localCtx && localCtx.hasOwnProperty(value) &&\n    defined.get(value) !== true) {\n    api.createTermDefinition({\n      activeCtx, localCtx, term: value, defined, options\n    });\n  }\n\n  relativeTo = relativeTo || {};\n  if(relativeTo.vocab) {\n    const mapping = activeCtx.mappings.get(value);\n\n    // value is explicitly ignored with a null mapping\n    if(mapping === null) {\n      return null;\n    }\n\n    if(_isObject(mapping) && '@id' in mapping) {\n      // value is a term\n      return mapping['@id'];\n    }\n  }\n\n  // split value into prefix:suffix\n  const colon = value.indexOf(':');\n  if(colon > 0) {\n    const prefix = value.substr(0, colon);\n    const suffix = value.substr(colon + 1);\n\n    // do not expand blank nodes (prefix of '_') or already-absolute\n    // IRIs (suffix of '//')\n    if(prefix === '_' || suffix.indexOf('//') === 0) {\n      return value;\n    }\n\n    // prefix dependency not defined, define it\n    if(localCtx && localCtx.hasOwnProperty(prefix)) {\n      api.createTermDefinition({\n        activeCtx, localCtx, term: prefix, defined, options\n      });\n    }\n\n    // use mapping if prefix is defined\n    const mapping = activeCtx.mappings.get(prefix);\n    if(mapping && mapping._prefix) {\n      return mapping['@id'] + suffix;\n    }\n\n    // already absolute IRI\n    if(_isAbsoluteIri(value)) {\n      return value;\n    }\n  }\n\n  // A flag that captures whether the iri being expanded is\n  // the value for an @type\n  //let typeExpansion = false;\n\n  //if(options !== undefined && options.typeExpansion !== undefined) {\n  //  typeExpansion = options.typeExpansion;\n  //}\n\n  if(relativeTo.vocab && '@vocab' in activeCtx) {\n    // prepend vocab\n    const prependedResult = activeCtx['@vocab'] + value;\n    // FIXME: needed? may be better as debug event.\n    /*\n    if(options && options.eventHandler) {\n      _handleEvent({\n        event: {\n          type: ['JsonLdEvent'],\n          code: 'prepending @vocab during expansion',\n          level: 'info',\n          message: 'Prepending @vocab during expansion.',\n          details: {\n            type: '@vocab',\n            vocab: activeCtx['@vocab'],\n            value,\n            result: prependedResult,\n            typeExpansion\n          }\n        },\n        options\n      });\n    }\n    */\n    // the null case preserves value as potentially relative\n    value = prependedResult;\n  } else if(relativeTo.base) {\n    // prepend base\n    let prependedResult;\n    let base;\n    if('@base' in activeCtx) {\n      if(activeCtx['@base']) {\n        base = prependBase(options.base, activeCtx['@base']);\n        prependedResult = prependBase(base, value);\n      } else {\n        base = activeCtx['@base'];\n        prependedResult = value;\n      }\n    } else {\n      base = options.base;\n      prependedResult = prependBase(options.base, value);\n    }\n    // FIXME: needed? may be better as debug event.\n    /*\n    if(options && options.eventHandler) {\n      _handleEvent({\n        event: {\n          type: ['JsonLdEvent'],\n          code: 'prepending @base during expansion',\n          level: 'info',\n          message: 'Prepending @base during expansion.',\n          details: {\n            type: '@base',\n            base,\n            value,\n            result: prependedResult,\n            typeExpansion\n          }\n        },\n        options\n      });\n    }\n    */\n    // the null case preserves value as potentially relative\n    value = prependedResult;\n  }\n\n  // FIXME: duplicate? needed? maybe just enable in a verbose debug mode\n  /*\n  if(!_isAbsoluteIri(value) && options && options.eventHandler) {\n    // emit event indicating a relative IRI was found, which can result in it\n    // being dropped when converting to other RDF representations\n    _handleEvent({\n      event: {\n        type: ['JsonLdEvent'],\n        code: 'relative IRI after expansion',\n        // FIXME: what level?\n        level: 'warning',\n        message: 'Relative IRI after expansion.',\n        details: {\n          relativeIri: value,\n          typeExpansion\n        }\n      },\n      options\n    });\n    // NOTE: relative reference events emitted at calling sites as needed\n  }\n  */\n\n  return value;\n}\n\n/**\n * Gets the initial context.\n *\n * @param options the options to use:\n *          [base] the document base IRI.\n *\n * @return the initial context.\n */\napi.getInitialContext = options => {\n  const key = JSON.stringify({processingMode: options.processingMode});\n  const cached = INITIAL_CONTEXT_CACHE.get(key);\n  if(cached) {\n    return cached;\n  }\n\n  const initialContext = {\n    processingMode: options.processingMode,\n    mappings: new Map(),\n    inverse: null,\n    getInverse: _createInverseContext,\n    clone: _cloneActiveContext,\n    revertToPreviousContext: _revertToPreviousContext,\n    protected: {}\n  };\n  // TODO: consider using LRU cache instead\n  if(INITIAL_CONTEXT_CACHE.size === INITIAL_CONTEXT_CACHE_MAX_SIZE) {\n    // clear whole cache -- assumes scenario where the cache fills means\n    // the cache isn't being used very efficiently anyway\n    INITIAL_CONTEXT_CACHE.clear();\n  }\n  INITIAL_CONTEXT_CACHE.set(key, initialContext);\n  return initialContext;\n\n  /**\n   * Generates an inverse context for use in the compaction algorithm, if\n   * not already generated for the given active context.\n   *\n   * @return the inverse context.\n   */\n  function _createInverseContext() {\n    const activeCtx = this;\n\n    // lazily create inverse\n    if(activeCtx.inverse) {\n      return activeCtx.inverse;\n    }\n    const inverse = activeCtx.inverse = {};\n\n    // variables for building fast CURIE map\n    const fastCurieMap = activeCtx.fastCurieMap = {};\n    const irisToTerms = {};\n\n    // handle default language\n    const defaultLanguage = (activeCtx['@language'] || '@none').toLowerCase();\n\n    // handle default direction\n    const defaultDirection = activeCtx['@direction'];\n\n    // create term selections for each mapping in the context, ordered by\n    // shortest and then lexicographically least\n    const mappings = activeCtx.mappings;\n    const terms = [...mappings.keys()].sort(_compareShortestLeast);\n    for(const term of terms) {\n      const mapping = mappings.get(term);\n      if(mapping === null) {\n        continue;\n      }\n\n      let container = mapping['@container'] || '@none';\n      container = [].concat(container).sort().join('');\n\n      if(mapping['@id'] === null) {\n        continue;\n      }\n      // iterate over every IRI in the mapping\n      const ids = _asArray(mapping['@id']);\n      for(const iri of ids) {\n        let entry = inverse[iri];\n        const isKeyword = api.isKeyword(iri);\n\n        if(!entry) {\n          // initialize entry\n          inverse[iri] = entry = {};\n\n          if(!isKeyword && !mapping._termHasColon) {\n            // init IRI to term map and fast CURIE prefixes\n            irisToTerms[iri] = [term];\n            const fastCurieEntry = {iri, terms: irisToTerms[iri]};\n            if(iri[0] in fastCurieMap) {\n              fastCurieMap[iri[0]].push(fastCurieEntry);\n            } else {\n              fastCurieMap[iri[0]] = [fastCurieEntry];\n            }\n          }\n        } else if(!isKeyword && !mapping._termHasColon) {\n          // add IRI to term match\n          irisToTerms[iri].push(term);\n        }\n\n        // add new entry\n        if(!entry[container]) {\n          entry[container] = {\n            '@language': {},\n            '@type': {},\n            '@any': {}\n          };\n        }\n        entry = entry[container];\n        _addPreferredTerm(term, entry['@any'], '@none');\n\n        if(mapping.reverse) {\n          // term is preferred for values using @reverse\n          _addPreferredTerm(term, entry['@type'], '@reverse');\n        } else if(mapping['@type'] === '@none') {\n          _addPreferredTerm(term, entry['@any'], '@none');\n          _addPreferredTerm(term, entry['@language'], '@none');\n          _addPreferredTerm(term, entry['@type'], '@none');\n        } else if('@type' in mapping) {\n          // term is preferred for values using specific type\n          _addPreferredTerm(term, entry['@type'], mapping['@type']);\n        } else if('@language' in mapping && '@direction' in mapping) {\n          // term is preferred for values using specific language and direction\n          const language = mapping['@language'];\n          const direction = mapping['@direction'];\n          if(language && direction) {\n            _addPreferredTerm(term, entry['@language'],\n              `${language}_${direction}`.toLowerCase());\n          } else if(language) {\n            _addPreferredTerm(term, entry['@language'], language.toLowerCase());\n          } else if(direction) {\n            _addPreferredTerm(term, entry['@language'], `_${direction}`);\n          } else {\n            _addPreferredTerm(term, entry['@language'], '@null');\n          }\n        } else if('@language' in mapping) {\n          _addPreferredTerm(term, entry['@language'],\n            (mapping['@language'] || '@null').toLowerCase());\n        } else if('@direction' in mapping) {\n          if(mapping['@direction']) {\n            _addPreferredTerm(term, entry['@language'],\n              `_${mapping['@direction']}`);\n          } else {\n            _addPreferredTerm(term, entry['@language'], '@none');\n          }\n        } else if(defaultDirection) {\n          _addPreferredTerm(term, entry['@language'], `_${defaultDirection}`);\n          _addPreferredTerm(term, entry['@language'], '@none');\n          _addPreferredTerm(term, entry['@type'], '@none');\n        } else {\n          // add entries for no type and no language\n          _addPreferredTerm(term, entry['@language'], defaultLanguage);\n          _addPreferredTerm(term, entry['@language'], '@none');\n          _addPreferredTerm(term, entry['@type'], '@none');\n        }\n      }\n    }\n\n    // build fast CURIE map\n    for(const key in fastCurieMap) {\n      _buildIriMap(fastCurieMap, key, 1);\n    }\n\n    return inverse;\n  }\n\n  /**\n   * Runs a recursive algorithm to build a lookup map for quickly finding\n   * potential CURIEs.\n   *\n   * @param iriMap the map to build.\n   * @param key the current key in the map to work on.\n   * @param idx the index into the IRI to compare.\n   */\n  function _buildIriMap(iriMap, key, idx) {\n    const entries = iriMap[key];\n    const next = iriMap[key] = {};\n\n    let iri;\n    let letter;\n    for(const entry of entries) {\n      iri = entry.iri;\n      if(idx >= iri.length) {\n        letter = '';\n      } else {\n        letter = iri[idx];\n      }\n      if(letter in next) {\n        next[letter].push(entry);\n      } else {\n        next[letter] = [entry];\n      }\n    }\n\n    for(const key in next) {\n      if(key === '') {\n        continue;\n      }\n      _buildIriMap(next, key, idx + 1);\n    }\n  }\n\n  /**\n   * Adds the term for the given entry if not already added.\n   *\n   * @param term the term to add.\n   * @param entry the inverse context typeOrLanguage entry to add to.\n   * @param typeOrLanguageValue the key in the entry to add to.\n   */\n  function _addPreferredTerm(term, entry, typeOrLanguageValue) {\n    if(!entry.hasOwnProperty(typeOrLanguageValue)) {\n      entry[typeOrLanguageValue] = term;\n    }\n  }\n\n  /**\n   * Clones an active context, creating a child active context.\n   *\n   * @return a clone (child) of the active context.\n   */\n  function _cloneActiveContext() {\n    const child = {};\n    child.mappings = util.clone(this.mappings);\n    child.clone = this.clone;\n    child.inverse = null;\n    child.getInverse = this.getInverse;\n    child.protected = util.clone(this.protected);\n    if(this.previousContext) {\n      child.previousContext = this.previousContext.clone();\n    }\n    child.revertToPreviousContext = this.revertToPreviousContext;\n    if('@base' in this) {\n      child['@base'] = this['@base'];\n    }\n    if('@language' in this) {\n      child['@language'] = this['@language'];\n    }\n    if('@vocab' in this) {\n      child['@vocab'] = this['@vocab'];\n    }\n    return child;\n  }\n\n  /**\n   * Reverts any type-scoped context in this active context to the previous\n   * context.\n   */\n  function _revertToPreviousContext() {\n    if(!this.previousContext) {\n      return this;\n    }\n    return this.previousContext.clone();\n  }\n};\n\n/**\n * Gets the value for the given active context key and type, null if none is\n * set or undefined if none is set and type is '@context'.\n *\n * @param ctx the active context.\n * @param key the context key.\n * @param [type] the type of value to get (eg: '@id', '@type'), if not\n *          specified gets the entire entry for a key, null if not found.\n *\n * @return the value, null, or undefined.\n */\napi.getContextValue = (ctx, key, type) => {\n  // invalid key\n  if(key === null) {\n    if(type === '@context') {\n      return undefined;\n    }\n    return null;\n  }\n\n  // get specific entry information\n  if(ctx.mappings.has(key)) {\n    const entry = ctx.mappings.get(key);\n\n    if(_isUndefined(type)) {\n      // return whole entry\n      return entry;\n    }\n    if(entry.hasOwnProperty(type)) {\n      // return entry value for type\n      return entry[type];\n    }\n  }\n\n  // get default language\n  if(type === '@language' && type in ctx) {\n    return ctx[type];\n  }\n\n  // get default direction\n  if(type === '@direction' && type in ctx) {\n    return ctx[type];\n  }\n\n  if(type === '@context') {\n    return undefined;\n  }\n  return null;\n};\n\n/**\n * Processing Mode check.\n *\n * @param activeCtx the current active context.\n * @param version the string or numeric version to check.\n *\n * @return boolean.\n */\napi.processingMode = (activeCtx, version) => {\n  if(version.toString() >= '1.1') {\n    return !activeCtx.processingMode ||\n      activeCtx.processingMode >= 'json-ld-' + version.toString();\n  } else {\n    return activeCtx.processingMode === 'json-ld-1.0';\n  }\n};\n\n/**\n * Returns whether or not the given value is a keyword.\n *\n * @param v the value to check.\n *\n * @return true if the value is a keyword, false if not.\n */\napi.isKeyword = v => {\n  if(!_isString(v) || v[0] !== '@') {\n    return false;\n  }\n  switch(v) {\n    case '@base':\n    case '@container':\n    case '@context':\n    case '@default':\n    case '@direction':\n    case '@embed':\n    case '@explicit':\n    case '@graph':\n    case '@id':\n    case '@included':\n    case '@index':\n    case '@json':\n    case '@language':\n    case '@list':\n    case '@nest':\n    case '@none':\n    case '@omitDefault':\n    case '@prefix':\n    case '@preserve':\n    case '@protected':\n    case '@requireAll':\n    case '@reverse':\n    case '@set':\n    case '@type':\n    case '@value':\n    case '@version':\n    case '@vocab':\n      return true;\n  }\n  return false;\n};\n\nfunction _deepCompare(x1, x2) {\n  // compare `null` or primitive types directly\n  if((!(x1 && typeof x1 === 'object')) ||\n     (!(x2 && typeof x2 === 'object'))) {\n    return x1 === x2;\n  }\n  // x1 and x2 are objects (also potentially arrays)\n  const x1Array = Array.isArray(x1);\n  if(x1Array !== Array.isArray(x2)) {\n    return false;\n  }\n  if(x1Array) {\n    if(x1.length !== x2.length) {\n      return false;\n    }\n    for(let i = 0; i < x1.length; ++i) {\n      if(!_deepCompare(x1[i], x2[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  // x1 and x2 are non-array objects\n  const k1s = Object.keys(x1);\n  const k2s = Object.keys(x2);\n  if(k1s.length !== k2s.length) {\n    return false;\n  }\n  for(const k1 in x1) {\n    let v1 = x1[k1];\n    let v2 = x2[k1];\n    // special case: `@container` can be in any order\n    if(k1 === '@container') {\n      if(Array.isArray(v1) && Array.isArray(v2)) {\n        v1 = v1.slice().sort();\n        v2 = v2.slice().sort();\n      }\n    }\n    if(!_deepCompare(v1, v2)) {\n      return false;\n    }\n  }\n  return true;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}