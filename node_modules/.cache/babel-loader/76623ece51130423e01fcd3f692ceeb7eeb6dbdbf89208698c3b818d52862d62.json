{"ast":null,"code":"import get from \"lodash.get\";\nimport inflection from \"inflection\";\nimport { Field } from \"../Field.js\";\nimport { Resource } from \"../Resource.js\";\nimport getResourcePaths from \"../utils/getResources.js\";\nimport getType from \"../openapi3/getType.js\";\nexport const removeTrailingSlash = url => {\n  if (url.endsWith(\"/\")) {\n    url = url.slice(0, -1);\n  }\n  return url;\n};\nexport default function (response, entrypointUrl) {\n  const paths = getResourcePaths(response.paths);\n  return paths.map(path => {\n    const splittedPath = removeTrailingSlash(path).split(\"/\");\n    const name = inflection.pluralize(splittedPath[splittedPath.length - 2]);\n    const url = `${removeTrailingSlash(entrypointUrl)}/${name}`;\n    const title = inflection.classify(splittedPath[splittedPath.length - 2]);\n    if (!response.definitions) {\n      throw new Error(); // @TODO\n    }\n\n    const definition = response.definitions[title];\n    if (!definition) {\n      throw new Error(); // @TODO\n    }\n\n    const description = definition.description;\n    const properties = definition.properties;\n    if (!properties) {\n      throw new Error(); // @TODO\n    }\n\n    const fieldNames = Object.keys(properties);\n    const requiredFields = get(response, [\"definitions\", title, \"required\"], []);\n    const fields = fieldNames.map(fieldName => {\n      const property = properties[fieldName];\n      return new Field(fieldName, {\n        id: null,\n        range: null,\n        type: getType(get(property, \"type\", \"\"), get(property, \"format\", \"\")),\n        enum: property.enum ? Object.fromEntries(property.enum.map(enumValue => [typeof enumValue === \"string\" ? inflection.humanize(enumValue) : enumValue, enumValue])) : null,\n        reference: null,\n        embedded: null,\n        required: !!requiredFields.find(value => value === fieldName),\n        description: property.description || \"\"\n      });\n    });\n    return new Resource(name, url, {\n      id: null,\n      title,\n      description,\n      fields,\n      readableFields: fields,\n      writableFields: fields\n    });\n  });\n}","map":{"version":3,"mappings":"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","names":["get","inflection","Field","Resource","getResourcePaths","getType","removeTrailingSlash","url","endsWith","slice","response","entrypointUrl","paths","map","path","splittedPath","split","name","pluralize","length","title","classify","definitions","Error","definition","description","properties","fieldNames","Object","keys","requiredFields","fields","fieldName","property","id","range","type","enum","fromEntries","enumValue","humanize","reference","embedded","required","find","value","readableFields","writableFields"],"sources":["C:\\Users\\kevin\\Desktop\\EGS data\\Egs-Ladder-Front\\EGS-ladder-front\\node_modules\\@api-platform\\api-doc-parser\\src\\swagger\\handleJson.ts"],"sourcesContent":["import get from \"lodash.get\";\nimport inflection from \"inflection\";\nimport { Field } from \"../Field.js\";\nimport { Resource } from \"../Resource.js\";\nimport getResourcePaths from \"../utils/getResources.js\";\nimport getType from \"../openapi3/getType.js\";\nimport type { OpenAPIV2 } from \"openapi-types\";\n\nexport const removeTrailingSlash = (url: string): string => {\n  if (url.endsWith(\"/\")) {\n    url = url.slice(0, -1);\n  }\n  return url;\n};\n\nexport default function (\n  response: OpenAPIV2.Document,\n  entrypointUrl: string\n): Resource[] {\n  const paths = getResourcePaths(response.paths);\n\n  return paths.map((path) => {\n    const splittedPath = removeTrailingSlash(path).split(\"/\");\n    const name = inflection.pluralize(splittedPath[splittedPath.length - 2]);\n    const url = `${removeTrailingSlash(entrypointUrl)}/${name}`;\n\n    const title = inflection.classify(splittedPath[splittedPath.length - 2]);\n\n    if (!response.definitions) {\n      throw new Error(); // @TODO\n    }\n\n    const definition = response.definitions[title];\n\n    if (!definition) {\n      throw new Error(); // @TODO\n    }\n\n    const description = definition.description;\n    const properties = definition.properties;\n\n    if (!properties) {\n      throw new Error(); // @TODO\n    }\n\n    const fieldNames = Object.keys(properties);\n    const requiredFields = get(\n      response,\n      [\"definitions\", title, \"required\"],\n      []\n    ) as string[];\n\n    const fields = fieldNames.map((fieldName) => {\n      const property = properties[fieldName];\n\n      return new Field(fieldName, {\n        id: null,\n        range: null,\n        type: getType(\n          get(property, \"type\", \"\") as string,\n          get(property, \"format\", \"\") as string\n        ),\n        enum: property.enum\n          ? Object.fromEntries(\n              property.enum.map((enumValue: string | number) => [\n                typeof enumValue === \"string\"\n                  ? inflection.humanize(enumValue)\n                  : enumValue,\n                enumValue,\n              ])\n            )\n          : null,\n        reference: null,\n        embedded: null,\n        required: !!requiredFields.find((value) => value === fieldName),\n        description: property.description || \"\",\n      });\n    });\n\n    return new Resource(name, url, {\n      id: null,\n      title,\n      description,\n      fields,\n      readableFields: fields,\n      writableFields: fields,\n    });\n  });\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}