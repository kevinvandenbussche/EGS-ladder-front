{"ast":null,"code":"import { __awaiter } from \"tslib\";\nconst jsonLdMimeType = \"application/ld+json\";\n/**\n * Sends a JSON-LD request to the API.\n */\nexport default function fetchJsonLd(url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield fetch(url, setHeaders(options));\n    const {\n      headers,\n      status\n    } = response;\n    const contentType = headers.get(\"Content-Type\");\n    if (204 === status) {\n      return Promise.resolve({\n        response\n      });\n    }\n    if (500 <= status || !contentType || !contentType.includes(jsonLdMimeType)) {\n      const reason = {\n        response\n      };\n      return Promise.reject(reason);\n    }\n    return response.json().then(body => ({\n      response,\n      body,\n      document: body,\n      documentUrl: url\n    }));\n  });\n}\nfunction setHeaders(options) {\n  if (!options.headers) {\n    return Object.assign(Object.assign({}, options), {\n      headers: {}\n    });\n  }\n  let headers = typeof options.headers === \"function\" ? options.headers() : options.headers;\n  headers = new Headers(headers);\n  if (null === headers.get(\"Accept\")) {\n    headers.set(\"Accept\", jsonLdMimeType);\n  }\n  const result = Object.assign(Object.assign({}, options), {\n    headers\n  });\n  if (\"undefined\" !== result.body && !(typeof FormData !== \"undefined\" && result.body instanceof FormData) && null === result.headers.get(\"Content-Type\")) {\n    result.headers.set(\"Content-Type\", jsonLdMimeType);\n  }\n  return result;\n}","map":{"version":3,"mappings":";AAGA,MAAMA,cAAc,GAAG,qBAAqB;AAe5C;;;AAGA,eAAc,SAAgBC,WAAW,CACvCC,GAAW,EACsB;EAAA,IAAjCC,8EAA+B,EAAE;;IAEjC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAG,EAAEI,UAAU,CAACH,OAAO,CAAC,CAAC;IACtD,MAAM;MAAEI,OAAO;MAAEC;IAAM,CAAE,GAAGJ,QAAQ;IACpC,MAAMK,WAAW,GAAGF,OAAO,CAACG,GAAG,CAAC,cAAc,CAAC;IAE/C,IAAI,GAAG,KAAKF,MAAM,EAAE;MAClB,OAAOG,OAAO,CAACC,OAAO,CAAC;QAAER;MAAQ,CAAE,CAAC;;IAGtC,IAAI,GAAG,IAAII,MAAM,IAAI,CAACC,WAAW,IAAI,CAACA,WAAW,CAACI,QAAQ,CAACb,cAAc,CAAC,EAAE;MAC1E,MAAMc,MAAM,GAA6B;QAAEV;MAAQ,CAAE;MACrD,OAAOO,OAAO,CAACI,MAAM,CAACD,MAAM,CAAC;;IAG/B,OAAOV,QAAQ,CAACY,IAAI,EAAE,CAACC,IAAI,CAAEC,IAAY,KAAM;MAC7Cd,QAAQ;MACRc,IAAI;MACJC,QAAQ,EAAED,IAAI;MACdE,WAAW,EAAElB;KACd,CAAC,CAAC;EACL,CAAC;;AAED,SAASI,UAAU,CAACH,OAA4B;EAC9C,IAAI,CAACA,OAAO,CAACI,OAAO,EAAE;IACpB,uCAAYJ,OAAO;MAAEI,OAAO,EAAE;IAAE;;EAGlC,IAAIA,OAAO,GACT,OAAOJ,OAAO,CAACI,OAAO,KAAK,UAAU,GAAGJ,OAAO,CAACI,OAAO,EAAE,GAAGJ,OAAO,CAACI,OAAO;EAE7EA,OAAO,GAAG,IAAIc,OAAO,CAACd,OAAO,CAAC;EAE9B,IAAI,IAAI,KAAKA,OAAO,CAACG,GAAG,CAAC,QAAQ,CAAC,EAAE;IAClCH,OAAO,CAACe,GAAG,CAAC,QAAQ,EAAEtB,cAAc,CAAC;;EAGvC,MAAMuB,MAAM,mCAAQpB,OAAO;IAAEI;EAAO,EAAE;EAEtC,IACE,WAAW,KAAKgB,MAAM,CAACL,IAAI,IAC3B,EAAE,OAAOM,QAAQ,KAAK,WAAW,IAAID,MAAM,CAACL,IAAI,YAAYM,QAAQ,CAAC,IACrE,IAAI,KAAKD,MAAM,CAAChB,OAAO,CAACG,GAAG,CAAC,cAAc,CAAC,EAC3C;IACAa,MAAM,CAAChB,OAAO,CAACe,GAAG,CAAC,cAAc,EAAEtB,cAAc,CAAC;;EAGpD,OAAOuB,MAAM;AACf","names":["jsonLdMimeType","fetchJsonLd","url","options","response","fetch","setHeaders","headers","status","contentType","get","Promise","resolve","includes","reason","reject","json","then","body","document","documentUrl","Headers","set","result","FormData"],"sources":["C:\\Users\\kevin\\Desktop\\EGS data\\Egs-Ladder-Front\\EGS-ladder-front\\node_modules\\@api-platform\\api-doc-parser\\src\\hydra\\fetchJsonLd.ts"],"sourcesContent":["import type { Document, JsonLd, RemoteDocument } from \"jsonld/jsonld-spec\";\nimport type { RequestInitExtended } from \"./types.js\";\n\nconst jsonLdMimeType = \"application/ld+json\";\n\nexport type RejectedResponseDocument = {\n  response: Response;\n};\n\nexport type EmptyResponseDocument = {\n  response: Response;\n};\n\nexport interface ResponseDocument extends RemoteDocument {\n  response: Response;\n  body: Document;\n}\n\n/**\n * Sends a JSON-LD request to the API.\n */\nexport default async function fetchJsonLd(\n  url: string,\n  options: RequestInitExtended = {}\n): Promise<ResponseDocument | EmptyResponseDocument> {\n  const response = await fetch(url, setHeaders(options));\n  const { headers, status } = response;\n  const contentType = headers.get(\"Content-Type\");\n\n  if (204 === status) {\n    return Promise.resolve({ response });\n  }\n\n  if (500 <= status || !contentType || !contentType.includes(jsonLdMimeType)) {\n    const reason: RejectedResponseDocument = { response };\n    return Promise.reject(reason);\n  }\n\n  return response.json().then((body: JsonLd) => ({\n    response,\n    body,\n    document: body,\n    documentUrl: url,\n  }));\n}\n\nfunction setHeaders(options: RequestInitExtended): RequestInit {\n  if (!options.headers) {\n    return { ...options, headers: {} };\n  }\n\n  let headers: HeadersInit =\n    typeof options.headers === \"function\" ? options.headers() : options.headers;\n\n  headers = new Headers(headers);\n\n  if (null === headers.get(\"Accept\")) {\n    headers.set(\"Accept\", jsonLdMimeType);\n  }\n\n  const result = { ...options, headers };\n\n  if (\n    \"undefined\" !== result.body &&\n    !(typeof FormData !== \"undefined\" && result.body instanceof FormData) &&\n    null === result.headers.get(\"Content-Type\")\n  ) {\n    result.headers.set(\"Content-Type\", jsonLdMimeType);\n  }\n\n  return result;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}