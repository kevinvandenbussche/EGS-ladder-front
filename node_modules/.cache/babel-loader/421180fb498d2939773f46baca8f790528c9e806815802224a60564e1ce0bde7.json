{"ast":null,"code":"/**\n * A JavaScript implementation of the JSON-LD API.\n *\n * @author Dave Longley\n *\n * @license BSD 3-Clause License\n * Copyright (c) 2011-2022 Digital Bazaar, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n *\n * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer in the\n * documentation and/or other materials provided with the distribution.\n *\n * Neither the name of the Digital Bazaar, Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\n * IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nconst canonize = require('rdf-canonize');\nconst platform = require('./platform');\nconst util = require('./util');\nconst ContextResolver = require('./ContextResolver');\nconst IdentifierIssuer = util.IdentifierIssuer;\nconst JsonLdError = require('./JsonLdError');\nconst LRU = require('lru-cache');\nconst NQuads = require('./NQuads');\nconst {\n  expand: _expand\n} = require('./expand');\nconst {\n  flatten: _flatten\n} = require('./flatten');\nconst {\n  fromRDF: _fromRDF\n} = require('./fromRdf');\nconst {\n  toRDF: _toRDF\n} = require('./toRdf');\nconst {\n  frameMergedOrDefault: _frameMergedOrDefault,\n  cleanupNull: _cleanupNull\n} = require('./frame');\nconst {\n  isArray: _isArray,\n  isObject: _isObject,\n  isString: _isString\n} = require('./types');\nconst {\n  isSubjectReference: _isSubjectReference\n} = require('./graphTypes');\nconst {\n  expandIri: _expandIri,\n  getInitialContext: _getInitialContext,\n  process: _processContext,\n  processingMode: _processingMode\n} = require('./context');\nconst {\n  compact: _compact,\n  compactIri: _compactIri\n} = require('./compact');\nconst {\n  createNodeMap: _createNodeMap,\n  createMergedNodeMap: _createMergedNodeMap,\n  mergeNodeMaps: _mergeNodeMaps\n} = require('./nodeMap');\nconst {\n  logEventHandler: _logEventHandler,\n  logWarningEventHandler: _logWarningEventHandler,\n  safeEventHandler: _safeEventHandler,\n  setDefaultEventHandler: _setDefaultEventHandler,\n  setupEventHandler: _setupEventHandler,\n  strictEventHandler: _strictEventHandler,\n  unhandledEventHandler: _unhandledEventHandler\n} = require('./events');\n\n/* eslint-disable indent */\n// attaches jsonld API to the given object\nconst wrapper = function (jsonld) {\n  /** Registered RDF dataset parsers hashed by content-type. */\n  const _rdfParsers = {};\n\n  // resolved context cache\n  // TODO: consider basing max on context size rather than number\n  const RESOLVED_CONTEXT_CACHE_MAX_SIZE = 100;\n  const _resolvedContextCache = new LRU({\n    max: RESOLVED_CONTEXT_CACHE_MAX_SIZE\n  });\n\n  /* Core API */\n\n  /**\n   * Performs JSON-LD compaction.\n   *\n   * @param input the JSON-LD input to compact.\n   * @param ctx the context to compact with.\n   * @param [options] options to use:\n   *          [base] the base IRI to use.\n   *          [compactArrays] true to compact arrays to single values when\n   *            appropriate, false not to (default: true).\n   *          [compactToRelative] true to compact IRIs to be relative to document\n   *            base, false to keep absolute (default: true)\n   *          [graph] true to always output a top-level graph (default: false).\n   *          [expandContext] a context to expand with.\n   *          [skipExpansion] true to assume the input is expanded and skip\n   *            expansion, false not to, defaults to false.\n   *          [documentLoader(url, options)] the document loader.\n   *          [framing] true if compaction is occuring during a framing operation.\n   *          [safe] true to use safe mode. (default: false)\n   *          [contextResolver] internal use only.\n   *\n   * @return a Promise that resolves to the compacted output.\n   */\n  jsonld.compact = async function (input, ctx, options) {\n    if (arguments.length < 2) {\n      throw new TypeError('Could not compact, too few arguments.');\n    }\n    if (ctx === null) {\n      throw new JsonLdError('The compaction context must not be null.', 'jsonld.CompactError', {\n        code: 'invalid local context'\n      });\n    }\n\n    // nothing to compact\n    if (input === null) {\n      return null;\n    }\n\n    // set default options\n    options = _setDefaults(options, {\n      base: _isString(input) ? input : '',\n      compactArrays: true,\n      compactToRelative: true,\n      graph: false,\n      skipExpansion: false,\n      link: false,\n      issuer: new IdentifierIssuer('_:b'),\n      contextResolver: new ContextResolver({\n        sharedCache: _resolvedContextCache\n      })\n    });\n    if (options.link) {\n      // force skip expansion when linking, \"link\" is not part of the public\n      // API, it should only be called from framing\n      options.skipExpansion = true;\n    }\n    if (!options.compactToRelative) {\n      delete options.base;\n    }\n\n    // expand input\n    let expanded;\n    if (options.skipExpansion) {\n      expanded = input;\n    } else {\n      expanded = await jsonld.expand(input, options);\n    }\n\n    // process context\n    const activeCtx = await jsonld.processContext(_getInitialContext(options), ctx, options);\n\n    // do compaction\n    let compacted = await _compact({\n      activeCtx,\n      element: expanded,\n      options\n    });\n\n    // perform clean up\n    if (options.compactArrays && !options.graph && _isArray(compacted)) {\n      if (compacted.length === 1) {\n        // simplify to a single item\n        compacted = compacted[0];\n      } else if (compacted.length === 0) {\n        // simplify to an empty object\n        compacted = {};\n      }\n    } else if (options.graph && _isObject(compacted)) {\n      // always use array if graph option is on\n      compacted = [compacted];\n    }\n\n    // follow @context key\n    if (_isObject(ctx) && '@context' in ctx) {\n      ctx = ctx['@context'];\n    }\n\n    // build output context\n    ctx = util.clone(ctx);\n    if (!_isArray(ctx)) {\n      ctx = [ctx];\n    }\n    // remove empty contexts\n    const tmp = ctx;\n    ctx = [];\n    for (let i = 0; i < tmp.length; ++i) {\n      if (!_isObject(tmp[i]) || Object.keys(tmp[i]).length > 0) {\n        ctx.push(tmp[i]);\n      }\n    }\n\n    // remove array if only one context\n    const hasContext = ctx.length > 0;\n    if (ctx.length === 1) {\n      ctx = ctx[0];\n    }\n\n    // add context and/or @graph\n    if (_isArray(compacted)) {\n      // use '@graph' keyword\n      const graphAlias = _compactIri({\n        activeCtx,\n        iri: '@graph',\n        relativeTo: {\n          vocab: true\n        }\n      });\n      const graph = compacted;\n      compacted = {};\n      if (hasContext) {\n        compacted['@context'] = ctx;\n      }\n      compacted[graphAlias] = graph;\n    } else if (_isObject(compacted) && hasContext) {\n      // reorder keys so @context is first\n      const graph = compacted;\n      compacted = {\n        '@context': ctx\n      };\n      for (const key in graph) {\n        compacted[key] = graph[key];\n      }\n    }\n    return compacted;\n  };\n\n  /**\n   * Performs JSON-LD expansion.\n   *\n   * @param input the JSON-LD input to expand.\n   * @param [options] the options to use:\n   *          [base] the base IRI to use.\n   *          [expandContext] a context to expand with.\n   *          [keepFreeFloatingNodes] true to keep free-floating nodes,\n   *            false not to, defaults to false.\n   *          [documentLoader(url, options)] the document loader.\n   *          [safe] true to use safe mode. (default: false)\n   *          [contextResolver] internal use only.\n   *\n   * @return a Promise that resolves to the expanded output.\n   */\n  jsonld.expand = async function (input, options) {\n    if (arguments.length < 1) {\n      throw new TypeError('Could not expand, too few arguments.');\n    }\n\n    // set default options\n    options = _setDefaults(options, {\n      keepFreeFloatingNodes: false,\n      contextResolver: new ContextResolver({\n        sharedCache: _resolvedContextCache\n      })\n    });\n\n    // build set of objects that may have @contexts to resolve\n    const toResolve = {};\n\n    // build set of contexts to process prior to expansion\n    const contextsToProcess = [];\n\n    // if an `expandContext` has been given ensure it gets resolved\n    if ('expandContext' in options) {\n      const expandContext = util.clone(options.expandContext);\n      if (_isObject(expandContext) && '@context' in expandContext) {\n        toResolve.expandContext = expandContext;\n      } else {\n        toResolve.expandContext = {\n          '@context': expandContext\n        };\n      }\n      contextsToProcess.push(toResolve.expandContext);\n    }\n\n    // if input is a string, attempt to dereference remote document\n    let defaultBase;\n    if (!_isString(input)) {\n      // input is not a URL, do not need to retrieve it first\n      toResolve.input = util.clone(input);\n    } else {\n      // load remote doc\n      const remoteDoc = await jsonld.get(input, options);\n      defaultBase = remoteDoc.documentUrl;\n      toResolve.input = remoteDoc.document;\n      if (remoteDoc.contextUrl) {\n        // context included in HTTP link header and must be resolved\n        toResolve.remoteContext = {\n          '@context': remoteDoc.contextUrl\n        };\n        contextsToProcess.push(toResolve.remoteContext);\n      }\n    }\n\n    // set default base\n    if (!('base' in options)) {\n      options.base = defaultBase || '';\n    }\n\n    // process any additional contexts\n    let activeCtx = _getInitialContext(options);\n    for (const localCtx of contextsToProcess) {\n      activeCtx = await _processContext({\n        activeCtx,\n        localCtx,\n        options\n      });\n    }\n\n    // expand resolved input\n    let expanded = await _expand({\n      activeCtx,\n      element: toResolve.input,\n      options\n    });\n\n    // optimize away @graph with no other properties\n    if (_isObject(expanded) && '@graph' in expanded && Object.keys(expanded).length === 1) {\n      expanded = expanded['@graph'];\n    } else if (expanded === null) {\n      expanded = [];\n    }\n\n    // normalize to an array\n    if (!_isArray(expanded)) {\n      expanded = [expanded];\n    }\n    return expanded;\n  };\n\n  /**\n   * Performs JSON-LD flattening.\n   *\n   * @param input the JSON-LD to flatten.\n   * @param ctx the context to use to compact the flattened output, or null.\n   * @param [options] the options to use:\n   *          [base] the base IRI to use.\n   *          [expandContext] a context to expand with.\n   *          [documentLoader(url, options)] the document loader.\n   *          [contextResolver] internal use only.\n   *\n   * @return a Promise that resolves to the flattened output.\n   */\n  jsonld.flatten = async function (input, ctx, options) {\n    if (arguments.length < 1) {\n      return new TypeError('Could not flatten, too few arguments.');\n    }\n    if (typeof ctx === 'function') {\n      ctx = null;\n    } else {\n      ctx = ctx || null;\n    }\n\n    // set default options\n    options = _setDefaults(options, {\n      base: _isString(input) ? input : '',\n      contextResolver: new ContextResolver({\n        sharedCache: _resolvedContextCache\n      })\n    });\n\n    // expand input\n    const expanded = await jsonld.expand(input, options);\n\n    // do flattening\n    const flattened = _flatten(expanded);\n    if (ctx === null) {\n      // no compaction required\n      return flattened;\n    }\n\n    // compact result (force @graph option to true, skip expansion)\n    options.graph = true;\n    options.skipExpansion = true;\n    const compacted = await jsonld.compact(flattened, ctx, options);\n    return compacted;\n  };\n\n  /**\n   * Performs JSON-LD framing.\n   *\n   * @param input the JSON-LD input to frame.\n   * @param frame the JSON-LD frame to use.\n   * @param [options] the framing options.\n   *          [base] the base IRI to use.\n   *          [expandContext] a context to expand with.\n   *          [embed] default @embed flag: '@last', '@always', '@never', '@link'\n   *            (default: '@last').\n   *          [explicit] default @explicit flag (default: false).\n   *          [requireAll] default @requireAll flag (default: true).\n   *          [omitDefault] default @omitDefault flag (default: false).\n   *          [documentLoader(url, options)] the document loader.\n   *          [safe] true to use safe mode. (default: false)\n   *          [contextResolver] internal use only.\n   *\n   * @return a Promise that resolves to the framed output.\n   */\n  jsonld.frame = async function (input, frame, options) {\n    if (arguments.length < 2) {\n      throw new TypeError('Could not frame, too few arguments.');\n    }\n\n    // set default options\n    options = _setDefaults(options, {\n      base: _isString(input) ? input : '',\n      embed: '@once',\n      explicit: false,\n      requireAll: false,\n      omitDefault: false,\n      bnodesToClear: [],\n      contextResolver: new ContextResolver({\n        sharedCache: _resolvedContextCache\n      })\n    });\n\n    // if frame is a string, attempt to dereference remote document\n    if (_isString(frame)) {\n      // load remote doc\n      const remoteDoc = await jsonld.get(frame, options);\n      frame = remoteDoc.document;\n      if (remoteDoc.contextUrl) {\n        // inject link header @context into frame\n        let ctx = frame['@context'];\n        if (!ctx) {\n          ctx = remoteDoc.contextUrl;\n        } else if (_isArray(ctx)) {\n          ctx.push(remoteDoc.contextUrl);\n        } else {\n          ctx = [ctx, remoteDoc.contextUrl];\n        }\n        frame['@context'] = ctx;\n      }\n    }\n    const frameContext = frame ? frame['@context'] || {} : {};\n\n    // process context\n    const activeCtx = await jsonld.processContext(_getInitialContext(options), frameContext, options);\n\n    // mode specific defaults\n    if (!options.hasOwnProperty('omitGraph')) {\n      options.omitGraph = _processingMode(activeCtx, 1.1);\n    }\n    if (!options.hasOwnProperty('pruneBlankNodeIdentifiers')) {\n      options.pruneBlankNodeIdentifiers = _processingMode(activeCtx, 1.1);\n    }\n\n    // expand input\n    const expanded = await jsonld.expand(input, options);\n\n    // expand frame\n    const opts = {\n      ...options\n    };\n    opts.isFrame = true;\n    opts.keepFreeFloatingNodes = true;\n    const expandedFrame = await jsonld.expand(frame, opts);\n\n    // if the unexpanded frame includes a key expanding to @graph, frame the\n    // default graph, otherwise, the merged graph\n    const frameKeys = Object.keys(frame).map(key => _expandIri(activeCtx, key, {\n      vocab: true\n    }));\n    opts.merged = !frameKeys.includes('@graph');\n    opts.is11 = _processingMode(activeCtx, 1.1);\n\n    // do framing\n    const framed = _frameMergedOrDefault(expanded, expandedFrame, opts);\n    opts.graph = !options.omitGraph;\n    opts.skipExpansion = true;\n    opts.link = {};\n    opts.framing = true;\n    let compacted = await jsonld.compact(framed, frameContext, opts);\n\n    // replace @null with null, compacting arrays\n    opts.link = {};\n    compacted = _cleanupNull(compacted, opts);\n    return compacted;\n  };\n\n  /**\n   * **Experimental**\n   *\n   * Links a JSON-LD document's nodes in memory.\n   *\n   * @param input the JSON-LD document to link.\n   * @param [ctx] the JSON-LD context to apply.\n   * @param [options] the options to use:\n   *          [base] the base IRI to use.\n   *          [expandContext] a context to expand with.\n   *          [documentLoader(url, options)] the document loader.\n   *          [safe] true to use safe mode. (default: false)\n   *          [contextResolver] internal use only.\n   *\n   * @return a Promise that resolves to the linked output.\n   */\n  jsonld.link = async function (input, ctx, options) {\n    // API matches running frame with a wildcard frame and embed: '@link'\n    // get arguments\n    const frame = {};\n    if (ctx) {\n      frame['@context'] = ctx;\n    }\n    frame['@embed'] = '@link';\n    return jsonld.frame(input, frame, options);\n  };\n\n  /**\n   * Performs RDF dataset normalization on the given input. The input is JSON-LD\n   * unless the 'inputFormat' option is used. The output is an RDF dataset\n   * unless the 'format' option is used.\n   *\n   * Note: Canonicalization sets `safe` to `true` and `base` to `null` by\n   * default in order to produce safe outputs and \"fail closed\" by default. This\n   * is different from the other API transformations in this version which\n   * allow unsafe defaults (for cryptographic usage) in order to comply with the\n   * JSON-LD 1.1 specification.\n   *\n   * @param input the input to normalize as JSON-LD or as a format specified by\n   *          the 'inputFormat' option.\n   * @param [options] the options to use:\n   *          [algorithm] the normalization algorithm to use, `URDNA2015` or\n   *            `URGNA2012` (default: `URDNA2015`).\n   *          [base] the base IRI to use (default: `null`).\n   *          [expandContext] a context to expand with.\n   *          [skipExpansion] true to assume the input is expanded and skip\n   *            expansion, false not to, defaults to false.\n   *          [inputFormat] the format if input is not JSON-LD:\n   *            'application/n-quads' for N-Quads.\n   *          [format] the format if output is a string:\n   *            'application/n-quads' for N-Quads.\n   *          [documentLoader(url, options)] the document loader.\n   *          [useNative] true to use a native canonize algorithm\n   *          [safe] true to use safe mode. (default: true).\n   *          [contextResolver] internal use only.\n   *\n   * @return a Promise that resolves to the normalized output.\n   */\n  jsonld.normalize = jsonld.canonize = async function (input, options) {\n    if (arguments.length < 1) {\n      throw new TypeError('Could not canonize, too few arguments.');\n    }\n\n    // set default options\n    options = _setDefaults(options, {\n      base: _isString(input) ? input : null,\n      algorithm: 'URDNA2015',\n      skipExpansion: false,\n      safe: true,\n      contextResolver: new ContextResolver({\n        sharedCache: _resolvedContextCache\n      })\n    });\n    if ('inputFormat' in options) {\n      if (options.inputFormat !== 'application/n-quads' && options.inputFormat !== 'application/nquads') {\n        throw new JsonLdError('Unknown canonicalization input format.', 'jsonld.CanonizeError');\n      }\n      // TODO: `await` for async parsers\n      const parsedInput = NQuads.parse(input);\n\n      // do canonicalization\n      return canonize.canonize(parsedInput, options);\n    }\n\n    // convert to RDF dataset then do normalization\n    const opts = {\n      ...options\n    };\n    delete opts.format;\n    opts.produceGeneralizedRdf = false;\n    const dataset = await jsonld.toRDF(input, opts);\n\n    // do canonicalization\n    return canonize.canonize(dataset, options);\n  };\n\n  /**\n   * Converts an RDF dataset to JSON-LD.\n   *\n   * @param dataset a serialized string of RDF in a format specified by the\n   *          format option or an RDF dataset to convert.\n   * @param [options] the options to use:\n   *          [format] the format if dataset param must first be parsed:\n   *            'application/n-quads' for N-Quads (default).\n   *          [rdfParser] a custom RDF-parser to use to parse the dataset.\n   *          [useRdfType] true to use rdf:type, false to use @type\n   *            (default: false).\n   *          [useNativeTypes] true to convert XSD types into native types\n   *            (boolean, integer, double), false not to (default: false).\n   *          [rdfDirection] 'i18n-datatype' to support RDF transformation of\n   *             @direction (default: null).\n   *          [safe] true to use safe mode. (default: false)\n   *\n   * @return a Promise that resolves to the JSON-LD document.\n   */\n  jsonld.fromRDF = async function (dataset, options) {\n    if (arguments.length < 1) {\n      throw new TypeError('Could not convert from RDF, too few arguments.');\n    }\n\n    // set default options\n    options = _setDefaults(options, {\n      format: _isString(dataset) ? 'application/n-quads' : undefined\n    });\n    const {\n      format\n    } = options;\n    let {\n      rdfParser\n    } = options;\n\n    // handle special format\n    if (format) {\n      // check supported formats\n      rdfParser = rdfParser || _rdfParsers[format];\n      if (!rdfParser) {\n        throw new JsonLdError('Unknown input format.', 'jsonld.UnknownFormat', {\n          format\n        });\n      }\n    } else {\n      // no-op parser, assume dataset already parsed\n      rdfParser = () => dataset;\n    }\n\n    // rdfParser must be synchronous or return a promise, no callback support\n    const parsedDataset = await rdfParser(dataset);\n    return _fromRDF(parsedDataset, options);\n  };\n\n  /**\n   * Outputs the RDF dataset found in the given JSON-LD object.\n   *\n   * @param input the JSON-LD input.\n   * @param [options] the options to use:\n   *          [base] the base IRI to use.\n   *          [expandContext] a context to expand with.\n   *          [skipExpansion] true to assume the input is expanded and skip\n   *            expansion, false not to, defaults to false.\n   *          [format] the format to use to output a string:\n   *            'application/n-quads' for N-Quads.\n   *          [produceGeneralizedRdf] true to output generalized RDF, false\n   *            to produce only standard RDF (default: false).\n   *          [documentLoader(url, options)] the document loader.\n   *          [safe] true to use safe mode. (default: false)\n   *          [contextResolver] internal use only.\n   *\n   * @return a Promise that resolves to the RDF dataset.\n   */\n  jsonld.toRDF = async function (input, options) {\n    if (arguments.length < 1) {\n      throw new TypeError('Could not convert to RDF, too few arguments.');\n    }\n\n    // set default options\n    options = _setDefaults(options, {\n      base: _isString(input) ? input : '',\n      skipExpansion: false,\n      contextResolver: new ContextResolver({\n        sharedCache: _resolvedContextCache\n      })\n    });\n\n    // TODO: support toRDF custom map?\n    let expanded;\n    if (options.skipExpansion) {\n      expanded = input;\n    } else {\n      // expand input\n      expanded = await jsonld.expand(input, options);\n    }\n\n    // output RDF dataset\n    const dataset = _toRDF(expanded, options);\n    if (options.format) {\n      if (options.format === 'application/n-quads' || options.format === 'application/nquads') {\n        return NQuads.serialize(dataset);\n      }\n      throw new JsonLdError('Unknown output format.', 'jsonld.UnknownFormat', {\n        format: options.format\n      });\n    }\n    return dataset;\n  };\n\n  /**\n   * **Experimental**\n   *\n   * Recursively flattens the nodes in the given JSON-LD input into a merged\n   * map of node ID => node. All graphs will be merged into the default graph.\n   *\n   * @param input the JSON-LD input.\n   * @param [options] the options to use:\n   *          [base] the base IRI to use.\n   *          [expandContext] a context to expand with.\n   *          [issuer] a jsonld.IdentifierIssuer to use to label blank nodes.\n   *          [documentLoader(url, options)] the document loader.\n   *          [contextResolver] internal use only.\n   *\n   * @return a Promise that resolves to the merged node map.\n   */\n  jsonld.createNodeMap = async function (input, options) {\n    if (arguments.length < 1) {\n      throw new TypeError('Could not create node map, too few arguments.');\n    }\n\n    // set default options\n    options = _setDefaults(options, {\n      base: _isString(input) ? input : '',\n      contextResolver: new ContextResolver({\n        sharedCache: _resolvedContextCache\n      })\n    });\n\n    // expand input\n    const expanded = await jsonld.expand(input, options);\n    return _createMergedNodeMap(expanded, options);\n  };\n\n  /**\n   * **Experimental**\n   *\n   * Merges two or more JSON-LD documents into a single flattened document.\n   *\n   * @param docs the JSON-LD documents to merge together.\n   * @param ctx the context to use to compact the merged result, or null.\n   * @param [options] the options to use:\n   *          [base] the base IRI to use.\n   *          [expandContext] a context to expand with.\n   *          [issuer] a jsonld.IdentifierIssuer to use to label blank nodes.\n   *          [mergeNodes] true to merge properties for nodes with the same ID,\n   *            false to ignore new properties for nodes with the same ID once\n   *            the ID has been defined; note that this may not prevent merging\n   *            new properties where a node is in the `object` position\n   *            (default: true).\n   *          [documentLoader(url, options)] the document loader.\n   *          [safe] true to use safe mode. (default: false)\n   *          [contextResolver] internal use only.\n   *\n   * @return a Promise that resolves to the merged output.\n   */\n  jsonld.merge = async function (docs, ctx, options) {\n    if (arguments.length < 1) {\n      throw new TypeError('Could not merge, too few arguments.');\n    }\n    if (!_isArray(docs)) {\n      throw new TypeError('Could not merge, \"docs\" must be an array.');\n    }\n    if (typeof ctx === 'function') {\n      ctx = null;\n    } else {\n      ctx = ctx || null;\n    }\n\n    // set default options\n    options = _setDefaults(options, {\n      contextResolver: new ContextResolver({\n        sharedCache: _resolvedContextCache\n      })\n    });\n\n    // expand all documents\n    const expanded = await Promise.all(docs.map(doc => {\n      const opts = {\n        ...options\n      };\n      return jsonld.expand(doc, opts);\n    }));\n    let mergeNodes = true;\n    if ('mergeNodes' in options) {\n      mergeNodes = options.mergeNodes;\n    }\n    const issuer = options.issuer || new IdentifierIssuer('_:b');\n    const graphs = {\n      '@default': {}\n    };\n    for (let i = 0; i < expanded.length; ++i) {\n      // uniquely relabel blank nodes\n      const doc = util.relabelBlankNodes(expanded[i], {\n        issuer: new IdentifierIssuer('_:b' + i + '-')\n      });\n\n      // add nodes to the shared node map graphs if merging nodes, to a\n      // separate graph set if not\n      const _graphs = mergeNodes || i === 0 ? graphs : {\n        '@default': {}\n      };\n      _createNodeMap(doc, _graphs, '@default', issuer);\n      if (_graphs !== graphs) {\n        // merge document graphs but don't merge existing nodes\n        for (const graphName in _graphs) {\n          const _nodeMap = _graphs[graphName];\n          if (!(graphName in graphs)) {\n            graphs[graphName] = _nodeMap;\n            continue;\n          }\n          const nodeMap = graphs[graphName];\n          for (const key in _nodeMap) {\n            if (!(key in nodeMap)) {\n              nodeMap[key] = _nodeMap[key];\n            }\n          }\n        }\n      }\n    }\n\n    // add all non-default graphs to default graph\n    const defaultGraph = _mergeNodeMaps(graphs);\n\n    // produce flattened output\n    const flattened = [];\n    const keys = Object.keys(defaultGraph).sort();\n    for (let ki = 0; ki < keys.length; ++ki) {\n      const node = defaultGraph[keys[ki]];\n      // only add full subjects to top-level\n      if (!_isSubjectReference(node)) {\n        flattened.push(node);\n      }\n    }\n    if (ctx === null) {\n      return flattened;\n    }\n\n    // compact result (force @graph option to true, skip expansion)\n    options.graph = true;\n    options.skipExpansion = true;\n    const compacted = await jsonld.compact(flattened, ctx, options);\n    return compacted;\n  };\n\n  /**\n   * The default document loader for external documents.\n   *\n   * @param url the URL to load.\n   *\n   * @return a promise that resolves to the remote document.\n   */\n  Object.defineProperty(jsonld, 'documentLoader', {\n    get: () => jsonld._documentLoader,\n    set: v => jsonld._documentLoader = v\n  });\n  // default document loader not implemented\n  jsonld.documentLoader = async url => {\n    throw new JsonLdError('Could not retrieve a JSON-LD document from the URL. URL ' + 'dereferencing not implemented.', 'jsonld.LoadDocumentError', {\n      code: 'loading document failed',\n      url\n    });\n  };\n\n  /**\n   * Gets a remote JSON-LD document using the default document loader or\n   * one given in the passed options.\n   *\n   * @param url the URL to fetch.\n   * @param [options] the options to use:\n   *          [documentLoader] the document loader to use.\n   *\n   * @return a Promise that resolves to the retrieved remote document.\n   */\n  jsonld.get = async function (url, options) {\n    let load;\n    if (typeof options.documentLoader === 'function') {\n      load = options.documentLoader;\n    } else {\n      load = jsonld.documentLoader;\n    }\n    const remoteDoc = await load(url);\n    try {\n      if (!remoteDoc.document) {\n        throw new JsonLdError('No remote document found at the given URL.', 'jsonld.NullRemoteDocument');\n      }\n      if (_isString(remoteDoc.document)) {\n        remoteDoc.document = JSON.parse(remoteDoc.document);\n      }\n    } catch (e) {\n      throw new JsonLdError('Could not retrieve a JSON-LD document from the URL.', 'jsonld.LoadDocumentError', {\n        code: 'loading document failed',\n        cause: e,\n        remoteDoc\n      });\n    }\n    return remoteDoc;\n  };\n\n  /**\n   * Processes a local context, resolving any URLs as necessary, and returns a\n   * new active context.\n   *\n   * @param activeCtx the current active context.\n   * @param localCtx the local context to process.\n   * @param [options] the options to use:\n   *          [documentLoader(url, options)] the document loader.\n   *          [safe] true to use safe mode. (default: false)\n   *          [contextResolver] internal use only.\n   *\n   * @return a Promise that resolves to the new active context.\n   */\n  jsonld.processContext = async function (activeCtx, localCtx, options) {\n    // set default options\n    options = _setDefaults(options, {\n      base: '',\n      contextResolver: new ContextResolver({\n        sharedCache: _resolvedContextCache\n      })\n    });\n\n    // return initial context early for null context\n    if (localCtx === null) {\n      return _getInitialContext(options);\n    }\n\n    // get URLs in localCtx\n    localCtx = util.clone(localCtx);\n    if (!(_isObject(localCtx) && '@context' in localCtx)) {\n      localCtx = {\n        '@context': localCtx\n      };\n    }\n    return _processContext({\n      activeCtx,\n      localCtx,\n      options\n    });\n  };\n\n  // backwards compatibility\n  jsonld.getContextValue = require('./context').getContextValue;\n\n  /**\n   * Document loaders.\n   */\n  jsonld.documentLoaders = {};\n\n  /**\n   * Assigns the default document loader for external document URLs to a built-in\n   * default. Supported types currently include: 'xhr' and 'node'.\n   *\n   * @param type the type to set.\n   * @param [params] the parameters required to use the document loader.\n   */\n  jsonld.useDocumentLoader = function (type) {\n    if (!(type in jsonld.documentLoaders)) {\n      throw new JsonLdError('Unknown document loader type: \"' + type + '\"', 'jsonld.UnknownDocumentLoader', {\n        type\n      });\n    }\n\n    // set document loader\n    jsonld.documentLoader = jsonld.documentLoaders[type].apply(jsonld, Array.prototype.slice.call(arguments, 1));\n  };\n\n  /**\n   * Registers an RDF dataset parser by content-type, for use with\n   * jsonld.fromRDF. An RDF dataset parser will always be given one parameter,\n   * a string of input. An RDF dataset parser can be synchronous or\n   * asynchronous (by returning a promise).\n   *\n   * @param contentType the content-type for the parser.\n   * @param parser(input) the parser function (takes a string as a parameter\n   *          and either returns an RDF dataset or a Promise that resolves to one.\n   */\n  jsonld.registerRDFParser = function (contentType, parser) {\n    _rdfParsers[contentType] = parser;\n  };\n\n  /**\n   * Unregisters an RDF dataset parser by content-type.\n   *\n   * @param contentType the content-type for the parser.\n   */\n  jsonld.unregisterRDFParser = function (contentType) {\n    delete _rdfParsers[contentType];\n  };\n\n  // register the N-Quads RDF parser\n  jsonld.registerRDFParser('application/n-quads', NQuads.parse);\n  jsonld.registerRDFParser('application/nquads', NQuads.parse);\n\n  /* URL API */\n  jsonld.url = require('./url');\n\n  /* Events API and handlers */\n  jsonld.logEventHandler = _logEventHandler;\n  jsonld.logWarningEventHandler = _logWarningEventHandler;\n  jsonld.safeEventHandler = _safeEventHandler;\n  jsonld.setDefaultEventHandler = _setDefaultEventHandler;\n  jsonld.strictEventHandler = _strictEventHandler;\n  jsonld.unhandledEventHandler = _unhandledEventHandler;\n\n  /* Utility API */\n  jsonld.util = util;\n  // backwards compatibility\n  Object.assign(jsonld, util);\n\n  // reexpose API as jsonld.promises for backwards compatability\n  jsonld.promises = jsonld;\n\n  // backwards compatibility\n  jsonld.RequestQueue = require('./RequestQueue');\n\n  /* WebIDL API */\n  jsonld.JsonLdProcessor = require('./JsonLdProcessor')(jsonld);\n  platform.setupGlobals(jsonld);\n  platform.setupDocumentLoaders(jsonld);\n  function _setDefaults(options, _ref) {\n    let {\n      documentLoader = jsonld.documentLoader,\n      ...defaults\n    } = _ref;\n    // fail if obsolete options present\n    if (options && 'compactionMap' in options) {\n      throw new JsonLdError('\"compactionMap\" not supported.', 'jsonld.OptionsError');\n    }\n    if (options && 'expansionMap' in options) {\n      throw new JsonLdError('\"expansionMap\" not supported.', 'jsonld.OptionsError');\n    }\n    return Object.assign({}, {\n      documentLoader\n    }, defaults, options, {\n      eventHandler: _setupEventHandler({\n        options\n      })\n    });\n  }\n\n  // end of jsonld API `wrapper` factory\n  return jsonld;\n};\n\n// external APIs:\n\n// used to generate a new jsonld API instance\nconst factory = function () {\n  return wrapper(function () {\n    return factory();\n  });\n};\n\n// wrap the main jsonld API instance\nwrapper(factory);\n// export API\nmodule.exports = factory;","map":{"version":3,"names":["canonize","require","platform","util","ContextResolver","IdentifierIssuer","JsonLdError","LRU","NQuads","expand","_expand","flatten","_flatten","fromRDF","_fromRDF","toRDF","_toRDF","frameMergedOrDefault","_frameMergedOrDefault","cleanupNull","_cleanupNull","isArray","_isArray","isObject","_isObject","isString","_isString","isSubjectReference","_isSubjectReference","expandIri","_expandIri","getInitialContext","_getInitialContext","process","_processContext","processingMode","_processingMode","compact","_compact","compactIri","_compactIri","createNodeMap","_createNodeMap","createMergedNodeMap","_createMergedNodeMap","mergeNodeMaps","_mergeNodeMaps","logEventHandler","_logEventHandler","logWarningEventHandler","_logWarningEventHandler","safeEventHandler","_safeEventHandler","setDefaultEventHandler","_setDefaultEventHandler","setupEventHandler","_setupEventHandler","strictEventHandler","_strictEventHandler","unhandledEventHandler","_unhandledEventHandler","wrapper","jsonld","_rdfParsers","RESOLVED_CONTEXT_CACHE_MAX_SIZE","_resolvedContextCache","max","input","ctx","options","arguments","length","TypeError","code","_setDefaults","base","compactArrays","compactToRelative","graph","skipExpansion","link","issuer","contextResolver","sharedCache","expanded","activeCtx","processContext","compacted","element","clone","tmp","i","Object","keys","push","hasContext","graphAlias","iri","relativeTo","vocab","key","keepFreeFloatingNodes","toResolve","contextsToProcess","expandContext","defaultBase","remoteDoc","get","documentUrl","document","contextUrl","remoteContext","localCtx","flattened","frame","embed","explicit","requireAll","omitDefault","bnodesToClear","frameContext","hasOwnProperty","omitGraph","pruneBlankNodeIdentifiers","opts","isFrame","expandedFrame","frameKeys","map","merged","includes","is11","framed","framing","normalize","algorithm","safe","inputFormat","parsedInput","parse","format","produceGeneralizedRdf","dataset","undefined","rdfParser","parsedDataset","serialize","merge","docs","Promise","all","doc","mergeNodes","graphs","relabelBlankNodes","_graphs","graphName","_nodeMap","nodeMap","defaultGraph","sort","ki","node","defineProperty","_documentLoader","set","v","documentLoader","url","load","JSON","e","cause","getContextValue","documentLoaders","useDocumentLoader","type","apply","Array","prototype","slice","call","registerRDFParser","contentType","parser","unregisterRDFParser","assign","promises","RequestQueue","JsonLdProcessor","setupGlobals","setupDocumentLoaders","defaults","eventHandler","factory","module","exports"],"sources":["C:/Users/kevin/Desktop/EGS data/Egs-Ladder-Front/EGS-ladder-front/node_modules/jsonld/lib/jsonld.js"],"sourcesContent":["/**\n * A JavaScript implementation of the JSON-LD API.\n *\n * @author Dave Longley\n *\n * @license BSD 3-Clause License\n * Copyright (c) 2011-2022 Digital Bazaar, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n *\n * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer in the\n * documentation and/or other materials provided with the distribution.\n *\n * Neither the name of the Digital Bazaar, Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\n * IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nconst canonize = require('rdf-canonize');\nconst platform = require('./platform');\nconst util = require('./util');\nconst ContextResolver = require('./ContextResolver');\nconst IdentifierIssuer = util.IdentifierIssuer;\nconst JsonLdError = require('./JsonLdError');\nconst LRU = require('lru-cache');\nconst NQuads = require('./NQuads');\n\nconst {expand: _expand} = require('./expand');\nconst {flatten: _flatten} = require('./flatten');\nconst {fromRDF: _fromRDF} = require('./fromRdf');\nconst {toRDF: _toRDF} = require('./toRdf');\n\nconst {\n  frameMergedOrDefault: _frameMergedOrDefault,\n  cleanupNull: _cleanupNull\n} = require('./frame');\n\nconst {\n  isArray: _isArray,\n  isObject: _isObject,\n  isString: _isString\n} = require('./types');\n\nconst {\n  isSubjectReference: _isSubjectReference,\n} = require('./graphTypes');\n\nconst {\n  expandIri: _expandIri,\n  getInitialContext: _getInitialContext,\n  process: _processContext,\n  processingMode: _processingMode\n} = require('./context');\n\nconst {\n  compact: _compact,\n  compactIri: _compactIri\n} = require('./compact');\n\nconst {\n  createNodeMap: _createNodeMap,\n  createMergedNodeMap: _createMergedNodeMap,\n  mergeNodeMaps: _mergeNodeMaps\n} = require('./nodeMap');\n\nconst {\n  logEventHandler: _logEventHandler,\n  logWarningEventHandler: _logWarningEventHandler,\n  safeEventHandler: _safeEventHandler,\n  setDefaultEventHandler: _setDefaultEventHandler,\n  setupEventHandler: _setupEventHandler,\n  strictEventHandler: _strictEventHandler,\n  unhandledEventHandler: _unhandledEventHandler\n} = require('./events');\n\n/* eslint-disable indent */\n// attaches jsonld API to the given object\nconst wrapper = function(jsonld) {\n\n/** Registered RDF dataset parsers hashed by content-type. */\nconst _rdfParsers = {};\n\n// resolved context cache\n// TODO: consider basing max on context size rather than number\nconst RESOLVED_CONTEXT_CACHE_MAX_SIZE = 100;\nconst _resolvedContextCache = new LRU({max: RESOLVED_CONTEXT_CACHE_MAX_SIZE});\n\n/* Core API */\n\n/**\n * Performs JSON-LD compaction.\n *\n * @param input the JSON-LD input to compact.\n * @param ctx the context to compact with.\n * @param [options] options to use:\n *          [base] the base IRI to use.\n *          [compactArrays] true to compact arrays to single values when\n *            appropriate, false not to (default: true).\n *          [compactToRelative] true to compact IRIs to be relative to document\n *            base, false to keep absolute (default: true)\n *          [graph] true to always output a top-level graph (default: false).\n *          [expandContext] a context to expand with.\n *          [skipExpansion] true to assume the input is expanded and skip\n *            expansion, false not to, defaults to false.\n *          [documentLoader(url, options)] the document loader.\n *          [framing] true if compaction is occuring during a framing operation.\n *          [safe] true to use safe mode. (default: false)\n *          [contextResolver] internal use only.\n *\n * @return a Promise that resolves to the compacted output.\n */\njsonld.compact = async function(input, ctx, options) {\n  if(arguments.length < 2) {\n    throw new TypeError('Could not compact, too few arguments.');\n  }\n\n  if(ctx === null) {\n    throw new JsonLdError(\n      'The compaction context must not be null.',\n      'jsonld.CompactError', {code: 'invalid local context'});\n  }\n\n  // nothing to compact\n  if(input === null) {\n    return null;\n  }\n\n  // set default options\n  options = _setDefaults(options, {\n    base: _isString(input) ? input : '',\n    compactArrays: true,\n    compactToRelative: true,\n    graph: false,\n    skipExpansion: false,\n    link: false,\n    issuer: new IdentifierIssuer('_:b'),\n    contextResolver: new ContextResolver(\n      {sharedCache: _resolvedContextCache})\n  });\n  if(options.link) {\n    // force skip expansion when linking, \"link\" is not part of the public\n    // API, it should only be called from framing\n    options.skipExpansion = true;\n  }\n  if(!options.compactToRelative) {\n    delete options.base;\n  }\n\n  // expand input\n  let expanded;\n  if(options.skipExpansion) {\n    expanded = input;\n  } else {\n    expanded = await jsonld.expand(input, options);\n  }\n\n  // process context\n  const activeCtx = await jsonld.processContext(\n    _getInitialContext(options), ctx, options);\n\n  // do compaction\n  let compacted = await _compact({\n    activeCtx,\n    element: expanded,\n    options\n  });\n\n  // perform clean up\n  if(options.compactArrays && !options.graph && _isArray(compacted)) {\n    if(compacted.length === 1) {\n      // simplify to a single item\n      compacted = compacted[0];\n    } else if(compacted.length === 0) {\n      // simplify to an empty object\n      compacted = {};\n    }\n  } else if(options.graph && _isObject(compacted)) {\n    // always use array if graph option is on\n    compacted = [compacted];\n  }\n\n  // follow @context key\n  if(_isObject(ctx) && '@context' in ctx) {\n    ctx = ctx['@context'];\n  }\n\n  // build output context\n  ctx = util.clone(ctx);\n  if(!_isArray(ctx)) {\n    ctx = [ctx];\n  }\n  // remove empty contexts\n  const tmp = ctx;\n  ctx = [];\n  for(let i = 0; i < tmp.length; ++i) {\n    if(!_isObject(tmp[i]) || Object.keys(tmp[i]).length > 0) {\n      ctx.push(tmp[i]);\n    }\n  }\n\n  // remove array if only one context\n  const hasContext = (ctx.length > 0);\n  if(ctx.length === 1) {\n    ctx = ctx[0];\n  }\n\n  // add context and/or @graph\n  if(_isArray(compacted)) {\n    // use '@graph' keyword\n    const graphAlias = _compactIri({\n      activeCtx, iri: '@graph', relativeTo: {vocab: true}\n    });\n    const graph = compacted;\n    compacted = {};\n    if(hasContext) {\n      compacted['@context'] = ctx;\n    }\n    compacted[graphAlias] = graph;\n  } else if(_isObject(compacted) && hasContext) {\n    // reorder keys so @context is first\n    const graph = compacted;\n    compacted = {'@context': ctx};\n    for(const key in graph) {\n      compacted[key] = graph[key];\n    }\n  }\n\n  return compacted;\n};\n\n/**\n * Performs JSON-LD expansion.\n *\n * @param input the JSON-LD input to expand.\n * @param [options] the options to use:\n *          [base] the base IRI to use.\n *          [expandContext] a context to expand with.\n *          [keepFreeFloatingNodes] true to keep free-floating nodes,\n *            false not to, defaults to false.\n *          [documentLoader(url, options)] the document loader.\n *          [safe] true to use safe mode. (default: false)\n *          [contextResolver] internal use only.\n *\n * @return a Promise that resolves to the expanded output.\n */\njsonld.expand = async function(input, options) {\n  if(arguments.length < 1) {\n    throw new TypeError('Could not expand, too few arguments.');\n  }\n\n  // set default options\n  options = _setDefaults(options, {\n    keepFreeFloatingNodes: false,\n    contextResolver: new ContextResolver(\n      {sharedCache: _resolvedContextCache})\n  });\n\n  // build set of objects that may have @contexts to resolve\n  const toResolve = {};\n\n  // build set of contexts to process prior to expansion\n  const contextsToProcess = [];\n\n  // if an `expandContext` has been given ensure it gets resolved\n  if('expandContext' in options) {\n    const expandContext = util.clone(options.expandContext);\n    if(_isObject(expandContext) && '@context' in expandContext) {\n      toResolve.expandContext = expandContext;\n    } else {\n      toResolve.expandContext = {'@context': expandContext};\n    }\n    contextsToProcess.push(toResolve.expandContext);\n  }\n\n  // if input is a string, attempt to dereference remote document\n  let defaultBase;\n  if(!_isString(input)) {\n    // input is not a URL, do not need to retrieve it first\n    toResolve.input = util.clone(input);\n  } else {\n    // load remote doc\n    const remoteDoc = await jsonld.get(input, options);\n    defaultBase = remoteDoc.documentUrl;\n    toResolve.input = remoteDoc.document;\n    if(remoteDoc.contextUrl) {\n      // context included in HTTP link header and must be resolved\n      toResolve.remoteContext = {'@context': remoteDoc.contextUrl};\n      contextsToProcess.push(toResolve.remoteContext);\n    }\n  }\n\n  // set default base\n  if(!('base' in options)) {\n    options.base = defaultBase || '';\n  }\n\n  // process any additional contexts\n  let activeCtx = _getInitialContext(options);\n  for(const localCtx of contextsToProcess) {\n    activeCtx = await _processContext({activeCtx, localCtx, options});\n  }\n\n  // expand resolved input\n  let expanded = await _expand({\n    activeCtx,\n    element: toResolve.input,\n    options\n  });\n\n  // optimize away @graph with no other properties\n  if(_isObject(expanded) && ('@graph' in expanded) &&\n    Object.keys(expanded).length === 1) {\n    expanded = expanded['@graph'];\n  } else if(expanded === null) {\n    expanded = [];\n  }\n\n  // normalize to an array\n  if(!_isArray(expanded)) {\n    expanded = [expanded];\n  }\n\n  return expanded;\n};\n\n/**\n * Performs JSON-LD flattening.\n *\n * @param input the JSON-LD to flatten.\n * @param ctx the context to use to compact the flattened output, or null.\n * @param [options] the options to use:\n *          [base] the base IRI to use.\n *          [expandContext] a context to expand with.\n *          [documentLoader(url, options)] the document loader.\n *          [contextResolver] internal use only.\n *\n * @return a Promise that resolves to the flattened output.\n */\njsonld.flatten = async function(input, ctx, options) {\n  if(arguments.length < 1) {\n    return new TypeError('Could not flatten, too few arguments.');\n  }\n\n  if(typeof ctx === 'function') {\n    ctx = null;\n  } else {\n    ctx = ctx || null;\n  }\n\n  // set default options\n  options = _setDefaults(options, {\n    base: _isString(input) ? input : '',\n    contextResolver: new ContextResolver(\n      {sharedCache: _resolvedContextCache})\n  });\n\n  // expand input\n  const expanded = await jsonld.expand(input, options);\n\n  // do flattening\n  const flattened = _flatten(expanded);\n\n  if(ctx === null) {\n    // no compaction required\n    return flattened;\n  }\n\n  // compact result (force @graph option to true, skip expansion)\n  options.graph = true;\n  options.skipExpansion = true;\n  const compacted = await jsonld.compact(flattened, ctx, options);\n\n  return compacted;\n};\n\n/**\n * Performs JSON-LD framing.\n *\n * @param input the JSON-LD input to frame.\n * @param frame the JSON-LD frame to use.\n * @param [options] the framing options.\n *          [base] the base IRI to use.\n *          [expandContext] a context to expand with.\n *          [embed] default @embed flag: '@last', '@always', '@never', '@link'\n *            (default: '@last').\n *          [explicit] default @explicit flag (default: false).\n *          [requireAll] default @requireAll flag (default: true).\n *          [omitDefault] default @omitDefault flag (default: false).\n *          [documentLoader(url, options)] the document loader.\n *          [safe] true to use safe mode. (default: false)\n *          [contextResolver] internal use only.\n *\n * @return a Promise that resolves to the framed output.\n */\njsonld.frame = async function(input, frame, options) {\n  if(arguments.length < 2) {\n    throw new TypeError('Could not frame, too few arguments.');\n  }\n\n  // set default options\n  options = _setDefaults(options, {\n    base: _isString(input) ? input : '',\n    embed: '@once',\n    explicit: false,\n    requireAll: false,\n    omitDefault: false,\n    bnodesToClear: [],\n    contextResolver: new ContextResolver(\n      {sharedCache: _resolvedContextCache})\n  });\n\n  // if frame is a string, attempt to dereference remote document\n  if(_isString(frame)) {\n    // load remote doc\n    const remoteDoc = await jsonld.get(frame, options);\n    frame = remoteDoc.document;\n\n    if(remoteDoc.contextUrl) {\n      // inject link header @context into frame\n      let ctx = frame['@context'];\n      if(!ctx) {\n        ctx = remoteDoc.contextUrl;\n      } else if(_isArray(ctx)) {\n        ctx.push(remoteDoc.contextUrl);\n      } else {\n        ctx = [ctx, remoteDoc.contextUrl];\n      }\n      frame['@context'] = ctx;\n    }\n  }\n\n  const frameContext = frame ? frame['@context'] || {} : {};\n\n  // process context\n  const activeCtx = await jsonld.processContext(\n    _getInitialContext(options), frameContext, options);\n\n  // mode specific defaults\n  if(!options.hasOwnProperty('omitGraph')) {\n    options.omitGraph = _processingMode(activeCtx, 1.1);\n  }\n  if(!options.hasOwnProperty('pruneBlankNodeIdentifiers')) {\n    options.pruneBlankNodeIdentifiers = _processingMode(activeCtx, 1.1);\n  }\n\n  // expand input\n  const expanded = await jsonld.expand(input, options);\n\n  // expand frame\n  const opts = {...options};\n  opts.isFrame = true;\n  opts.keepFreeFloatingNodes = true;\n  const expandedFrame = await jsonld.expand(frame, opts);\n\n  // if the unexpanded frame includes a key expanding to @graph, frame the\n  // default graph, otherwise, the merged graph\n  const frameKeys = Object.keys(frame)\n    .map(key => _expandIri(activeCtx, key, {vocab: true}));\n  opts.merged = !frameKeys.includes('@graph');\n  opts.is11 = _processingMode(activeCtx, 1.1);\n\n  // do framing\n  const framed = _frameMergedOrDefault(expanded, expandedFrame, opts);\n\n  opts.graph = !options.omitGraph;\n  opts.skipExpansion = true;\n  opts.link = {};\n  opts.framing = true;\n  let compacted = await jsonld.compact(framed, frameContext, opts);\n\n  // replace @null with null, compacting arrays\n  opts.link = {};\n  compacted = _cleanupNull(compacted, opts);\n\n  return compacted;\n};\n\n/**\n * **Experimental**\n *\n * Links a JSON-LD document's nodes in memory.\n *\n * @param input the JSON-LD document to link.\n * @param [ctx] the JSON-LD context to apply.\n * @param [options] the options to use:\n *          [base] the base IRI to use.\n *          [expandContext] a context to expand with.\n *          [documentLoader(url, options)] the document loader.\n *          [safe] true to use safe mode. (default: false)\n *          [contextResolver] internal use only.\n *\n * @return a Promise that resolves to the linked output.\n */\njsonld.link = async function(input, ctx, options) {\n  // API matches running frame with a wildcard frame and embed: '@link'\n  // get arguments\n  const frame = {};\n  if(ctx) {\n    frame['@context'] = ctx;\n  }\n  frame['@embed'] = '@link';\n  return jsonld.frame(input, frame, options);\n};\n\n/**\n * Performs RDF dataset normalization on the given input. The input is JSON-LD\n * unless the 'inputFormat' option is used. The output is an RDF dataset\n * unless the 'format' option is used.\n *\n * Note: Canonicalization sets `safe` to `true` and `base` to `null` by\n * default in order to produce safe outputs and \"fail closed\" by default. This\n * is different from the other API transformations in this version which\n * allow unsafe defaults (for cryptographic usage) in order to comply with the\n * JSON-LD 1.1 specification.\n *\n * @param input the input to normalize as JSON-LD or as a format specified by\n *          the 'inputFormat' option.\n * @param [options] the options to use:\n *          [algorithm] the normalization algorithm to use, `URDNA2015` or\n *            `URGNA2012` (default: `URDNA2015`).\n *          [base] the base IRI to use (default: `null`).\n *          [expandContext] a context to expand with.\n *          [skipExpansion] true to assume the input is expanded and skip\n *            expansion, false not to, defaults to false.\n *          [inputFormat] the format if input is not JSON-LD:\n *            'application/n-quads' for N-Quads.\n *          [format] the format if output is a string:\n *            'application/n-quads' for N-Quads.\n *          [documentLoader(url, options)] the document loader.\n *          [useNative] true to use a native canonize algorithm\n *          [safe] true to use safe mode. (default: true).\n *          [contextResolver] internal use only.\n *\n * @return a Promise that resolves to the normalized output.\n */\njsonld.normalize = jsonld.canonize = async function(input, options) {\n  if(arguments.length < 1) {\n    throw new TypeError('Could not canonize, too few arguments.');\n  }\n\n  // set default options\n  options = _setDefaults(options, {\n    base: _isString(input) ? input : null,\n    algorithm: 'URDNA2015',\n    skipExpansion: false,\n    safe: true,\n    contextResolver: new ContextResolver(\n      {sharedCache: _resolvedContextCache})\n  });\n  if('inputFormat' in options) {\n    if(options.inputFormat !== 'application/n-quads' &&\n      options.inputFormat !== 'application/nquads') {\n      throw new JsonLdError(\n        'Unknown canonicalization input format.',\n        'jsonld.CanonizeError');\n    }\n    // TODO: `await` for async parsers\n    const parsedInput = NQuads.parse(input);\n\n    // do canonicalization\n    return canonize.canonize(parsedInput, options);\n  }\n\n  // convert to RDF dataset then do normalization\n  const opts = {...options};\n  delete opts.format;\n  opts.produceGeneralizedRdf = false;\n  const dataset = await jsonld.toRDF(input, opts);\n\n  // do canonicalization\n  return canonize.canonize(dataset, options);\n};\n\n/**\n * Converts an RDF dataset to JSON-LD.\n *\n * @param dataset a serialized string of RDF in a format specified by the\n *          format option or an RDF dataset to convert.\n * @param [options] the options to use:\n *          [format] the format if dataset param must first be parsed:\n *            'application/n-quads' for N-Quads (default).\n *          [rdfParser] a custom RDF-parser to use to parse the dataset.\n *          [useRdfType] true to use rdf:type, false to use @type\n *            (default: false).\n *          [useNativeTypes] true to convert XSD types into native types\n *            (boolean, integer, double), false not to (default: false).\n *          [rdfDirection] 'i18n-datatype' to support RDF transformation of\n *             @direction (default: null).\n *          [safe] true to use safe mode. (default: false)\n *\n * @return a Promise that resolves to the JSON-LD document.\n */\njsonld.fromRDF = async function(dataset, options) {\n  if(arguments.length < 1) {\n    throw new TypeError('Could not convert from RDF, too few arguments.');\n  }\n\n  // set default options\n  options = _setDefaults(options, {\n    format: _isString(dataset) ? 'application/n-quads' : undefined\n  });\n\n  const {format} = options;\n  let {rdfParser} = options;\n\n  // handle special format\n  if(format) {\n    // check supported formats\n    rdfParser = rdfParser || _rdfParsers[format];\n    if(!rdfParser) {\n      throw new JsonLdError(\n        'Unknown input format.',\n        'jsonld.UnknownFormat', {format});\n    }\n  } else {\n    // no-op parser, assume dataset already parsed\n    rdfParser = () => dataset;\n  }\n\n  // rdfParser must be synchronous or return a promise, no callback support\n  const parsedDataset = await rdfParser(dataset);\n  return _fromRDF(parsedDataset, options);\n};\n\n/**\n * Outputs the RDF dataset found in the given JSON-LD object.\n *\n * @param input the JSON-LD input.\n * @param [options] the options to use:\n *          [base] the base IRI to use.\n *          [expandContext] a context to expand with.\n *          [skipExpansion] true to assume the input is expanded and skip\n *            expansion, false not to, defaults to false.\n *          [format] the format to use to output a string:\n *            'application/n-quads' for N-Quads.\n *          [produceGeneralizedRdf] true to output generalized RDF, false\n *            to produce only standard RDF (default: false).\n *          [documentLoader(url, options)] the document loader.\n *          [safe] true to use safe mode. (default: false)\n *          [contextResolver] internal use only.\n *\n * @return a Promise that resolves to the RDF dataset.\n */\njsonld.toRDF = async function(input, options) {\n  if(arguments.length < 1) {\n    throw new TypeError('Could not convert to RDF, too few arguments.');\n  }\n\n  // set default options\n  options = _setDefaults(options, {\n    base: _isString(input) ? input : '',\n    skipExpansion: false,\n    contextResolver: new ContextResolver(\n      {sharedCache: _resolvedContextCache})\n  });\n\n  // TODO: support toRDF custom map?\n  let expanded;\n  if(options.skipExpansion) {\n    expanded = input;\n  } else {\n    // expand input\n    expanded = await jsonld.expand(input, options);\n  }\n\n  // output RDF dataset\n  const dataset = _toRDF(expanded, options);\n  if(options.format) {\n    if(options.format === 'application/n-quads' ||\n      options.format === 'application/nquads') {\n      return NQuads.serialize(dataset);\n    }\n    throw new JsonLdError(\n      'Unknown output format.',\n      'jsonld.UnknownFormat', {format: options.format});\n  }\n\n  return dataset;\n};\n\n/**\n * **Experimental**\n *\n * Recursively flattens the nodes in the given JSON-LD input into a merged\n * map of node ID => node. All graphs will be merged into the default graph.\n *\n * @param input the JSON-LD input.\n * @param [options] the options to use:\n *          [base] the base IRI to use.\n *          [expandContext] a context to expand with.\n *          [issuer] a jsonld.IdentifierIssuer to use to label blank nodes.\n *          [documentLoader(url, options)] the document loader.\n *          [contextResolver] internal use only.\n *\n * @return a Promise that resolves to the merged node map.\n */\njsonld.createNodeMap = async function(input, options) {\n  if(arguments.length < 1) {\n    throw new TypeError('Could not create node map, too few arguments.');\n  }\n\n  // set default options\n  options = _setDefaults(options, {\n    base: _isString(input) ? input : '',\n    contextResolver: new ContextResolver(\n      {sharedCache: _resolvedContextCache})\n  });\n\n  // expand input\n  const expanded = await jsonld.expand(input, options);\n\n  return _createMergedNodeMap(expanded, options);\n};\n\n/**\n * **Experimental**\n *\n * Merges two or more JSON-LD documents into a single flattened document.\n *\n * @param docs the JSON-LD documents to merge together.\n * @param ctx the context to use to compact the merged result, or null.\n * @param [options] the options to use:\n *          [base] the base IRI to use.\n *          [expandContext] a context to expand with.\n *          [issuer] a jsonld.IdentifierIssuer to use to label blank nodes.\n *          [mergeNodes] true to merge properties for nodes with the same ID,\n *            false to ignore new properties for nodes with the same ID once\n *            the ID has been defined; note that this may not prevent merging\n *            new properties where a node is in the `object` position\n *            (default: true).\n *          [documentLoader(url, options)] the document loader.\n *          [safe] true to use safe mode. (default: false)\n *          [contextResolver] internal use only.\n *\n * @return a Promise that resolves to the merged output.\n */\njsonld.merge = async function(docs, ctx, options) {\n  if(arguments.length < 1) {\n    throw new TypeError('Could not merge, too few arguments.');\n  }\n  if(!_isArray(docs)) {\n    throw new TypeError('Could not merge, \"docs\" must be an array.');\n  }\n\n  if(typeof ctx === 'function') {\n    ctx = null;\n  } else {\n    ctx = ctx || null;\n  }\n\n  // set default options\n  options = _setDefaults(options, {\n    contextResolver: new ContextResolver(\n      {sharedCache: _resolvedContextCache})\n  });\n\n  // expand all documents\n  const expanded = await Promise.all(docs.map(doc => {\n    const opts = {...options};\n    return jsonld.expand(doc, opts);\n  }));\n\n  let mergeNodes = true;\n  if('mergeNodes' in options) {\n    mergeNodes = options.mergeNodes;\n  }\n\n  const issuer = options.issuer || new IdentifierIssuer('_:b');\n  const graphs = {'@default': {}};\n\n  for(let i = 0; i < expanded.length; ++i) {\n    // uniquely relabel blank nodes\n    const doc = util.relabelBlankNodes(expanded[i], {\n      issuer: new IdentifierIssuer('_:b' + i + '-')\n    });\n\n    // add nodes to the shared node map graphs if merging nodes, to a\n    // separate graph set if not\n    const _graphs = (mergeNodes || i === 0) ? graphs : {'@default': {}};\n    _createNodeMap(doc, _graphs, '@default', issuer);\n\n    if(_graphs !== graphs) {\n      // merge document graphs but don't merge existing nodes\n      for(const graphName in _graphs) {\n        const _nodeMap = _graphs[graphName];\n        if(!(graphName in graphs)) {\n          graphs[graphName] = _nodeMap;\n          continue;\n        }\n        const nodeMap = graphs[graphName];\n        for(const key in _nodeMap) {\n          if(!(key in nodeMap)) {\n            nodeMap[key] = _nodeMap[key];\n          }\n        }\n      }\n    }\n  }\n\n  // add all non-default graphs to default graph\n  const defaultGraph = _mergeNodeMaps(graphs);\n\n  // produce flattened output\n  const flattened = [];\n  const keys = Object.keys(defaultGraph).sort();\n  for(let ki = 0; ki < keys.length; ++ki) {\n    const node = defaultGraph[keys[ki]];\n    // only add full subjects to top-level\n    if(!_isSubjectReference(node)) {\n      flattened.push(node);\n    }\n  }\n\n  if(ctx === null) {\n    return flattened;\n  }\n\n  // compact result (force @graph option to true, skip expansion)\n  options.graph = true;\n  options.skipExpansion = true;\n  const compacted = await jsonld.compact(flattened, ctx, options);\n\n  return compacted;\n};\n\n/**\n * The default document loader for external documents.\n *\n * @param url the URL to load.\n *\n * @return a promise that resolves to the remote document.\n */\nObject.defineProperty(jsonld, 'documentLoader', {\n  get: () => jsonld._documentLoader,\n  set: v => jsonld._documentLoader = v\n});\n// default document loader not implemented\njsonld.documentLoader = async url => {\n  throw new JsonLdError(\n    'Could not retrieve a JSON-LD document from the URL. URL ' +\n    'dereferencing not implemented.', 'jsonld.LoadDocumentError',\n    {code: 'loading document failed', url});\n};\n\n/**\n * Gets a remote JSON-LD document using the default document loader or\n * one given in the passed options.\n *\n * @param url the URL to fetch.\n * @param [options] the options to use:\n *          [documentLoader] the document loader to use.\n *\n * @return a Promise that resolves to the retrieved remote document.\n */\njsonld.get = async function(url, options) {\n  let load;\n  if(typeof options.documentLoader === 'function') {\n    load = options.documentLoader;\n  } else {\n    load = jsonld.documentLoader;\n  }\n\n  const remoteDoc = await load(url);\n\n  try {\n    if(!remoteDoc.document) {\n      throw new JsonLdError(\n        'No remote document found at the given URL.',\n        'jsonld.NullRemoteDocument');\n    }\n    if(_isString(remoteDoc.document)) {\n      remoteDoc.document = JSON.parse(remoteDoc.document);\n    }\n  } catch(e) {\n    throw new JsonLdError(\n      'Could not retrieve a JSON-LD document from the URL.',\n      'jsonld.LoadDocumentError', {\n        code: 'loading document failed',\n        cause: e,\n        remoteDoc\n      });\n  }\n\n  return remoteDoc;\n};\n\n/**\n * Processes a local context, resolving any URLs as necessary, and returns a\n * new active context.\n *\n * @param activeCtx the current active context.\n * @param localCtx the local context to process.\n * @param [options] the options to use:\n *          [documentLoader(url, options)] the document loader.\n *          [safe] true to use safe mode. (default: false)\n *          [contextResolver] internal use only.\n *\n * @return a Promise that resolves to the new active context.\n */\njsonld.processContext = async function(\n  activeCtx, localCtx, options) {\n  // set default options\n  options = _setDefaults(options, {\n    base: '',\n    contextResolver: new ContextResolver(\n      {sharedCache: _resolvedContextCache})\n  });\n\n  // return initial context early for null context\n  if(localCtx === null) {\n    return _getInitialContext(options);\n  }\n\n  // get URLs in localCtx\n  localCtx = util.clone(localCtx);\n  if(!(_isObject(localCtx) && '@context' in localCtx)) {\n    localCtx = {'@context': localCtx};\n  }\n\n  return _processContext({activeCtx, localCtx, options});\n};\n\n// backwards compatibility\njsonld.getContextValue = require('./context').getContextValue;\n\n/**\n * Document loaders.\n */\njsonld.documentLoaders = {};\n\n/**\n * Assigns the default document loader for external document URLs to a built-in\n * default. Supported types currently include: 'xhr' and 'node'.\n *\n * @param type the type to set.\n * @param [params] the parameters required to use the document loader.\n */\njsonld.useDocumentLoader = function(type) {\n  if(!(type in jsonld.documentLoaders)) {\n    throw new JsonLdError(\n      'Unknown document loader type: \"' + type + '\"',\n      'jsonld.UnknownDocumentLoader',\n      {type});\n  }\n\n  // set document loader\n  jsonld.documentLoader = jsonld.documentLoaders[type].apply(\n    jsonld, Array.prototype.slice.call(arguments, 1));\n};\n\n/**\n * Registers an RDF dataset parser by content-type, for use with\n * jsonld.fromRDF. An RDF dataset parser will always be given one parameter,\n * a string of input. An RDF dataset parser can be synchronous or\n * asynchronous (by returning a promise).\n *\n * @param contentType the content-type for the parser.\n * @param parser(input) the parser function (takes a string as a parameter\n *          and either returns an RDF dataset or a Promise that resolves to one.\n */\njsonld.registerRDFParser = function(contentType, parser) {\n  _rdfParsers[contentType] = parser;\n};\n\n/**\n * Unregisters an RDF dataset parser by content-type.\n *\n * @param contentType the content-type for the parser.\n */\njsonld.unregisterRDFParser = function(contentType) {\n  delete _rdfParsers[contentType];\n};\n\n// register the N-Quads RDF parser\njsonld.registerRDFParser('application/n-quads', NQuads.parse);\njsonld.registerRDFParser('application/nquads', NQuads.parse);\n\n/* URL API */\njsonld.url = require('./url');\n\n/* Events API and handlers */\njsonld.logEventHandler = _logEventHandler;\njsonld.logWarningEventHandler = _logWarningEventHandler;\njsonld.safeEventHandler = _safeEventHandler;\njsonld.setDefaultEventHandler = _setDefaultEventHandler;\njsonld.strictEventHandler = _strictEventHandler;\njsonld.unhandledEventHandler = _unhandledEventHandler;\n\n/* Utility API */\njsonld.util = util;\n// backwards compatibility\nObject.assign(jsonld, util);\n\n// reexpose API as jsonld.promises for backwards compatability\njsonld.promises = jsonld;\n\n// backwards compatibility\njsonld.RequestQueue = require('./RequestQueue');\n\n/* WebIDL API */\njsonld.JsonLdProcessor = require('./JsonLdProcessor')(jsonld);\n\nplatform.setupGlobals(jsonld);\nplatform.setupDocumentLoaders(jsonld);\n\nfunction _setDefaults(options, {\n  documentLoader = jsonld.documentLoader,\n  ...defaults\n}) {\n  // fail if obsolete options present\n  if(options && 'compactionMap' in options) {\n    throw new JsonLdError(\n      '\"compactionMap\" not supported.',\n      'jsonld.OptionsError');\n  }\n  if(options && 'expansionMap' in options) {\n    throw new JsonLdError(\n      '\"expansionMap\" not supported.',\n      'jsonld.OptionsError');\n  }\n  return Object.assign(\n    {},\n    {documentLoader},\n    defaults,\n    options,\n    {eventHandler: _setupEventHandler({options})}\n  );\n}\n\n// end of jsonld API `wrapper` factory\nreturn jsonld;\n};\n\n// external APIs:\n\n// used to generate a new jsonld API instance\nconst factory = function() {\n  return wrapper(function() {\n    return factory();\n  });\n};\n\n// wrap the main jsonld API instance\nwrapper(factory);\n// export API\nmodule.exports = factory;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,cAAc,CAAC;AACxC,MAAMC,QAAQ,GAAGD,OAAO,CAAC,YAAY,CAAC;AACtC,MAAME,IAAI,GAAGF,OAAO,CAAC,QAAQ,CAAC;AAC9B,MAAMG,eAAe,GAAGH,OAAO,CAAC,mBAAmB,CAAC;AACpD,MAAMI,gBAAgB,GAAGF,IAAI,CAACE,gBAAgB;AAC9C,MAAMC,WAAW,GAAGL,OAAO,CAAC,eAAe,CAAC;AAC5C,MAAMM,GAAG,GAAGN,OAAO,CAAC,WAAW,CAAC;AAChC,MAAMO,MAAM,GAAGP,OAAO,CAAC,UAAU,CAAC;AAElC,MAAM;EAACQ,MAAM,EAAEC;AAAO,CAAC,GAAGT,OAAO,CAAC,UAAU,CAAC;AAC7C,MAAM;EAACU,OAAO,EAAEC;AAAQ,CAAC,GAAGX,OAAO,CAAC,WAAW,CAAC;AAChD,MAAM;EAACY,OAAO,EAAEC;AAAQ,CAAC,GAAGb,OAAO,CAAC,WAAW,CAAC;AAChD,MAAM;EAACc,KAAK,EAAEC;AAAM,CAAC,GAAGf,OAAO,CAAC,SAAS,CAAC;AAE1C,MAAM;EACJgB,oBAAoB,EAAEC,qBAAqB;EAC3CC,WAAW,EAAEC;AACf,CAAC,GAAGnB,OAAO,CAAC,SAAS,CAAC;AAEtB,MAAM;EACJoB,OAAO,EAAEC,QAAQ;EACjBC,QAAQ,EAAEC,SAAS;EACnBC,QAAQ,EAAEC;AACZ,CAAC,GAAGzB,OAAO,CAAC,SAAS,CAAC;AAEtB,MAAM;EACJ0B,kBAAkB,EAAEC;AACtB,CAAC,GAAG3B,OAAO,CAAC,cAAc,CAAC;AAE3B,MAAM;EACJ4B,SAAS,EAAEC,UAAU;EACrBC,iBAAiB,EAAEC,kBAAkB;EACrCC,OAAO,EAAEC,eAAe;EACxBC,cAAc,EAAEC;AAClB,CAAC,GAAGnC,OAAO,CAAC,WAAW,CAAC;AAExB,MAAM;EACJoC,OAAO,EAAEC,QAAQ;EACjBC,UAAU,EAAEC;AACd,CAAC,GAAGvC,OAAO,CAAC,WAAW,CAAC;AAExB,MAAM;EACJwC,aAAa,EAAEC,cAAc;EAC7BC,mBAAmB,EAAEC,oBAAoB;EACzCC,aAAa,EAAEC;AACjB,CAAC,GAAG7C,OAAO,CAAC,WAAW,CAAC;AAExB,MAAM;EACJ8C,eAAe,EAAEC,gBAAgB;EACjCC,sBAAsB,EAAEC,uBAAuB;EAC/CC,gBAAgB,EAAEC,iBAAiB;EACnCC,sBAAsB,EAAEC,uBAAuB;EAC/CC,iBAAiB,EAAEC,kBAAkB;EACrCC,kBAAkB,EAAEC,mBAAmB;EACvCC,qBAAqB,EAAEC;AACzB,CAAC,GAAG3D,OAAO,CAAC,UAAU,CAAC;;AAEvB;AACA;AACA,MAAM4D,OAAO,GAAG,UAASC,MAAM,EAAE;EAEjC;EACA,MAAMC,WAAW,GAAG,CAAC,CAAC;;EAEtB;EACA;EACA,MAAMC,+BAA+B,GAAG,GAAG;EAC3C,MAAMC,qBAAqB,GAAG,IAAI1D,GAAG,CAAC;IAAC2D,GAAG,EAAEF;EAA+B,CAAC,CAAC;;EAE7E;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAF,MAAM,CAACzB,OAAO,GAAG,gBAAe8B,KAAK,EAAEC,GAAG,EAAEC,OAAO,EAAE;IACnD,IAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,EAAE;MACvB,MAAM,IAAIC,SAAS,CAAC,uCAAuC,CAAC;IAC9D;IAEA,IAAGJ,GAAG,KAAK,IAAI,EAAE;MACf,MAAM,IAAI9D,WAAW,CACnB,0CAA0C,EAC1C,qBAAqB,EAAE;QAACmE,IAAI,EAAE;MAAuB,CAAC,CAAC;IAC3D;;IAEA;IACA,IAAGN,KAAK,KAAK,IAAI,EAAE;MACjB,OAAO,IAAI;IACb;;IAEA;IACAE,OAAO,GAAGK,YAAY,CAACL,OAAO,EAAE;MAC9BM,IAAI,EAAEjD,SAAS,CAACyC,KAAK,CAAC,GAAGA,KAAK,GAAG,EAAE;MACnCS,aAAa,EAAE,IAAI;MACnBC,iBAAiB,EAAE,IAAI;MACvBC,KAAK,EAAE,KAAK;MACZC,aAAa,EAAE,KAAK;MACpBC,IAAI,EAAE,KAAK;MACXC,MAAM,EAAE,IAAI5E,gBAAgB,CAAC,KAAK,CAAC;MACnC6E,eAAe,EAAE,IAAI9E,eAAe,CAClC;QAAC+E,WAAW,EAAElB;MAAqB,CAAC;IACxC,CAAC,CAAC;IACF,IAAGI,OAAO,CAACW,IAAI,EAAE;MACf;MACA;MACAX,OAAO,CAACU,aAAa,GAAG,IAAI;IAC9B;IACA,IAAG,CAACV,OAAO,CAACQ,iBAAiB,EAAE;MAC7B,OAAOR,OAAO,CAACM,IAAI;IACrB;;IAEA;IACA,IAAIS,QAAQ;IACZ,IAAGf,OAAO,CAACU,aAAa,EAAE;MACxBK,QAAQ,GAAGjB,KAAK;IAClB,CAAC,MAAM;MACLiB,QAAQ,GAAG,MAAMtB,MAAM,CAACrD,MAAM,CAAC0D,KAAK,EAAEE,OAAO,CAAC;IAChD;;IAEA;IACA,MAAMgB,SAAS,GAAG,MAAMvB,MAAM,CAACwB,cAAc,CAC3CtD,kBAAkB,CAACqC,OAAO,CAAC,EAAED,GAAG,EAAEC,OAAO,CAAC;;IAE5C;IACA,IAAIkB,SAAS,GAAG,MAAMjD,QAAQ,CAAC;MAC7B+C,SAAS;MACTG,OAAO,EAAEJ,QAAQ;MACjBf;IACF,CAAC,CAAC;;IAEF;IACA,IAAGA,OAAO,CAACO,aAAa,IAAI,CAACP,OAAO,CAACS,KAAK,IAAIxD,QAAQ,CAACiE,SAAS,CAAC,EAAE;MACjE,IAAGA,SAAS,CAAChB,MAAM,KAAK,CAAC,EAAE;QACzB;QACAgB,SAAS,GAAGA,SAAS,CAAC,CAAC,CAAC;MAC1B,CAAC,MAAM,IAAGA,SAAS,CAAChB,MAAM,KAAK,CAAC,EAAE;QAChC;QACAgB,SAAS,GAAG,CAAC,CAAC;MAChB;IACF,CAAC,MAAM,IAAGlB,OAAO,CAACS,KAAK,IAAItD,SAAS,CAAC+D,SAAS,CAAC,EAAE;MAC/C;MACAA,SAAS,GAAG,CAACA,SAAS,CAAC;IACzB;;IAEA;IACA,IAAG/D,SAAS,CAAC4C,GAAG,CAAC,IAAI,UAAU,IAAIA,GAAG,EAAE;MACtCA,GAAG,GAAGA,GAAG,CAAC,UAAU,CAAC;IACvB;;IAEA;IACAA,GAAG,GAAGjE,IAAI,CAACsF,KAAK,CAACrB,GAAG,CAAC;IACrB,IAAG,CAAC9C,QAAQ,CAAC8C,GAAG,CAAC,EAAE;MACjBA,GAAG,GAAG,CAACA,GAAG,CAAC;IACb;IACA;IACA,MAAMsB,GAAG,GAAGtB,GAAG;IACfA,GAAG,GAAG,EAAE;IACR,KAAI,IAAIuB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,GAAG,CAACnB,MAAM,EAAE,EAAEoB,CAAC,EAAE;MAClC,IAAG,CAACnE,SAAS,CAACkE,GAAG,CAACC,CAAC,CAAC,CAAC,IAAIC,MAAM,CAACC,IAAI,CAACH,GAAG,CAACC,CAAC,CAAC,CAAC,CAACpB,MAAM,GAAG,CAAC,EAAE;QACvDH,GAAG,CAAC0B,IAAI,CAACJ,GAAG,CAACC,CAAC,CAAC,CAAC;MAClB;IACF;;IAEA;IACA,MAAMI,UAAU,GAAI3B,GAAG,CAACG,MAAM,GAAG,CAAE;IACnC,IAAGH,GAAG,CAACG,MAAM,KAAK,CAAC,EAAE;MACnBH,GAAG,GAAGA,GAAG,CAAC,CAAC,CAAC;IACd;;IAEA;IACA,IAAG9C,QAAQ,CAACiE,SAAS,CAAC,EAAE;MACtB;MACA,MAAMS,UAAU,GAAGxD,WAAW,CAAC;QAC7B6C,SAAS;QAAEY,GAAG,EAAE,QAAQ;QAAEC,UAAU,EAAE;UAACC,KAAK,EAAE;QAAI;MACpD,CAAC,CAAC;MACF,MAAMrB,KAAK,GAAGS,SAAS;MACvBA,SAAS,GAAG,CAAC,CAAC;MACd,IAAGQ,UAAU,EAAE;QACbR,SAAS,CAAC,UAAU,CAAC,GAAGnB,GAAG;MAC7B;MACAmB,SAAS,CAACS,UAAU,CAAC,GAAGlB,KAAK;IAC/B,CAAC,MAAM,IAAGtD,SAAS,CAAC+D,SAAS,CAAC,IAAIQ,UAAU,EAAE;MAC5C;MACA,MAAMjB,KAAK,GAAGS,SAAS;MACvBA,SAAS,GAAG;QAAC,UAAU,EAAEnB;MAAG,CAAC;MAC7B,KAAI,MAAMgC,GAAG,IAAItB,KAAK,EAAE;QACtBS,SAAS,CAACa,GAAG,CAAC,GAAGtB,KAAK,CAACsB,GAAG,CAAC;MAC7B;IACF;IAEA,OAAOb,SAAS;EAClB,CAAC;;EAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAzB,MAAM,CAACrD,MAAM,GAAG,gBAAe0D,KAAK,EAAEE,OAAO,EAAE;IAC7C,IAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,EAAE;MACvB,MAAM,IAAIC,SAAS,CAAC,sCAAsC,CAAC;IAC7D;;IAEA;IACAH,OAAO,GAAGK,YAAY,CAACL,OAAO,EAAE;MAC9BgC,qBAAqB,EAAE,KAAK;MAC5BnB,eAAe,EAAE,IAAI9E,eAAe,CAClC;QAAC+E,WAAW,EAAElB;MAAqB,CAAC;IACxC,CAAC,CAAC;;IAEF;IACA,MAAMqC,SAAS,GAAG,CAAC,CAAC;;IAEpB;IACA,MAAMC,iBAAiB,GAAG,EAAE;;IAE5B;IACA,IAAG,eAAe,IAAIlC,OAAO,EAAE;MAC7B,MAAMmC,aAAa,GAAGrG,IAAI,CAACsF,KAAK,CAACpB,OAAO,CAACmC,aAAa,CAAC;MACvD,IAAGhF,SAAS,CAACgF,aAAa,CAAC,IAAI,UAAU,IAAIA,aAAa,EAAE;QAC1DF,SAAS,CAACE,aAAa,GAAGA,aAAa;MACzC,CAAC,MAAM;QACLF,SAAS,CAACE,aAAa,GAAG;UAAC,UAAU,EAAEA;QAAa,CAAC;MACvD;MACAD,iBAAiB,CAACT,IAAI,CAACQ,SAAS,CAACE,aAAa,CAAC;IACjD;;IAEA;IACA,IAAIC,WAAW;IACf,IAAG,CAAC/E,SAAS,CAACyC,KAAK,CAAC,EAAE;MACpB;MACAmC,SAAS,CAACnC,KAAK,GAAGhE,IAAI,CAACsF,KAAK,CAACtB,KAAK,CAAC;IACrC,CAAC,MAAM;MACL;MACA,MAAMuC,SAAS,GAAG,MAAM5C,MAAM,CAAC6C,GAAG,CAACxC,KAAK,EAAEE,OAAO,CAAC;MAClDoC,WAAW,GAAGC,SAAS,CAACE,WAAW;MACnCN,SAAS,CAACnC,KAAK,GAAGuC,SAAS,CAACG,QAAQ;MACpC,IAAGH,SAAS,CAACI,UAAU,EAAE;QACvB;QACAR,SAAS,CAACS,aAAa,GAAG;UAAC,UAAU,EAAEL,SAAS,CAACI;QAAU,CAAC;QAC5DP,iBAAiB,CAACT,IAAI,CAACQ,SAAS,CAACS,aAAa,CAAC;MACjD;IACF;;IAEA;IACA,IAAG,EAAE,MAAM,IAAI1C,OAAO,CAAC,EAAE;MACvBA,OAAO,CAACM,IAAI,GAAG8B,WAAW,IAAI,EAAE;IAClC;;IAEA;IACA,IAAIpB,SAAS,GAAGrD,kBAAkB,CAACqC,OAAO,CAAC;IAC3C,KAAI,MAAM2C,QAAQ,IAAIT,iBAAiB,EAAE;MACvClB,SAAS,GAAG,MAAMnD,eAAe,CAAC;QAACmD,SAAS;QAAE2B,QAAQ;QAAE3C;MAAO,CAAC,CAAC;IACnE;;IAEA;IACA,IAAIe,QAAQ,GAAG,MAAM1E,OAAO,CAAC;MAC3B2E,SAAS;MACTG,OAAO,EAAEc,SAAS,CAACnC,KAAK;MACxBE;IACF,CAAC,CAAC;;IAEF;IACA,IAAG7C,SAAS,CAAC4D,QAAQ,CAAC,IAAK,QAAQ,IAAIA,QAAS,IAC9CQ,MAAM,CAACC,IAAI,CAACT,QAAQ,CAAC,CAACb,MAAM,KAAK,CAAC,EAAE;MACpCa,QAAQ,GAAGA,QAAQ,CAAC,QAAQ,CAAC;IAC/B,CAAC,MAAM,IAAGA,QAAQ,KAAK,IAAI,EAAE;MAC3BA,QAAQ,GAAG,EAAE;IACf;;IAEA;IACA,IAAG,CAAC9D,QAAQ,CAAC8D,QAAQ,CAAC,EAAE;MACtBA,QAAQ,GAAG,CAACA,QAAQ,CAAC;IACvB;IAEA,OAAOA,QAAQ;EACjB,CAAC;;EAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAtB,MAAM,CAACnD,OAAO,GAAG,gBAAewD,KAAK,EAAEC,GAAG,EAAEC,OAAO,EAAE;IACnD,IAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,EAAE;MACvB,OAAO,IAAIC,SAAS,CAAC,uCAAuC,CAAC;IAC/D;IAEA,IAAG,OAAOJ,GAAG,KAAK,UAAU,EAAE;MAC5BA,GAAG,GAAG,IAAI;IACZ,CAAC,MAAM;MACLA,GAAG,GAAGA,GAAG,IAAI,IAAI;IACnB;;IAEA;IACAC,OAAO,GAAGK,YAAY,CAACL,OAAO,EAAE;MAC9BM,IAAI,EAAEjD,SAAS,CAACyC,KAAK,CAAC,GAAGA,KAAK,GAAG,EAAE;MACnCe,eAAe,EAAE,IAAI9E,eAAe,CAClC;QAAC+E,WAAW,EAAElB;MAAqB,CAAC;IACxC,CAAC,CAAC;;IAEF;IACA,MAAMmB,QAAQ,GAAG,MAAMtB,MAAM,CAACrD,MAAM,CAAC0D,KAAK,EAAEE,OAAO,CAAC;;IAEpD;IACA,MAAM4C,SAAS,GAAGrG,QAAQ,CAACwE,QAAQ,CAAC;IAEpC,IAAGhB,GAAG,KAAK,IAAI,EAAE;MACf;MACA,OAAO6C,SAAS;IAClB;;IAEA;IACA5C,OAAO,CAACS,KAAK,GAAG,IAAI;IACpBT,OAAO,CAACU,aAAa,GAAG,IAAI;IAC5B,MAAMQ,SAAS,GAAG,MAAMzB,MAAM,CAACzB,OAAO,CAAC4E,SAAS,EAAE7C,GAAG,EAAEC,OAAO,CAAC;IAE/D,OAAOkB,SAAS;EAClB,CAAC;;EAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAzB,MAAM,CAACoD,KAAK,GAAG,gBAAe/C,KAAK,EAAE+C,KAAK,EAAE7C,OAAO,EAAE;IACnD,IAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,EAAE;MACvB,MAAM,IAAIC,SAAS,CAAC,qCAAqC,CAAC;IAC5D;;IAEA;IACAH,OAAO,GAAGK,YAAY,CAACL,OAAO,EAAE;MAC9BM,IAAI,EAAEjD,SAAS,CAACyC,KAAK,CAAC,GAAGA,KAAK,GAAG,EAAE;MACnCgD,KAAK,EAAE,OAAO;MACdC,QAAQ,EAAE,KAAK;MACfC,UAAU,EAAE,KAAK;MACjBC,WAAW,EAAE,KAAK;MAClBC,aAAa,EAAE,EAAE;MACjBrC,eAAe,EAAE,IAAI9E,eAAe,CAClC;QAAC+E,WAAW,EAAElB;MAAqB,CAAC;IACxC,CAAC,CAAC;;IAEF;IACA,IAAGvC,SAAS,CAACwF,KAAK,CAAC,EAAE;MACnB;MACA,MAAMR,SAAS,GAAG,MAAM5C,MAAM,CAAC6C,GAAG,CAACO,KAAK,EAAE7C,OAAO,CAAC;MAClD6C,KAAK,GAAGR,SAAS,CAACG,QAAQ;MAE1B,IAAGH,SAAS,CAACI,UAAU,EAAE;QACvB;QACA,IAAI1C,GAAG,GAAG8C,KAAK,CAAC,UAAU,CAAC;QAC3B,IAAG,CAAC9C,GAAG,EAAE;UACPA,GAAG,GAAGsC,SAAS,CAACI,UAAU;QAC5B,CAAC,MAAM,IAAGxF,QAAQ,CAAC8C,GAAG,CAAC,EAAE;UACvBA,GAAG,CAAC0B,IAAI,CAACY,SAAS,CAACI,UAAU,CAAC;QAChC,CAAC,MAAM;UACL1C,GAAG,GAAG,CAACA,GAAG,EAAEsC,SAAS,CAACI,UAAU,CAAC;QACnC;QACAI,KAAK,CAAC,UAAU,CAAC,GAAG9C,GAAG;MACzB;IACF;IAEA,MAAMoD,YAAY,GAAGN,KAAK,GAAGA,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;;IAEzD;IACA,MAAM7B,SAAS,GAAG,MAAMvB,MAAM,CAACwB,cAAc,CAC3CtD,kBAAkB,CAACqC,OAAO,CAAC,EAAEmD,YAAY,EAAEnD,OAAO,CAAC;;IAErD;IACA,IAAG,CAACA,OAAO,CAACoD,cAAc,CAAC,WAAW,CAAC,EAAE;MACvCpD,OAAO,CAACqD,SAAS,GAAGtF,eAAe,CAACiD,SAAS,EAAE,GAAG,CAAC;IACrD;IACA,IAAG,CAAChB,OAAO,CAACoD,cAAc,CAAC,2BAA2B,CAAC,EAAE;MACvDpD,OAAO,CAACsD,yBAAyB,GAAGvF,eAAe,CAACiD,SAAS,EAAE,GAAG,CAAC;IACrE;;IAEA;IACA,MAAMD,QAAQ,GAAG,MAAMtB,MAAM,CAACrD,MAAM,CAAC0D,KAAK,EAAEE,OAAO,CAAC;;IAEpD;IACA,MAAMuD,IAAI,GAAG;MAAC,GAAGvD;IAAO,CAAC;IACzBuD,IAAI,CAACC,OAAO,GAAG,IAAI;IACnBD,IAAI,CAACvB,qBAAqB,GAAG,IAAI;IACjC,MAAMyB,aAAa,GAAG,MAAMhE,MAAM,CAACrD,MAAM,CAACyG,KAAK,EAAEU,IAAI,CAAC;;IAEtD;IACA;IACA,MAAMG,SAAS,GAAGnC,MAAM,CAACC,IAAI,CAACqB,KAAK,CAAC,CACjCc,GAAG,CAAC5B,GAAG,IAAItE,UAAU,CAACuD,SAAS,EAAEe,GAAG,EAAE;MAACD,KAAK,EAAE;IAAI,CAAC,CAAC,CAAC;IACxDyB,IAAI,CAACK,MAAM,GAAG,CAACF,SAAS,CAACG,QAAQ,CAAC,QAAQ,CAAC;IAC3CN,IAAI,CAACO,IAAI,GAAG/F,eAAe,CAACiD,SAAS,EAAE,GAAG,CAAC;;IAE3C;IACA,MAAM+C,MAAM,GAAGlH,qBAAqB,CAACkE,QAAQ,EAAE0C,aAAa,EAAEF,IAAI,CAAC;IAEnEA,IAAI,CAAC9C,KAAK,GAAG,CAACT,OAAO,CAACqD,SAAS;IAC/BE,IAAI,CAAC7C,aAAa,GAAG,IAAI;IACzB6C,IAAI,CAAC5C,IAAI,GAAG,CAAC,CAAC;IACd4C,IAAI,CAACS,OAAO,GAAG,IAAI;IACnB,IAAI9C,SAAS,GAAG,MAAMzB,MAAM,CAACzB,OAAO,CAAC+F,MAAM,EAAEZ,YAAY,EAAEI,IAAI,CAAC;;IAEhE;IACAA,IAAI,CAAC5C,IAAI,GAAG,CAAC,CAAC;IACdO,SAAS,GAAGnE,YAAY,CAACmE,SAAS,EAAEqC,IAAI,CAAC;IAEzC,OAAOrC,SAAS;EAClB,CAAC;;EAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAzB,MAAM,CAACkB,IAAI,GAAG,gBAAeb,KAAK,EAAEC,GAAG,EAAEC,OAAO,EAAE;IAChD;IACA;IACA,MAAM6C,KAAK,GAAG,CAAC,CAAC;IAChB,IAAG9C,GAAG,EAAE;MACN8C,KAAK,CAAC,UAAU,CAAC,GAAG9C,GAAG;IACzB;IACA8C,KAAK,CAAC,QAAQ,CAAC,GAAG,OAAO;IACzB,OAAOpD,MAAM,CAACoD,KAAK,CAAC/C,KAAK,EAAE+C,KAAK,EAAE7C,OAAO,CAAC;EAC5C,CAAC;;EAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAP,MAAM,CAACwE,SAAS,GAAGxE,MAAM,CAAC9D,QAAQ,GAAG,gBAAemE,KAAK,EAAEE,OAAO,EAAE;IAClE,IAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,EAAE;MACvB,MAAM,IAAIC,SAAS,CAAC,wCAAwC,CAAC;IAC/D;;IAEA;IACAH,OAAO,GAAGK,YAAY,CAACL,OAAO,EAAE;MAC9BM,IAAI,EAAEjD,SAAS,CAACyC,KAAK,CAAC,GAAGA,KAAK,GAAG,IAAI;MACrCoE,SAAS,EAAE,WAAW;MACtBxD,aAAa,EAAE,KAAK;MACpByD,IAAI,EAAE,IAAI;MACVtD,eAAe,EAAE,IAAI9E,eAAe,CAClC;QAAC+E,WAAW,EAAElB;MAAqB,CAAC;IACxC,CAAC,CAAC;IACF,IAAG,aAAa,IAAII,OAAO,EAAE;MAC3B,IAAGA,OAAO,CAACoE,WAAW,KAAK,qBAAqB,IAC9CpE,OAAO,CAACoE,WAAW,KAAK,oBAAoB,EAAE;QAC9C,MAAM,IAAInI,WAAW,CACnB,wCAAwC,EACxC,sBAAsB,CAAC;MAC3B;MACA;MACA,MAAMoI,WAAW,GAAGlI,MAAM,CAACmI,KAAK,CAACxE,KAAK,CAAC;;MAEvC;MACA,OAAOnE,QAAQ,CAACA,QAAQ,CAAC0I,WAAW,EAAErE,OAAO,CAAC;IAChD;;IAEA;IACA,MAAMuD,IAAI,GAAG;MAAC,GAAGvD;IAAO,CAAC;IACzB,OAAOuD,IAAI,CAACgB,MAAM;IAClBhB,IAAI,CAACiB,qBAAqB,GAAG,KAAK;IAClC,MAAMC,OAAO,GAAG,MAAMhF,MAAM,CAAC/C,KAAK,CAACoD,KAAK,EAAEyD,IAAI,CAAC;;IAE/C;IACA,OAAO5H,QAAQ,CAACA,QAAQ,CAAC8I,OAAO,EAAEzE,OAAO,CAAC;EAC5C,CAAC;;EAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAP,MAAM,CAACjD,OAAO,GAAG,gBAAeiI,OAAO,EAAEzE,OAAO,EAAE;IAChD,IAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,EAAE;MACvB,MAAM,IAAIC,SAAS,CAAC,gDAAgD,CAAC;IACvE;;IAEA;IACAH,OAAO,GAAGK,YAAY,CAACL,OAAO,EAAE;MAC9BuE,MAAM,EAAElH,SAAS,CAACoH,OAAO,CAAC,GAAG,qBAAqB,GAAGC;IACvD,CAAC,CAAC;IAEF,MAAM;MAACH;IAAM,CAAC,GAAGvE,OAAO;IACxB,IAAI;MAAC2E;IAAS,CAAC,GAAG3E,OAAO;;IAEzB;IACA,IAAGuE,MAAM,EAAE;MACT;MACAI,SAAS,GAAGA,SAAS,IAAIjF,WAAW,CAAC6E,MAAM,CAAC;MAC5C,IAAG,CAACI,SAAS,EAAE;QACb,MAAM,IAAI1I,WAAW,CACnB,uBAAuB,EACvB,sBAAsB,EAAE;UAACsI;QAAM,CAAC,CAAC;MACrC;IACF,CAAC,MAAM;MACL;MACAI,SAAS,GAAG,MAAMF,OAAO;IAC3B;;IAEA;IACA,MAAMG,aAAa,GAAG,MAAMD,SAAS,CAACF,OAAO,CAAC;IAC9C,OAAOhI,QAAQ,CAACmI,aAAa,EAAE5E,OAAO,CAAC;EACzC,CAAC;;EAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAP,MAAM,CAAC/C,KAAK,GAAG,gBAAeoD,KAAK,EAAEE,OAAO,EAAE;IAC5C,IAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,EAAE;MACvB,MAAM,IAAIC,SAAS,CAAC,8CAA8C,CAAC;IACrE;;IAEA;IACAH,OAAO,GAAGK,YAAY,CAACL,OAAO,EAAE;MAC9BM,IAAI,EAAEjD,SAAS,CAACyC,KAAK,CAAC,GAAGA,KAAK,GAAG,EAAE;MACnCY,aAAa,EAAE,KAAK;MACpBG,eAAe,EAAE,IAAI9E,eAAe,CAClC;QAAC+E,WAAW,EAAElB;MAAqB,CAAC;IACxC,CAAC,CAAC;;IAEF;IACA,IAAImB,QAAQ;IACZ,IAAGf,OAAO,CAACU,aAAa,EAAE;MACxBK,QAAQ,GAAGjB,KAAK;IAClB,CAAC,MAAM;MACL;MACAiB,QAAQ,GAAG,MAAMtB,MAAM,CAACrD,MAAM,CAAC0D,KAAK,EAAEE,OAAO,CAAC;IAChD;;IAEA;IACA,MAAMyE,OAAO,GAAG9H,MAAM,CAACoE,QAAQ,EAAEf,OAAO,CAAC;IACzC,IAAGA,OAAO,CAACuE,MAAM,EAAE;MACjB,IAAGvE,OAAO,CAACuE,MAAM,KAAK,qBAAqB,IACzCvE,OAAO,CAACuE,MAAM,KAAK,oBAAoB,EAAE;QACzC,OAAOpI,MAAM,CAAC0I,SAAS,CAACJ,OAAO,CAAC;MAClC;MACA,MAAM,IAAIxI,WAAW,CACnB,wBAAwB,EACxB,sBAAsB,EAAE;QAACsI,MAAM,EAAEvE,OAAO,CAACuE;MAAM,CAAC,CAAC;IACrD;IAEA,OAAOE,OAAO;EAChB,CAAC;;EAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAhF,MAAM,CAACrB,aAAa,GAAG,gBAAe0B,KAAK,EAAEE,OAAO,EAAE;IACpD,IAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,EAAE;MACvB,MAAM,IAAIC,SAAS,CAAC,+CAA+C,CAAC;IACtE;;IAEA;IACAH,OAAO,GAAGK,YAAY,CAACL,OAAO,EAAE;MAC9BM,IAAI,EAAEjD,SAAS,CAACyC,KAAK,CAAC,GAAGA,KAAK,GAAG,EAAE;MACnCe,eAAe,EAAE,IAAI9E,eAAe,CAClC;QAAC+E,WAAW,EAAElB;MAAqB,CAAC;IACxC,CAAC,CAAC;;IAEF;IACA,MAAMmB,QAAQ,GAAG,MAAMtB,MAAM,CAACrD,MAAM,CAAC0D,KAAK,EAAEE,OAAO,CAAC;IAEpD,OAAOzB,oBAAoB,CAACwC,QAAQ,EAAEf,OAAO,CAAC;EAChD,CAAC;;EAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAP,MAAM,CAACqF,KAAK,GAAG,gBAAeC,IAAI,EAAEhF,GAAG,EAAEC,OAAO,EAAE;IAChD,IAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,EAAE;MACvB,MAAM,IAAIC,SAAS,CAAC,qCAAqC,CAAC;IAC5D;IACA,IAAG,CAAClD,QAAQ,CAAC8H,IAAI,CAAC,EAAE;MAClB,MAAM,IAAI5E,SAAS,CAAC,2CAA2C,CAAC;IAClE;IAEA,IAAG,OAAOJ,GAAG,KAAK,UAAU,EAAE;MAC5BA,GAAG,GAAG,IAAI;IACZ,CAAC,MAAM;MACLA,GAAG,GAAGA,GAAG,IAAI,IAAI;IACnB;;IAEA;IACAC,OAAO,GAAGK,YAAY,CAACL,OAAO,EAAE;MAC9Ba,eAAe,EAAE,IAAI9E,eAAe,CAClC;QAAC+E,WAAW,EAAElB;MAAqB,CAAC;IACxC,CAAC,CAAC;;IAEF;IACA,MAAMmB,QAAQ,GAAG,MAAMiE,OAAO,CAACC,GAAG,CAACF,IAAI,CAACpB,GAAG,CAACuB,GAAG,IAAI;MACjD,MAAM3B,IAAI,GAAG;QAAC,GAAGvD;MAAO,CAAC;MACzB,OAAOP,MAAM,CAACrD,MAAM,CAAC8I,GAAG,EAAE3B,IAAI,CAAC;IACjC,CAAC,CAAC,CAAC;IAEH,IAAI4B,UAAU,GAAG,IAAI;IACrB,IAAG,YAAY,IAAInF,OAAO,EAAE;MAC1BmF,UAAU,GAAGnF,OAAO,CAACmF,UAAU;IACjC;IAEA,MAAMvE,MAAM,GAAGZ,OAAO,CAACY,MAAM,IAAI,IAAI5E,gBAAgB,CAAC,KAAK,CAAC;IAC5D,MAAMoJ,MAAM,GAAG;MAAC,UAAU,EAAE,CAAC;IAAC,CAAC;IAE/B,KAAI,IAAI9D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,QAAQ,CAACb,MAAM,EAAE,EAAEoB,CAAC,EAAE;MACvC;MACA,MAAM4D,GAAG,GAAGpJ,IAAI,CAACuJ,iBAAiB,CAACtE,QAAQ,CAACO,CAAC,CAAC,EAAE;QAC9CV,MAAM,EAAE,IAAI5E,gBAAgB,CAAC,KAAK,GAAGsF,CAAC,GAAG,GAAG;MAC9C,CAAC,CAAC;;MAEF;MACA;MACA,MAAMgE,OAAO,GAAIH,UAAU,IAAI7D,CAAC,KAAK,CAAC,GAAI8D,MAAM,GAAG;QAAC,UAAU,EAAE,CAAC;MAAC,CAAC;MACnE/G,cAAc,CAAC6G,GAAG,EAAEI,OAAO,EAAE,UAAU,EAAE1E,MAAM,CAAC;MAEhD,IAAG0E,OAAO,KAAKF,MAAM,EAAE;QACrB;QACA,KAAI,MAAMG,SAAS,IAAID,OAAO,EAAE;UAC9B,MAAME,QAAQ,GAAGF,OAAO,CAACC,SAAS,CAAC;UACnC,IAAG,EAAEA,SAAS,IAAIH,MAAM,CAAC,EAAE;YACzBA,MAAM,CAACG,SAAS,CAAC,GAAGC,QAAQ;YAC5B;UACF;UACA,MAAMC,OAAO,GAAGL,MAAM,CAACG,SAAS,CAAC;UACjC,KAAI,MAAMxD,GAAG,IAAIyD,QAAQ,EAAE;YACzB,IAAG,EAAEzD,GAAG,IAAI0D,OAAO,CAAC,EAAE;cACpBA,OAAO,CAAC1D,GAAG,CAAC,GAAGyD,QAAQ,CAACzD,GAAG,CAAC;YAC9B;UACF;QACF;MACF;IACF;;IAEA;IACA,MAAM2D,YAAY,GAAGjH,cAAc,CAAC2G,MAAM,CAAC;;IAE3C;IACA,MAAMxC,SAAS,GAAG,EAAE;IACpB,MAAMpB,IAAI,GAAGD,MAAM,CAACC,IAAI,CAACkE,YAAY,CAAC,CAACC,IAAI,EAAE;IAC7C,KAAI,IAAIC,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAGpE,IAAI,CAACtB,MAAM,EAAE,EAAE0F,EAAE,EAAE;MACtC,MAAMC,IAAI,GAAGH,YAAY,CAAClE,IAAI,CAACoE,EAAE,CAAC,CAAC;MACnC;MACA,IAAG,CAACrI,mBAAmB,CAACsI,IAAI,CAAC,EAAE;QAC7BjD,SAAS,CAACnB,IAAI,CAACoE,IAAI,CAAC;MACtB;IACF;IAEA,IAAG9F,GAAG,KAAK,IAAI,EAAE;MACf,OAAO6C,SAAS;IAClB;;IAEA;IACA5C,OAAO,CAACS,KAAK,GAAG,IAAI;IACpBT,OAAO,CAACU,aAAa,GAAG,IAAI;IAC5B,MAAMQ,SAAS,GAAG,MAAMzB,MAAM,CAACzB,OAAO,CAAC4E,SAAS,EAAE7C,GAAG,EAAEC,OAAO,CAAC;IAE/D,OAAOkB,SAAS;EAClB,CAAC;;EAED;AACA;AACA;AACA;AACA;AACA;AACA;EACAK,MAAM,CAACuE,cAAc,CAACrG,MAAM,EAAE,gBAAgB,EAAE;IAC9C6C,GAAG,EAAE,MAAM7C,MAAM,CAACsG,eAAe;IACjCC,GAAG,EAAEC,CAAC,IAAIxG,MAAM,CAACsG,eAAe,GAAGE;EACrC,CAAC,CAAC;EACF;EACAxG,MAAM,CAACyG,cAAc,GAAG,MAAMC,GAAG,IAAI;IACnC,MAAM,IAAIlK,WAAW,CACnB,0DAA0D,GAC1D,gCAAgC,EAAE,0BAA0B,EAC5D;MAACmE,IAAI,EAAE,yBAAyB;MAAE+F;IAAG,CAAC,CAAC;EAC3C,CAAC;;EAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA1G,MAAM,CAAC6C,GAAG,GAAG,gBAAe6D,GAAG,EAAEnG,OAAO,EAAE;IACxC,IAAIoG,IAAI;IACR,IAAG,OAAOpG,OAAO,CAACkG,cAAc,KAAK,UAAU,EAAE;MAC/CE,IAAI,GAAGpG,OAAO,CAACkG,cAAc;IAC/B,CAAC,MAAM;MACLE,IAAI,GAAG3G,MAAM,CAACyG,cAAc;IAC9B;IAEA,MAAM7D,SAAS,GAAG,MAAM+D,IAAI,CAACD,GAAG,CAAC;IAEjC,IAAI;MACF,IAAG,CAAC9D,SAAS,CAACG,QAAQ,EAAE;QACtB,MAAM,IAAIvG,WAAW,CACnB,4CAA4C,EAC5C,2BAA2B,CAAC;MAChC;MACA,IAAGoB,SAAS,CAACgF,SAAS,CAACG,QAAQ,CAAC,EAAE;QAChCH,SAAS,CAACG,QAAQ,GAAG6D,IAAI,CAAC/B,KAAK,CAACjC,SAAS,CAACG,QAAQ,CAAC;MACrD;IACF,CAAC,CAAC,OAAM8D,CAAC,EAAE;MACT,MAAM,IAAIrK,WAAW,CACnB,qDAAqD,EACrD,0BAA0B,EAAE;QAC1BmE,IAAI,EAAE,yBAAyB;QAC/BmG,KAAK,EAAED,CAAC;QACRjE;MACF,CAAC,CAAC;IACN;IAEA,OAAOA,SAAS;EAClB,CAAC;;EAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA5C,MAAM,CAACwB,cAAc,GAAG,gBACtBD,SAAS,EAAE2B,QAAQ,EAAE3C,OAAO,EAAE;IAC9B;IACAA,OAAO,GAAGK,YAAY,CAACL,OAAO,EAAE;MAC9BM,IAAI,EAAE,EAAE;MACRO,eAAe,EAAE,IAAI9E,eAAe,CAClC;QAAC+E,WAAW,EAAElB;MAAqB,CAAC;IACxC,CAAC,CAAC;;IAEF;IACA,IAAG+C,QAAQ,KAAK,IAAI,EAAE;MACpB,OAAOhF,kBAAkB,CAACqC,OAAO,CAAC;IACpC;;IAEA;IACA2C,QAAQ,GAAG7G,IAAI,CAACsF,KAAK,CAACuB,QAAQ,CAAC;IAC/B,IAAG,EAAExF,SAAS,CAACwF,QAAQ,CAAC,IAAI,UAAU,IAAIA,QAAQ,CAAC,EAAE;MACnDA,QAAQ,GAAG;QAAC,UAAU,EAAEA;MAAQ,CAAC;IACnC;IAEA,OAAO9E,eAAe,CAAC;MAACmD,SAAS;MAAE2B,QAAQ;MAAE3C;IAAO,CAAC,CAAC;EACxD,CAAC;;EAED;EACAP,MAAM,CAAC+G,eAAe,GAAG5K,OAAO,CAAC,WAAW,CAAC,CAAC4K,eAAe;;EAE7D;AACA;AACA;EACA/G,MAAM,CAACgH,eAAe,GAAG,CAAC,CAAC;;EAE3B;AACA;AACA;AACA;AACA;AACA;AACA;EACAhH,MAAM,CAACiH,iBAAiB,GAAG,UAASC,IAAI,EAAE;IACxC,IAAG,EAAEA,IAAI,IAAIlH,MAAM,CAACgH,eAAe,CAAC,EAAE;MACpC,MAAM,IAAIxK,WAAW,CACnB,iCAAiC,GAAG0K,IAAI,GAAG,GAAG,EAC9C,8BAA8B,EAC9B;QAACA;MAAI,CAAC,CAAC;IACX;;IAEA;IACAlH,MAAM,CAACyG,cAAc,GAAGzG,MAAM,CAACgH,eAAe,CAACE,IAAI,CAAC,CAACC,KAAK,CACxDnH,MAAM,EAAEoH,KAAK,CAACC,SAAS,CAACC,KAAK,CAACC,IAAI,CAAC/G,SAAS,EAAE,CAAC,CAAC,CAAC;EACrD,CAAC;;EAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAR,MAAM,CAACwH,iBAAiB,GAAG,UAASC,WAAW,EAAEC,MAAM,EAAE;IACvDzH,WAAW,CAACwH,WAAW,CAAC,GAAGC,MAAM;EACnC,CAAC;;EAED;AACA;AACA;AACA;AACA;EACA1H,MAAM,CAAC2H,mBAAmB,GAAG,UAASF,WAAW,EAAE;IACjD,OAAOxH,WAAW,CAACwH,WAAW,CAAC;EACjC,CAAC;;EAED;EACAzH,MAAM,CAACwH,iBAAiB,CAAC,qBAAqB,EAAE9K,MAAM,CAACmI,KAAK,CAAC;EAC7D7E,MAAM,CAACwH,iBAAiB,CAAC,oBAAoB,EAAE9K,MAAM,CAACmI,KAAK,CAAC;;EAE5D;EACA7E,MAAM,CAAC0G,GAAG,GAAGvK,OAAO,CAAC,OAAO,CAAC;;EAE7B;EACA6D,MAAM,CAACf,eAAe,GAAGC,gBAAgB;EACzCc,MAAM,CAACb,sBAAsB,GAAGC,uBAAuB;EACvDY,MAAM,CAACX,gBAAgB,GAAGC,iBAAiB;EAC3CU,MAAM,CAACT,sBAAsB,GAAGC,uBAAuB;EACvDQ,MAAM,CAACL,kBAAkB,GAAGC,mBAAmB;EAC/CI,MAAM,CAACH,qBAAqB,GAAGC,sBAAsB;;EAErD;EACAE,MAAM,CAAC3D,IAAI,GAAGA,IAAI;EAClB;EACAyF,MAAM,CAAC8F,MAAM,CAAC5H,MAAM,EAAE3D,IAAI,CAAC;;EAE3B;EACA2D,MAAM,CAAC6H,QAAQ,GAAG7H,MAAM;;EAExB;EACAA,MAAM,CAAC8H,YAAY,GAAG3L,OAAO,CAAC,gBAAgB,CAAC;;EAE/C;EACA6D,MAAM,CAAC+H,eAAe,GAAG5L,OAAO,CAAC,mBAAmB,CAAC,CAAC6D,MAAM,CAAC;EAE7D5D,QAAQ,CAAC4L,YAAY,CAAChI,MAAM,CAAC;EAC7B5D,QAAQ,CAAC6L,oBAAoB,CAACjI,MAAM,CAAC;EAErC,SAASY,YAAY,CAACL,OAAO,QAG1B;IAAA,IAH4B;MAC7BkG,cAAc,GAAGzG,MAAM,CAACyG,cAAc;MACtC,GAAGyB;IACL,CAAC;IACC;IACA,IAAG3H,OAAO,IAAI,eAAe,IAAIA,OAAO,EAAE;MACxC,MAAM,IAAI/D,WAAW,CACnB,gCAAgC,EAChC,qBAAqB,CAAC;IAC1B;IACA,IAAG+D,OAAO,IAAI,cAAc,IAAIA,OAAO,EAAE;MACvC,MAAM,IAAI/D,WAAW,CACnB,+BAA+B,EAC/B,qBAAqB,CAAC;IAC1B;IACA,OAAOsF,MAAM,CAAC8F,MAAM,CAClB,CAAC,CAAC,EACF;MAACnB;IAAc,CAAC,EAChByB,QAAQ,EACR3H,OAAO,EACP;MAAC4H,YAAY,EAAEzI,kBAAkB,CAAC;QAACa;MAAO,CAAC;IAAC,CAAC,CAC9C;EACH;;EAEA;EACA,OAAOP,MAAM;AACb,CAAC;;AAED;;AAEA;AACA,MAAMoI,OAAO,GAAG,YAAW;EACzB,OAAOrI,OAAO,CAAC,YAAW;IACxB,OAAOqI,OAAO,EAAE;EAClB,CAAC,CAAC;AACJ,CAAC;;AAED;AACArI,OAAO,CAACqI,OAAO,CAAC;AAChB;AACAC,MAAM,CAACC,OAAO,GAAGF,OAAO"},"metadata":{},"sourceType":"script","externalDependencies":[]}