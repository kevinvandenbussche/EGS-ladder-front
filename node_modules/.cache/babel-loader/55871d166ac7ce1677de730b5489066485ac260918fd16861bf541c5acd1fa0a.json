{"ast":null,"code":"/*\n * Copyright (c) 2020 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst JsonLdError = require('./JsonLdError');\nconst {\n  isArray: _isArray\n} = require('./types');\nconst {\n  asArray: _asArray\n} = require('./util');\nconst api = {};\nmodule.exports = api;\n\n// default handler, store as null or an array\n// exposed to allow fast external pre-handleEvent() checks\napi.defaultEventHandler = null;\n\n/**\n * Setup event handler.\n *\n * Return an array event handler constructed from an optional safe mode\n * handler, an optional options event handler, and an optional default handler.\n *\n * @param {object} options - processing options\n *   {function|object|array} [eventHandler] - an event handler.\n *\n * @return an array event handler.\n */\napi.setupEventHandler = _ref => {\n  let {\n    options = {}\n  } = _ref;\n  // build in priority order\n  const eventHandler = [].concat(options.safe ? api.safeEventHandler : [], options.eventHandler ? _asArray(options.eventHandler) : [], api.defaultEventHandler ? api.defaultEventHandler : []);\n  // null if no handlers\n  return eventHandler.length === 0 ? null : eventHandler;\n};\n\n/**\n * Handle an event.\n *\n * Top level APIs have a common 'eventHandler' option. This option can be a\n * function, array of functions, object mapping event.code to functions (with a\n * default to call next()), or any combination of such handlers. Handlers will\n * be called with an object with an 'event' entry and a 'next' function. Custom\n * handlers should process the event as appropriate. The 'next()' function\n * should be called to let the next handler process the event.\n *\n * NOTE: Only call this function if options.eventHandler is set and is an\n * array of hanlers. This is an optimization. Callers are expected to check\n * for an event handler before constructing events and calling this function.\n *\n * @param {object} event - event structure:\n *   {string} code - event code\n *   {string} level - severity level, one of: ['warning']\n *   {string} message - human readable message\n *   {object} details - event specific details\n * @param {object} options - processing options\n *   {array} eventHandler - an event handler array.\n */\napi.handleEvent = _ref2 => {\n  let {\n    event,\n    options\n  } = _ref2;\n  _handle({\n    event,\n    handlers: options.eventHandler\n  });\n};\nfunction _handle(_ref3) {\n  let {\n    event,\n    handlers\n  } = _ref3;\n  let doNext = true;\n  for (let i = 0; doNext && i < handlers.length; ++i) {\n    doNext = false;\n    const handler = handlers[i];\n    if (_isArray(handler)) {\n      doNext = _handle({\n        event,\n        handlers: handler\n      });\n    } else if (typeof handler === 'function') {\n      handler({\n        event,\n        next: () => {\n          doNext = true;\n        }\n      });\n    } else if (typeof handler === 'object') {\n      if (event.code in handler) {\n        handler[event.code]({\n          event,\n          next: () => {\n            doNext = true;\n          }\n        });\n      } else {\n        doNext = true;\n      }\n    } else {\n      throw new JsonLdError('Invalid event handler.', 'jsonld.InvalidEventHandler', {\n        event\n      });\n    }\n  }\n  return doNext;\n}\nconst _notSafeEventCodes = new Set(['empty object', 'free-floating scalar', 'invalid @language value', 'invalid property',\n// NOTE: spec edge case\n'null @id value', 'null @value value', 'object with only @id', 'object with only @language', 'object with only @list', 'object with only @value', 'relative @id reference', 'relative @type reference', 'relative @vocab reference', 'reserved @id value', 'reserved @reverse value', 'reserved term',\n// toRDF\n'blank node predicate', 'relative graph reference', 'relative object reference', 'relative predicate reference', 'relative subject reference']);\n\n// safe handler that rejects unsafe warning conditions\napi.safeEventHandler = function safeEventHandler(_ref4) {\n  let {\n    event,\n    next\n  } = _ref4;\n  // fail on all unsafe warnings\n  if (event.level === 'warning' && _notSafeEventCodes.has(event.code)) {\n    throw new JsonLdError('Safe mode validation error.', 'jsonld.ValidationError', {\n      event\n    });\n  }\n  next();\n};\n\n// logs all events and continues\napi.logEventHandler = function logEventHandler(_ref5) {\n  let {\n    event,\n    next\n  } = _ref5;\n  console.log(`EVENT: ${event.message}`, {\n    event\n  });\n  next();\n};\n\n// log 'warning' level events\napi.logWarningEventHandler = function logWarningEventHandler(_ref6) {\n  let {\n    event,\n    next\n  } = _ref6;\n  if (event.level === 'warning') {\n    console.warn(`WARNING: ${event.message}`, {\n      event\n    });\n  }\n  next();\n};\n\n// fallback to throw errors for any unhandled events\napi.unhandledEventHandler = function unhandledEventHandler(_ref7) {\n  let {\n    event\n  } = _ref7;\n  throw new JsonLdError('No handler for event.', 'jsonld.UnhandledEvent', {\n    event\n  });\n};\n\n/**\n * Set default event handler.\n *\n * By default, all event are unhandled. It is recommended to pass in an\n * eventHandler into each call. However, this call allows using a default\n * eventHandler when one is not otherwise provided.\n *\n * @param {object} options - default handler options:\n *   {function|object|array} eventHandler - a default event handler.\n *     falsey to unset.\n */\napi.setDefaultEventHandler = function () {\n  let {\n    eventHandler\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  api.defaultEventHandler = eventHandler ? _asArray(eventHandler) : null;\n};","map":{"version":3,"names":["JsonLdError","require","isArray","_isArray","asArray","_asArray","api","module","exports","defaultEventHandler","setupEventHandler","options","eventHandler","concat","safe","safeEventHandler","length","handleEvent","event","_handle","handlers","doNext","i","handler","next","code","_notSafeEventCodes","Set","level","has","logEventHandler","console","log","message","logWarningEventHandler","warn","unhandledEventHandler","setDefaultEventHandler"],"sources":["C:/Users/kevin/Desktop/EGS data/Egs-Ladder-Front/EGS-ladder-front/node_modules/jsonld/lib/events.js"],"sourcesContent":["/*\n * Copyright (c) 2020 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst JsonLdError = require('./JsonLdError');\n\nconst {\n  isArray: _isArray\n} = require('./types');\n\nconst {\n  asArray: _asArray\n} = require('./util');\n\nconst api = {};\nmodule.exports = api;\n\n// default handler, store as null or an array\n// exposed to allow fast external pre-handleEvent() checks\napi.defaultEventHandler = null;\n\n/**\n * Setup event handler.\n *\n * Return an array event handler constructed from an optional safe mode\n * handler, an optional options event handler, and an optional default handler.\n *\n * @param {object} options - processing options\n *   {function|object|array} [eventHandler] - an event handler.\n *\n * @return an array event handler.\n */\napi.setupEventHandler = ({options = {}}) => {\n  // build in priority order\n  const eventHandler = [].concat(\n    options.safe ? api.safeEventHandler : [],\n    options.eventHandler ? _asArray(options.eventHandler) : [],\n    api.defaultEventHandler ? api.defaultEventHandler : []\n  );\n  // null if no handlers\n  return eventHandler.length === 0 ? null : eventHandler;\n};\n\n/**\n * Handle an event.\n *\n * Top level APIs have a common 'eventHandler' option. This option can be a\n * function, array of functions, object mapping event.code to functions (with a\n * default to call next()), or any combination of such handlers. Handlers will\n * be called with an object with an 'event' entry and a 'next' function. Custom\n * handlers should process the event as appropriate. The 'next()' function\n * should be called to let the next handler process the event.\n *\n * NOTE: Only call this function if options.eventHandler is set and is an\n * array of hanlers. This is an optimization. Callers are expected to check\n * for an event handler before constructing events and calling this function.\n *\n * @param {object} event - event structure:\n *   {string} code - event code\n *   {string} level - severity level, one of: ['warning']\n *   {string} message - human readable message\n *   {object} details - event specific details\n * @param {object} options - processing options\n *   {array} eventHandler - an event handler array.\n */\napi.handleEvent = ({\n  event,\n  options\n}) => {\n  _handle({event, handlers: options.eventHandler});\n};\n\nfunction _handle({event, handlers}) {\n  let doNext = true;\n  for(let i = 0; doNext && i < handlers.length; ++i) {\n    doNext = false;\n    const handler = handlers[i];\n    if(_isArray(handler)) {\n      doNext = _handle({event, handlers: handler});\n    } else if(typeof handler === 'function') {\n      handler({event, next: () => {\n        doNext = true;\n      }});\n    } else if(typeof handler === 'object') {\n      if(event.code in handler) {\n        handler[event.code]({event, next: () => {\n          doNext = true;\n        }});\n      } else {\n        doNext = true;\n      }\n    } else {\n      throw new JsonLdError(\n        'Invalid event handler.',\n        'jsonld.InvalidEventHandler',\n        {event});\n    }\n  }\n  return doNext;\n}\n\nconst _notSafeEventCodes = new Set([\n  'empty object',\n  'free-floating scalar',\n  'invalid @language value',\n  'invalid property',\n  // NOTE: spec edge case\n  'null @id value',\n  'null @value value',\n  'object with only @id',\n  'object with only @language',\n  'object with only @list',\n  'object with only @value',\n  'relative @id reference',\n  'relative @type reference',\n  'relative @vocab reference',\n  'reserved @id value',\n  'reserved @reverse value',\n  'reserved term',\n  // toRDF\n  'blank node predicate',\n  'relative graph reference',\n  'relative object reference',\n  'relative predicate reference',\n  'relative subject reference'\n]);\n\n// safe handler that rejects unsafe warning conditions\napi.safeEventHandler = function safeEventHandler({event, next}) {\n  // fail on all unsafe warnings\n  if(event.level === 'warning' && _notSafeEventCodes.has(event.code)) {\n    throw new JsonLdError(\n      'Safe mode validation error.',\n      'jsonld.ValidationError',\n      {event}\n    );\n  }\n  next();\n};\n\n// logs all events and continues\napi.logEventHandler = function logEventHandler({event, next}) {\n  console.log(`EVENT: ${event.message}`, {event});\n  next();\n};\n\n// log 'warning' level events\napi.logWarningEventHandler = function logWarningEventHandler({event, next}) {\n  if(event.level === 'warning') {\n    console.warn(`WARNING: ${event.message}`, {event});\n  }\n  next();\n};\n\n// fallback to throw errors for any unhandled events\napi.unhandledEventHandler = function unhandledEventHandler({event}) {\n  throw new JsonLdError(\n    'No handler for event.',\n    'jsonld.UnhandledEvent',\n    {event}\n  );\n};\n\n/**\n * Set default event handler.\n *\n * By default, all event are unhandled. It is recommended to pass in an\n * eventHandler into each call. However, this call allows using a default\n * eventHandler when one is not otherwise provided.\n *\n * @param {object} options - default handler options:\n *   {function|object|array} eventHandler - a default event handler.\n *     falsey to unset.\n */\napi.setDefaultEventHandler = function({eventHandler} = {}) {\n  api.defaultEventHandler = eventHandler ? _asArray(eventHandler) : null;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}