{"ast":null,"code":"import * as meta from './meta.js';\nimport * as pointer from './pointer.js';\n/*\nexport function toDottedPath(path: string): string {\n  return (path || '').split('/').slice(1).join('.');\n}\n*/\nexport function diff(src, dst) {\n  let path = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '/';\n  let out = [];\n  if (src !== dst) {\n    if (typeof src !== 'undefined' && typeof dst === 'undefined') {\n      return [{\n        op: 'remove',\n        path\n      }];\n    } else if (typeof src === 'undefined' && typeof dst !== 'undefined') {\n      return [{\n        op: 'add',\n        path,\n        value: dst\n      }];\n    } else if (typeof src !== typeof dst || src === null || dst === null || typeof src !== 'object') {\n      return [{\n        op: 'replace',\n        path,\n        value: dst\n      }];\n    } else if (Array.isArray(src) !== Array.isArray(dst)) {\n      return [{\n        op: 'replace',\n        path,\n        value: dst\n      }];\n    } else if (Array.isArray(src)) {\n      for (let i = 0, max = Math.min(src.length, dst.length); i < max; i++) {\n        out = out.concat(diff(src[i], dst[i], `${path === '/' ? '' : path}/${i}`));\n      }\n      if (src.length > dst.length) {\n        for (let i = src.length; i > dst.length; i--) {\n          out.push({\n            op: 'remove',\n            path: `${path === '/' ? '' : path}/${i - 1}`\n          });\n        }\n      } else if (src.length < dst.length) {\n        for (let i = src.length; i < dst.length; i++) {\n          out.push({\n            op: 'add',\n            path: `${path === '/' ? '' : path}/-`,\n            value: dst[i]\n          });\n        }\n      }\n    } else {\n      const keys = new Set([...Object.keys(src), ...Object.keys(dst)]);\n      for (let k of keys) {\n        out = out.concat(diff(src[k], dst[k], `${path === '/' ? '' : path}/${k}`));\n      }\n    }\n  }\n  return out;\n}\nexport function patch(obj, patch) {\n  const out = meta.annotate(JSON.parse(JSON.stringify(obj)), {\n    scope: 'jsonref:patch'\n  });\n  for (let p of patch) {\n    const path = (p.path || '').split('/').slice(1);\n    if (!path.length) {\n      throw new Error('path cannot be empty');\n    }\n    const key = path.pop();\n    const parent = path.length ? pointer.resolve(out, `/${path.join('/')}`) : out;\n    if (typeof parent !== 'object') {\n      throw new Error('parent is non-object');\n    }\n    switch (p.op) {\n      case 'add':\n        if (key === '-') {\n          if (!Array.isArray(parent)) {\n            throw new Error(\"cannot use '-' index on non-array\");\n          }\n          parent.push(p.value);\n        } else {\n          if (typeof parent[key] !== 'undefined') {\n            throw new Error('cannot add, path exists');\n          }\n          parent[key] = p.value;\n        }\n        break;\n      case 'replace':\n        if (key === '-') {\n          throw new Error(\"cannot use '-' index in path of replace\");\n        }\n        if (typeof parent[key] === 'undefined') {\n          throw new Error('cannot replace, path does not exist');\n        }\n        parent[key] = p.value;\n        break;\n      case 'move':\n        {\n          const from = (p.from || '').split('/').slice(1);\n          if (!from.length) {\n            throw new Error('from path cannot be empty');\n          }\n          const fromKey = from.pop();\n          if (fromKey === '-') {\n            throw new Error(\"cannot use '-' index in from path of move\");\n          }\n          const fromParent = from.length ? pointer.resolve(out, `/${from.join('/')}`) : out;\n          if (typeof fromParent[fromKey] === 'undefined') {\n            throw new Error('cannot move, from path does not exist');\n          }\n          if (key === '-') {\n            if (!Array.isArray(parent)) {\n              throw new Error(\"cannot use '-' index on non-array\");\n            }\n            parent.push(fromParent[fromKey]);\n          } else {\n            parent[key] = fromParent[fromKey];\n          }\n          if (Array.isArray(fromParent)) {\n            fromParent.splice(parseInt(fromKey), 1);\n          } else {\n            delete fromParent[fromKey];\n          }\n        }\n        break;\n      case 'remove':\n        if (key === '-') {\n          throw new Error(\"cannot use '-' index in path of remove\");\n        } else if (typeof parent[key] === 'undefined') {\n          throw new Error(`cannot remove, path ${p.path} does not exist`);\n        }\n        if (Array.isArray(parent)) {\n          parent.splice(parseInt(key), 1);\n        } else {\n          delete parent[key];\n        }\n        break;\n      case 'copy':\n        {\n          const from = (p.from || '').split('/').slice(1);\n          if (!from.length) {\n            throw new Error('from path cannot be empty');\n          }\n          const fromKey = from.pop();\n          if (fromKey === '-') {\n            throw new Error(\"cannot use '-' index in from path of copy\");\n          }\n          const fromParent = from.length ? pointer.resolve(out, `/${from.join('/')}`) : out;\n          if (typeof fromParent[fromKey] === 'undefined') {\n            throw new Error('cannot move, from path does not exist');\n          }\n          if (key === '-') {\n            if (!Array.isArray(parent)) {\n              throw new Error(\"cannot use '-' index on non-array\");\n            }\n            parent.push(fromParent[fromKey]);\n          } else {\n            parent[key] = fromParent[fromKey];\n          }\n        }\n        break;\n      case 'test':\n        if (key === '-') {\n          throw new Error(\"cannot use '-' index in path of test\");\n        }\n        if (parent[key] !== p.value) {\n          throw new Error('test failed');\n        }\n        break;\n    }\n  }\n  return JSON.parse(JSON.stringify(out));\n}","map":{"version":3,"names":["meta","pointer","diff","src","dst","path","out","op","value","Array","isArray","i","max","Math","min","length","concat","push","keys","Set","Object","k","patch","obj","annotate","JSON","parse","stringify","scope","p","split","slice","Error","key","pop","parent","resolve","join","from","fromKey","fromParent","splice","parseInt"],"sources":["C:/Users/kevin/Desktop/EGS data/Egs-Ladder-Front/EGS-ladder-front/node_modules/jsonref/dist/patch.js"],"sourcesContent":["import * as meta from './meta.js';\nimport * as pointer from './pointer.js';\n/*\nexport function toDottedPath(path: string): string {\n  return (path || '').split('/').slice(1).join('.');\n}\n*/\nexport function diff(src, dst, path = '/') {\n    let out = [];\n    if (src !== dst) {\n        if (typeof src !== 'undefined' && typeof dst === 'undefined') {\n            return [{ op: 'remove', path }];\n        }\n        else if (typeof src === 'undefined' && typeof dst !== 'undefined') {\n            return [{ op: 'add', path, value: dst }];\n        }\n        else if (typeof src !== typeof dst || src === null || dst === null || typeof src !== 'object') {\n            return [{ op: 'replace', path, value: dst }];\n        }\n        else if (Array.isArray(src) !== Array.isArray(dst)) {\n            return [{ op: 'replace', path, value: dst }];\n        }\n        else if (Array.isArray(src)) {\n            for (let i = 0, max = Math.min(src.length, dst.length); i < max; i++) {\n                out = out.concat(diff(src[i], dst[i], `${path === '/' ? '' : path}/${i}`));\n            }\n            if (src.length > dst.length) {\n                for (let i = src.length; i > dst.length; i--) {\n                    out.push({ op: 'remove', path: `${path === '/' ? '' : path}/${i - 1}` });\n                }\n            }\n            else if (src.length < dst.length) {\n                for (let i = src.length; i < dst.length; i++) {\n                    out.push({ op: 'add', path: `${path === '/' ? '' : path}/-`, value: dst[i] });\n                }\n            }\n        }\n        else {\n            const keys = new Set([...Object.keys(src), ...Object.keys(dst)]);\n            for (let k of keys) {\n                out = out.concat(diff(src[k], dst[k], `${path === '/' ? '' : path}/${k}`));\n            }\n        }\n    }\n    return out;\n}\nexport function patch(obj, patch) {\n    const out = meta.annotate(JSON.parse(JSON.stringify(obj)), { scope: 'jsonref:patch' });\n    for (let p of patch) {\n        const path = (p.path || '').split('/').slice(1);\n        if (!path.length) {\n            throw new Error('path cannot be empty');\n        }\n        const key = path.pop();\n        const parent = path.length ? pointer.resolve(out, `/${path.join('/')}`) : out;\n        if (typeof parent !== 'object') {\n            throw new Error('parent is non-object');\n        }\n        switch (p.op) {\n            case 'add':\n                if (key === '-') {\n                    if (!Array.isArray(parent)) {\n                        throw new Error(\"cannot use '-' index on non-array\");\n                    }\n                    parent.push(p.value);\n                }\n                else {\n                    if (typeof parent[key] !== 'undefined') {\n                        throw new Error('cannot add, path exists');\n                    }\n                    parent[key] = p.value;\n                }\n                break;\n            case 'replace':\n                if (key === '-') {\n                    throw new Error(\"cannot use '-' index in path of replace\");\n                }\n                if (typeof parent[key] === 'undefined') {\n                    throw new Error('cannot replace, path does not exist');\n                }\n                parent[key] = p.value;\n                break;\n            case 'move':\n                {\n                    const from = (p.from || '').split('/').slice(1);\n                    if (!from.length) {\n                        throw new Error('from path cannot be empty');\n                    }\n                    const fromKey = from.pop();\n                    if (fromKey === '-') {\n                        throw new Error(\"cannot use '-' index in from path of move\");\n                    }\n                    const fromParent = from.length ? pointer.resolve(out, `/${from.join('/')}`) : out;\n                    if (typeof fromParent[fromKey] === 'undefined') {\n                        throw new Error('cannot move, from path does not exist');\n                    }\n                    if (key === '-') {\n                        if (!Array.isArray(parent)) {\n                            throw new Error(\"cannot use '-' index on non-array\");\n                        }\n                        parent.push(fromParent[fromKey]);\n                    }\n                    else {\n                        parent[key] = fromParent[fromKey];\n                    }\n                    if (Array.isArray(fromParent)) {\n                        fromParent.splice(parseInt(fromKey), 1);\n                    }\n                    else {\n                        delete fromParent[fromKey];\n                    }\n                }\n                break;\n            case 'remove':\n                if (key === '-') {\n                    throw new Error(\"cannot use '-' index in path of remove\");\n                }\n                else if (typeof parent[key] === 'undefined') {\n                    throw new Error(`cannot remove, path ${p.path} does not exist`);\n                }\n                if (Array.isArray(parent)) {\n                    parent.splice(parseInt(key), 1);\n                }\n                else {\n                    delete parent[key];\n                }\n                break;\n            case 'copy':\n                {\n                    const from = (p.from || '').split('/').slice(1);\n                    if (!from.length) {\n                        throw new Error('from path cannot be empty');\n                    }\n                    const fromKey = from.pop();\n                    if (fromKey === '-') {\n                        throw new Error(\"cannot use '-' index in from path of copy\");\n                    }\n                    const fromParent = from.length ? pointer.resolve(out, `/${from.join('/')}`) : out;\n                    if (typeof fromParent[fromKey] === 'undefined') {\n                        throw new Error('cannot move, from path does not exist');\n                    }\n                    if (key === '-') {\n                        if (!Array.isArray(parent)) {\n                            throw new Error(\"cannot use '-' index on non-array\");\n                        }\n                        parent.push(fromParent[fromKey]);\n                    }\n                    else {\n                        parent[key] = fromParent[fromKey];\n                    }\n                }\n                break;\n            case 'test':\n                if (key === '-') {\n                    throw new Error(\"cannot use '-' index in path of test\");\n                }\n                if (parent[key] !== p.value) {\n                    throw new Error('test failed');\n                }\n                break;\n        }\n    }\n    return JSON.parse(JSON.stringify(out));\n}\n//# sourceMappingURL=patch.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}